<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GSemir Blog</title>
    <link>https://gsemir0418.github.io/</link>
    <description>Recent content on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Jul 2021 16:47:33 +0800</lastBuildDate>
    
        <atom:link href="https://gsemir0418.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Umi-Request配置</title>
        <link>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Fri, 09 Jul 2021 16:47:33 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/ -&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;utils/request.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { extend } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;umi-request&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { notification } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;antd&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; codeMessage = {
  &lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务器成功返回请求的数据。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;201&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;新建或修改数据成功。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;202&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;一个请求已经进入后台排队（异步任务）。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;204&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;删除数据成功。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;400&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;发出的请求有错误，服务器没有进行新建或修改数据的操作。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;401&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;用户没有权限（令牌、用户名、密码错误）。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;403&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;用户得到授权，但是访问是被禁止的。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;发出的请求针对的是不存在的记录，服务器没有进行操作。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;406&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;请求的格式不可得。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;410&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;请求的资源被永久删除，且不会再得到的。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;422&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;当创建一个对象时，发生一个验证错误。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;500&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务器发生错误，请检查服务器。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;502&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;网关错误。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;503&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务不可用，服务器暂时过载或维护。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;504&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;网关超时。&amp;#39;&lt;/span&gt;,
};
&lt;span style=&#34;color:#228b22&#34;&gt;/** 异常处理程序 */&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; errorHandler = (error) =&amp;gt; {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { response } = error;

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (response &amp;amp;&amp;amp; response.status) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; errorText = codeMessage[response.status] || response.statusText;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { status, url } = response;
    notification.error({
      message: &lt;span style=&#34;color:#cd5555&#34;&gt;`请求错误 &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;status&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;url&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;,
      description: errorText,
    });
  } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!response) {
    notification.error({
      description: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;您的网络发生异常，无法连接服务器&amp;#39;&lt;/span&gt;,
      message: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;网络异常&amp;#39;&lt;/span&gt;,
    });
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; response;
};
&lt;span style=&#34;color:#228b22&#34;&gt;/** 配置request请求时的默认参数 */&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; request = extend({
  prefix:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/api&amp;#39;&lt;/span&gt;,
  errorHandler,
  &lt;span style=&#34;color:#228b22&#34;&gt;// 默认错误处理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  credentials: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;include&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;// 默认请求是否带上cookie
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;});
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; request;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;config/proxy.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; {
  dev: {
    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/api&amp;#39;&lt;/span&gt;: {
      target: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://192.168.95.29:18888&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;// baseURL
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      changeOrigin: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;,
      pathRewrite: {
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;^/api&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
      },
    },
  },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;request
    .get(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/equip/get-all/&amp;#39;&lt;/span&gt;)
    .then(response =&amp;gt; {
      setDataSource(response.content)
      console.log(response.content)
    })
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(error =&amp;gt; {
      console.log(error)
    })	

request
    .put(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/equip/change/&amp;#39;&lt;/span&gt;, {
    data: saveData,
})
    .then(response =&amp;gt; {
    console.log(response)
})
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(error =&amp;gt; {
    console.log(error)
})

request
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;`/equip/delete/&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;key&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;)
    .then(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; (response) {
    console.log(response)
})
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; (error) {
    console.log(error)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/ - </description>
        </item>
    
    
    
        <item>
        <title>NodeStream模块</title>
        <link>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Thu, 08 Jul 2021 14:07:04 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/ -&lt;p&gt;如果多人同时访问服务器中的此文件，则内存占用爆炸&lt;/p&gt;
&lt;p&gt;11.8内存占用&lt;/p&gt;
&lt;p&gt;可读的流传给可写的流&lt;/p&gt;
&lt;p&gt;文件&amp;ndash;&amp;gt;网络&lt;/p&gt;
- https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
    
        <item>
        <title>Object常用方法整理</title>
        <link>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
        <pubDate>Wed, 07 Jul 2021 17:30:59 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ -&lt;h1 id=&#34;objectassign&#34;&gt;Object.assign()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于将所有可枚举属性（属性能否被for…in查找遍历到）的值从一个或多个源对象复制到目标对象，返回目标对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign(target, ...sources)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;target&lt;/code&gt;目标对象；&lt;code&gt;source&lt;/code&gt;源对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖，后面的源对象的属性将类似地覆盖前面的源对象的属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只会拷贝源对象自身的并且可枚举的属性到目标对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了将属性定义（包括其可枚举性）复制到原型，应使用&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;和&lt;code&gt;Object.defineProperty()&lt;/code&gt;。深拷贝？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 复制一个对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; copy = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, obj);
console.log(copy); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1 }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 合并对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o1 = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o2 = { b: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o3 = { c: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; };

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign(o1, o2, o3);
console.log(obj); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: 2, c: 3 }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(o1);  &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: 2, c: 3 }, 注意目标对象自身也会改变。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 合并具有相同属性的对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o1 = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, b: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, c: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o2 = { b: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, c: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o3 = { c: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; };

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, o1, o2, o3);
console.log(obj); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: 2, c: 3 }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 继承属性和不可枚举属性是不能拷贝的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({foo: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;}, { &lt;span style=&#34;color:#228b22&#34;&gt;// foo 是个继承属性。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    bar: {
        value: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// bar 是个不可枚举属性。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    },
    baz: {
        value: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,
        enumerable: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// baz 是个自身可枚举属性。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
});

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; copy = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, obj);
console.log(copy); &lt;span style=&#34;color:#228b22&#34;&gt;// { baz: 3 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深拷贝问题&lt;/p&gt;
&lt;p&gt;针对深拷贝，需要使用其他办法，因为 &lt;code&gt;Object.assign()&lt;/code&gt;拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; obj = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; , b: { c: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;}}; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; copy = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, obj1); 
console.log(JSON.stringify(obj2)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 0, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 改变源对象属性值，拷贝的属性值不变
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;obj.a = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; 
console.log(JSON.stringify(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(JSON.stringify(copy)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 0, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 改变拷贝的属性值，也不会改变源对象的属性值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;copy.a = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;; 
console.log(JSON.stringify(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(JSON.stringify(copy)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 2, b: { c: 0}}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 改变拷贝对象中的深层属性值，将会彻底改变该属性值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;copy.b.c = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;; 
console.log(JSON.stringify(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: { c: 3}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(JSON.stringify(copy)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 2, b: { c: 3}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// Deep Clone 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;obj = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; , b: { c: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;}}; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; depClone = JSON.parse(JSON.stringify(obj1)); 
obj.a = &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;; 
obj.b.c = &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;; 
console.log(JSON.stringify(depClone)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 0, b: { c: 0}}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectis&#34;&gt;Object.is()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断两个值是否是相同的值，返回布尔值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(value1, value2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在以下情况下，返回&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个值均为&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;两个值都是由相同个字符按照相同顺序组成的字符串&lt;/li&gt;
&lt;li&gt;两个值都指向同一个对象&lt;/li&gt;
&lt;li&gt;两个值都是数字并且
&lt;ul&gt;
&lt;li&gt;都是正零&lt;code&gt;+0&lt;/code&gt;或负零&lt;code&gt;-0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;都是&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;都是除零和&lt;code&gt;NaN&lt;/code&gt;外的其它同一个数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与&lt;code&gt;==&lt;/code&gt;运算符的区别&lt;/p&gt;
&lt;p&gt;这种相等性判断逻辑和传统的 &lt;code&gt;==&lt;/code&gt;运算不同，&lt;code&gt;==&lt;/code&gt;运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 &lt;code&gt;&amp;quot;&amp;quot; == false&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的现象），但 &lt;code&gt;Object.is&lt;/code&gt; 不会做这种类型转换。&lt;code&gt;Object.is()&lt;/code&gt;比较严格。&lt;/p&gt;
&lt;p&gt;这与&lt;code&gt;===&lt;/code&gt;运算符的判定方式也不一样。&lt;code&gt;===&lt;/code&gt;运算符（和&lt;code&gt;==&lt;/code&gt;运算符）将数字值 &lt;code&gt;-0&lt;/code&gt; 和 &lt;code&gt;+0&lt;/code&gt; 视为相等，并认为 &lt;code&gt;Number.NaN&lt;/code&gt;不等于&lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;);     &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#658b00&#34;&gt;window&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;window&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;);     &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is([], []);           &lt;span style=&#34;color:#228b22&#34;&gt;// false 与两个对象同理 指向不同
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; foo = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; bar = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(foo, foo);         &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(foo, bar);         &lt;span style=&#34;color:#228b22&#34;&gt;// false 指向不同
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);       &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 特例
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);            &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, +&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);            &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(-&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);           &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectprototypehasownproperty&#34;&gt;Object.prototype.hasOwnProperty()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断对象自身属性中是否具有指定属性（是否有指定的键）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;obj.hasOwnProperty(prop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;prop&lt;/code&gt;要检测的属性的&lt;code&gt;String&lt;/code&gt;字符串形式表示的名称，或者&lt;code&gt;Symbol&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有继承了&lt;code&gt;Object&lt;/code&gt;的对象都会继承到 &lt;code&gt;hasOwnProperty&lt;/code&gt; 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和&lt;code&gt;in&lt;/code&gt;运算符不同，该方法会忽略掉那些从原型链上继承到的属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即使属性的值是 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt;，只要属性存在，&lt;code&gt;hasOwnProperty&lt;/code&gt; 依旧会返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;o = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;();
o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;prop&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o.prop = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;;
o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;prop&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 对待自身属性和继承属性的区别：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;();
o.prop = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;;
o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;prop&amp;#39;&lt;/span&gt;);             &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;toString&amp;#39;&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hasOwnProperty&amp;#39;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectkeys&#34;&gt;Object.keys()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用&lt;code&gt;for...in&lt;/code&gt;循环遍历该对象时返回的顺序一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个表示给定对象的所有可枚举属性的字符串数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对于简单的数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(arr)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// key的顺序随机的对象，会排序后返回
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; anObj = { &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(anObj)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;2&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;100&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// getFoo是一个不可枚举的属性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; myObj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({}, {
  getFoo: {
    value: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.foo; }
  } 
});
myObj.foo = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;// myObj = { foo: 1, getFoo: funtion }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(myObj)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;foo&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectgetownpropertynames&#34;&gt;Object.getOwnPropertyNames()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;与Object.keys()方法类似，但更强大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对于简单的数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;];
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(arr).sort()); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;length&amp;#34;] // 居然还有length...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;};
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj).sort()); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 使用Array.forEach输出属性名和属性值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj).forEach(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt;(val, idx, array) {
  console.log(val + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; -&amp;gt; &amp;#34;&lt;/span&gt; + obj[val]);
});
&lt;span style=&#34;color:#228b22&#34;&gt;// 输出
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 0 -&amp;gt; a
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 1 -&amp;gt; b
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 2 -&amp;gt; c
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;//不可枚举属性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; my_obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({}, {
  getFoo: {
    value: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.foo; },
    enumerable: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
  }
});
my_obj.foo = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;

console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(my_obj).sort()); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;foo&amp;#34;, &amp;#34;getFoo&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectvalues&#34;&gt;Object.values()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;会返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用&lt;code&gt;for...in&lt;/code&gt;循环的顺序相同（区别在于&lt;code&gt;for...in&lt;/code&gt;循环枚举原型链中的属性）。与&lt;code&gt;Object.keys()&lt;/code&gt;十分相似。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对于一般对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { foo: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;, baz: &lt;span style=&#34;color:#b452cd&#34;&gt;42&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;bar&amp;#39;, 42]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 对于类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 键顺序随机的类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 键的数字顺序决定返回值在数组中的顺序 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; an_obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(an_obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// getFoo是一个不可枚举属性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; my_obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({}, { getFoo: { value: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.foo; } } });
my_obj.foo = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;;
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(my_obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;bar&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 非对象作为参数将被强制转换为对象 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;f&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;o&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectgetownpropertydescriptor&#34;&gt;Object.getOwnPropertyDescriptor()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法返回指定对象中的一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(obj, prop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;obj&lt;/code&gt;需要查找的目标对象；&lt;code&gt;prop&lt;/code&gt;目标对象内的属性名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Javascript 中， &lt;code&gt;属性&lt;/code&gt;由一个字符串类型的“名字”（name）和一个“属性描述符”（property descriptor）对象构成。一个属性描述符是一个记录，由下面属性当中的某些组成的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;：该属性的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writable&lt;/code&gt;：当且仅当属性的值可以被改变时为&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;：获取该属性的访问器函数（getter）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;：获取该属性的设置器函数（setter）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configurable&lt;/code&gt;：当且仅当指定对象的属性描述可以被改变或者属性可被删除时，为&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eunmerable&lt;/code&gt;：当且仅当指定对象的属性可以被枚举出时，为&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; o = { get foo() { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;17&lt;/span&gt;; } };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; d = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(o, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// d {
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   configurable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   enumerable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   get: /*the getter function*/,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   set: undefined
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; o = { bar: &lt;span style=&#34;color:#b452cd&#34;&gt;42&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; d = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(o, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// d {
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   configurable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   enumerable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   value: 42,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   writable: true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ - </description>
        </item>
    
    
    
        <item>
        <title>String常用方法整理</title>
        <link>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 05 Jul 2021 13:29:15 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ -&lt;h1 id=&#34;stringprototypematch&#34;&gt;String.prototype.match()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;根据传入的正则表达式的检索字符串并返回结果&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.match(regexp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypesearch&#34;&gt;String.prototype.search()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;根据传入的正则表达式寻找符合的字符位置&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.search(regexp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果匹配，则返回首次匹配项的索引；反之返回&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello World&amp;#39;&lt;/span&gt;
str.search(&lt;span style=&#34;color:#1c7e71&#34;&gt;/[A-Z]/g&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 6
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.search(&lt;span style=&#34;color:#1c7e71&#34;&gt;/[.]/g&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// -1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypechatat&#34;&gt;String.prototype.chatAt()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;从一个字符串中返回指定index的字符&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.chartAt(index)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若没有提供index，则默认使用0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt;
str.charAt(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;B&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeindexof&#34;&gt;String.prototype.indexOf()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询字符串对象中第一次出现指定值的索引&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str.indexOf(searchValue, fromIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;fromIndex&lt;/code&gt;可选，表示开始查找的位置，默认为0，若指定为负数，则等价于传入0；若大于&lt;code&gt;str.length&lt;/code&gt;，则必反回&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;indexOf&lt;/code&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若传入的字符串为空，返回值则取决于&lt;code&gt;fromIndex&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 9
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 11 (str.length)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 检测是否存在某字符串
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 6
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 使用indexOf统计一个字符串中某个字母出现的次数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Hello,my name is gsemir.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; count = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; pos = str.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(pos !== -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;){
	count ++
	pos = str.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, pos+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
}
console.log(count)&lt;span style=&#34;color:#228b22&#34;&gt;// 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypelastindexof&#34;&gt;String.prototype.lastIndexOf()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回指定值最后一次出现的索引，没找到返回&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.lastIndexOf(searchStr, fromIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;fromIndex&lt;/code&gt;可选，默认为无穷大，表示从&lt;code&gt;fromIndex&lt;/code&gt;的位置向左回向查找&lt;/p&gt;
&lt;p&gt;若&lt;code&gt;fromIndex&amp;lt;0&lt;/code&gt;，则等同于&lt;code&gt;fromIndex==0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此方法区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 6 可以用这个获取字符串长度哦
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeconcat&#34;&gt;String.prototype.concat()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将字符串连接合并&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.concat(str2,str3,...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个新字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;HELLO&amp;#39;&lt;/span&gt;
str.concat(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// HELLO WORLD
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototyperepeat&#34;&gt;String.prototype.repeat()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指定次数复制字符串&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.repeat(count)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;.repeat(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abcabc&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeendswith&#34;&gt;String.prototype.endsWith()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判断字符串是否是以指定字符串结尾的&lt;/strong&gt;，&lt;strong&gt;返回&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.endsWith(searchStr, length)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;length&lt;/code&gt;可选，作为str的长度，默认值为&lt;code&gt;str.length&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
str.endsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.endsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.endsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;WORLD&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypestartswith&#34;&gt;String.prototype.startsWith()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判断字符串是否是以指定字符串开头的&lt;/strong&gt;，&lt;strong&gt;返回&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.startsWith(searchStr, position)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;position&lt;/code&gt;可选，开始搜索的位置，默认值为&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
str.startsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.startsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.startsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;HELLO&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeincludes&#34;&gt;String.prototype.includes()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判断指定字符串是否包含在另一个字符串中&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.includes(searchStr, position)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;position&lt;/code&gt;可选，搜寻的起始索引，默认0&lt;/p&gt;
&lt;p&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello, my name is gsemir&amp;#39;&lt;/span&gt;
str.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;my&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;MY&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypevalueof&#34;&gt;String.prototype.valueOf()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回一个String对象的原始值，等同于&lt;code&gt;String.prototype.toString()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; x = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;)
x.valueOf()&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Hello World&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypetostring&#34;&gt;String.prototype.toString()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;万物皆可变成String，如果对象是字符串对象，则返回结果与&lt;code&gt;.valueOf()&lt;/code&gt;一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypesubstring&#34;&gt;String.prototype.subString()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;截取并返回字符串中的一部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.subString(startIndex, endIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;endIndex&lt;/code&gt;可选，默认为&lt;code&gt;str.length+1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;结果中不包含&lt;code&gt;endIndex&lt;/code&gt;处的字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若&lt;code&gt;startIndex&lt;/code&gt;大于&lt;code&gt;endIndex&lt;/code&gt;，则相当于两数调换&lt;/li&gt;
&lt;li&gt;若两数相等，返回空字符串&lt;/li&gt;
&lt;li&gt;若任一参数小于0，则被当作0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;
str.subString(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abc&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.subString(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abc&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.subString(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abc&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeslice&#34;&gt;String.prototype.slice()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提取字符串某一部分&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.slice(beginIndex,endIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;beginIndex&lt;/code&gt;若为&lt;code&gt;-3&lt;/code&gt;，则看作是&lt;code&gt;strLength - 3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;endIndex&lt;/code&gt;可选，若为空，则是为末尾；若为&lt;code&gt;-3&lt;/code&gt;，则看作是&lt;code&gt;strLength - 3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个从原字符串提取出来的新字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ABCDEFGHIJKLMNOP&amp;#39;&lt;/span&gt;
str.slice(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;EFGHIJKLMN&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.slice(&lt;span style=&#34;color:#b452cd&#34;&gt;33&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypereplace&#34;&gt;String.prototype.replace()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;内容过多&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypesplit&#34;&gt;String.prototype.split()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用指定的分割字符将一个String对象分割成子字符串数组&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ABCDEFGHIJKLMNOP&amp;#39;&lt;/span&gt;
str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;E&amp;#34;, &amp;#34;F&amp;#34;, &amp;#34;G&amp;#34;, &amp;#34;H&amp;#34;, &amp;#34;I&amp;#34;, &amp;#34;J&amp;#34;, &amp;#34;K&amp;#34;, &amp;#34;L&amp;#34;, &amp;#34;M&amp;#34;, &amp;#34;N&amp;#34;, &amp;#34;O&amp;#34;, &amp;#34;P&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;ABCDEFGHIJKLMNOP&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;ABCDE&amp;#34;, &amp;#34;GHIJKLMNOP&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypetrim&#34;&gt;String.prototype.trim()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除两端空白字符&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str.trim()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个两端去掉空白的新字符串，不影响原字符串本身&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; originStr = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; foo &amp;#39;&lt;/span&gt;
originStr.trim()&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;foo&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ - </description>
        </item>
    
    
    
        <item>
        <title>数据库基础</title>
        <link>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Mon, 05 Jul 2021 08:57:20 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ -&lt;h1 id=&#34;1-第一二三范式&#34;&gt;1 第一二三范式&lt;/h1&gt;
&lt;h2 id=&#34;1-第一范式-1nf&#34;&gt;1 第一范式 1NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：字段不可再分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：存储体检者的双眼视力，应分为左眼视力和右眼视力两个字段&lt;/p&gt;
&lt;p&gt;即user表里应有&lt;code&gt;left_eye&lt;/code&gt;和&lt;code&gt;right_eye&lt;/code&gt;，而不能存为一个字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./sjk1.png&#34; alt=&#34;image-20210705105007465&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	这是一个学生选课表，没有违反第一范式，但是存在如下问题：&lt;/p&gt;
&lt;p&gt;​	数据冗余、创建系时插入异常、删除学生会导致系消失、学生转系时改动多处&lt;/p&gt;
&lt;p&gt;​	结论：第一范式不够强&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-第二范式-2nf&#34;&gt;2 第二范式 2NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在1NF的基础上，要有键（键可由多个字段组合）&lt;/li&gt;
&lt;li&gt;所有字段必须分别&lt;strong&gt;完全依赖&lt;/strong&gt;于键&lt;/li&gt;
&lt;li&gt;如果键是多个字段组合，则&lt;strong&gt;不允许部分依赖&lt;/strong&gt;于该键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖关系&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给出键，就能唯一确定字段的值&lt;/li&gt;
&lt;li&gt;如给出学号，就能唯一确定姓名，反之则不行&lt;/li&gt;
&lt;li&gt;则称姓名依赖于学号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不满足第二范式的地方&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上表的键为（学号、课名）&lt;/li&gt;
&lt;li&gt;但存在部份依赖：姓名依赖与学号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;改进&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选课表（&lt;strong&gt;学号&lt;/strong&gt;，&lt;strong&gt;课名&lt;/strong&gt;，分数）&lt;/li&gt;
&lt;li&gt;学生表（&lt;strong&gt;学号&lt;/strong&gt;，姓名，系名，系主任）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./sjk2.png&#34; alt=&#34;image-20210705105710705&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-第三范式-3nf&#34;&gt;3 第三范式 3NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个表里不能有两层依赖&lt;/li&gt;
&lt;li&gt;给出学号，就能确定系名——系名依赖于学号&lt;/li&gt;
&lt;li&gt;给出系名，就能确定系主任——系主任依赖与系名&lt;/li&gt;
&lt;li&gt;所以，系主任&lt;strong&gt;间接依赖&lt;/strong&gt;于学号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把系名和系主任单独建表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./sjk3.png&#34; alt=&#34;image-20210705110014247&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-bc范式&#34;&gt;4 BC范式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;键中的属性也不存在间接依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-设计表&#34;&gt;2 设计表&lt;/h1&gt;
&lt;h2 id=&#34;1-数据库设计经验&#34;&gt;1 数据库设计经验&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高内聚&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把相关字段放到一起，不相关的单独建表&lt;/li&gt;
&lt;li&gt;如果两个字段能够单独建表，那就单独建表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;低耦合&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个表之间有弱关系
&lt;ul&gt;
&lt;li&gt;一对一可放在一个表，也可两个表加外键&lt;/li&gt;
&lt;li&gt;一对多一般用外键&lt;/li&gt;
&lt;li&gt;多对多一般建中间表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-一对一&#34;&gt;2 一对一&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假设一个学生只能加入一个班级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把班级放在学生表中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学生id：1001，姓名：小明，班级id：4002&lt;/li&gt;
&lt;li&gt;班级id：4002，名称：入门1班&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以单独建立关联表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学生id：1001，姓名：小明&lt;/li&gt;
&lt;li&gt;学生班级关联表：id：2003，学生id：1001，班级id：4002&lt;/li&gt;
&lt;li&gt;班级id：4002，名称：入门1班&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-一对多&#34;&gt;3 一对多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;假设一个作者能写多本书&lt;/li&gt;
&lt;li&gt;可以把书放到作者表里
&lt;ul&gt;
&lt;li&gt;某些DBMS支持数组，可以存两个id到一个字段&lt;/li&gt;
&lt;li&gt;作者id：1001，姓名：大牛，books：[2001，2002]&lt;/li&gt;
&lt;li&gt;如果不支持数组，就不能这样做了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单独建立关系表（推荐）
&lt;ul&gt;
&lt;li&gt;作者id：1001，姓名：大牛&lt;/li&gt;
&lt;li&gt;出版图书表：：id：2001，作者id：1001，书id：4002，出版社id：xxx&lt;/li&gt;
&lt;li&gt;出版图书表：：id：2002，作者id：1001，书id：4003，出版社id：xxx&lt;/li&gt;
&lt;li&gt;书id：4002，名称：js入门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-多对多&#34;&gt;4 多对多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;假设一个学生可以加入多个班级，每个班级也能有多个学生&lt;/li&gt;
&lt;li&gt;把班级放到学生表中：DBMS支持数组的话可以，否则不可以&lt;/li&gt;
&lt;li&gt;单独建立关系表（推荐）：
&lt;ul&gt;
&lt;li&gt;学生id：1001，姓名：小明&lt;/li&gt;
&lt;li&gt;学生班级关系表：id：2001，学生id：1001，班级id：4002，有效期：xxx&lt;/li&gt;
&lt;li&gt;学生班级关系表：id：2002，学生id：1001，班级id：4003，有效期：xxx&lt;/li&gt;
&lt;li&gt;班级id：4002，名称：入门班&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-什么时候建关联表&#34;&gt;5 什么时候建关联表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当关联自身存在属性时
&lt;ul&gt;
&lt;li&gt;比如关联的有效期，有效期为一年&lt;/li&gt;
&lt;li&gt;比如关联的级别，店铺会员分为vip1-6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-join把表连接起来&#34;&gt;3 JOIN把表连接起来&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;连接表
&lt;ul&gt;
&lt;li&gt;inner join&lt;/li&gt;
&lt;li&gt;left join：会保留右边的null，以保证左边都显示&lt;/li&gt;
&lt;li&gt;right join：会保留左边的null，以保证右边都显示&lt;/li&gt;
&lt;li&gt;full outer join：保留两边的null，以保证两边都显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看图巧记&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/29234064&#34;&gt;图解 SQL 里的各种 JOIN - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./sjk4.png&#34; alt=&#34;image-20210706153805324&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A.PK&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A_PK,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B.PK&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B_PK,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;A.VALUE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A_VALUE,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B.VALUE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B_VALUE&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Table_AA&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INNER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;JOIN&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Table_BB&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A.PK&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B.PK&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;尝试&lt;/strong&gt;（以inner join为例）：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;用&lt;/span&gt;docker启动mysql&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，或者重新&lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;run一遍&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;start&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mysql1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;进入&lt;/span&gt;mysql&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;exec&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-it&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mysql1&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;mysql&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-u&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;root&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-p&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;123456&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建数据库&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;db1&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;character&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8mb4&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;collate&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8mb4_unicode_ci;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;databases&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;db1;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建表&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;users&lt;/span&gt;(id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;serial,name&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;text&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;staffs&lt;/span&gt;(id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;serial,name&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;text&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;orders&lt;/span&gt;(id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;serial,user_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bigint&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;,staff_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bigint&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建记录&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(name)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;XiaoMing&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;XiaoMing&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;staffs&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(name)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;XiaoHong&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;XiaoHong&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(user_id,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;staff_id,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+---------+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;user_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;staff_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+---------+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+---------+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;使用&lt;/span&gt;inner&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users.name&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;unname,orders.amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inner&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;orders&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users.id=orders.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;user&lt;/span&gt;.id;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;得到&lt;/span&gt;XiaoMing&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;uname&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;XiaoMing&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4-缓存字段&#34;&gt;4 缓存字段&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假设一个博客blog包含多个评论comments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何获取博客的评论数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;count&lt;/span&gt;(id)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;comments&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;blog_id=&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的办法是在blog表中添加&lt;code&gt;comment_count&lt;/code&gt;字段，每次添加comment则+1，每次删除comment则-1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样就可以快速获取博客的评论数，约定缓存字段均使用&lt;code&gt;_count&lt;/code&gt;结尾&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-事务&#34;&gt;5 事务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有些操作必须一次完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户评论之后，&lt;strong&gt;首先&lt;/strong&gt;要在comments表中新增记录，&lt;strong&gt;其次&lt;/strong&gt;在blogs表将对应的comment_count+1&lt;/li&gt;
&lt;li&gt;如果第一步执行了，第二步没有执行，那么数据就乱了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用事务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/mysql/mysql-transaction.html&#34;&gt;MySQL 事务 | 菜鸟教程 (runoob.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-mysql储存引擎&#34;&gt;6 MySQL储存引擎&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;engines;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;innoDB-默认，是事务型数据库的首选，支持事务，遵循ACID、支持行锁和外键；&lt;/li&gt;
&lt;li&gt;MyISAM-拥有较高的插入查询速度，但不支持事务&lt;/li&gt;
&lt;li&gt;Memory-内存中，快速访问数据&lt;/li&gt;
&lt;li&gt;Archive-只支持insert和select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;7-索引&#34;&gt;7 索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unique&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;index1&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users(name(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;));&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/mysql/mysql-index.html&#34;&gt;MySQL 索引 | 菜鸟教程 (runoob.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用途&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高搜索效率&lt;/li&gt;
&lt;li&gt;where xxx &amp;gt; 100 那么我们可以创建xxx的索引&lt;/li&gt;
&lt;li&gt;where xxx &amp;gt; 100 and yyy &amp;gt; 200，可以创建xxx，yyy的索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ - </description>
        </item>
    
    
    
        <item>
        <title>Sequelize ORM</title>
        <link>https://gsemir0418.github.io/posts/sequelize.js/</link>
        <pubDate>Fri, 02 Jul 2021 11:01:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/sequelize.js/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/sequelize.js/ -&lt;h1 id=&#34;1-mysql数据类型&#34;&gt;1 MySQL数据类型&lt;/h1&gt;
&lt;p&gt;MySQL支持的数据类型比较少，主要有五种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数字类型&lt;/li&gt;
&lt;li&gt;字符串类型&lt;/li&gt;
&lt;li&gt;时间和日期类型&lt;/li&gt;
&lt;li&gt;JSON类型&lt;/li&gt;
&lt;li&gt;其他特殊类型&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;id 可以指定类型为serial序列，时间格式最好使用ISO 8601格式，即&lt;code&gt;2021-07-02T11:01:55+08:00&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;2-sequelize使用&#34;&gt;2 Sequelize使用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方文档：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sequelize.org/master/manual/getting-started.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;安装：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn add sequelize
yarn add mysql2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Sequelize, Model, DataTypes } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;sequelize&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 创建sequelize连接
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; sequelize = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Sequelize(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gsq&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;, {
    host: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
    dialect: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;,
})

&lt;span style=&#34;color:#228b22&#34;&gt;// 创建User模型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; User &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Model { }
&lt;span style=&#34;color:#228b22&#34;&gt;// 初始化User表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;User.init({
    &lt;span style=&#34;color:#228b22&#34;&gt;// 指定字段及字段类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    username: DataTypes.STRING,
    birthday: DataTypes.DATE
}, { sequelize, modelName: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt; })&lt;span style=&#34;color:#228b22&#34;&gt;// 表名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 同步到数据库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;sequelize.sync()
    &lt;span style=&#34;color:#228b22&#34;&gt;// 创建一条数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    .then(() =&amp;gt; User.create({
        username: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gsq&amp;#39;&lt;/span&gt;,
        birthday: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Date&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;)
    }))
    &lt;span style=&#34;color:#228b22&#34;&gt;// 把数据打印出来
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    .then(gsq =&amp;gt; {
        console.log(gsq.toJSON())
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-查询数据与删除数据&#34;&gt;3 查询数据与删除数据&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查询全部数据：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; findAll() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; users = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; User.findAll()
    console.log(JSON.stringify(users))
    sequelize.close()
}
findAll()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;根据id删除数据：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; deleteById() {
    User.destroy({
        where: {
            id: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
        }
    })
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; users = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; User.findAll()
    console.log(JSON.stringify(users))
    sequelize.close()
}
deleteById()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gsemir0418.github.io/posts/sequelize.js/ - </description>
        </item>
    
    
    
        <item>
        <title>Node.js连接数据库</title>
        <link>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
        <pubDate>Fri, 02 Jul 2021 09:24:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/ -&lt;h1 id=&#34;1-安装mysql依赖包&#34;&gt;1 安装mysql依赖包&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;yarn add mysql
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;2-创建mysql连接&#34;&gt;2 创建mysql连接&lt;/h1&gt;
&lt;p&gt;创建连接前，确保容器是开启状态。新建&lt;code&gt;test.js&lt;/code&gt;文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入&lt;code&gt;mysql&lt;/code&gt;模块&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; mysql = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建连接&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; connection = mysql.createConnection({
    host: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;// 老版本的docker需要填ip
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    user: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;,
    password: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
})
connection.connect();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 创建数据库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;connection.query(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;CREATE DATABASE IF NOT EXISTS gsq DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_unicode_520_ci;&amp;#39;&lt;/span&gt;, (error, results, fields) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error;
    console.log(results)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建名为&lt;code&gt;gsq&lt;/code&gt;的数据库（数据库不存在的情况下），并指定默认字符集为&lt;code&gt;utf8mb4&lt;/code&gt;(mysql对于utf-8字符集支持不佳)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建数据表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 选择数据库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;connection.query(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;use gsq;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 创建表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;connection.query(&lt;span style=&#34;color:#cd5555&#34;&gt;`CREATE TABLE IF NOT EXISTS user(
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;    name text,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;    age int
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;);`&lt;/span&gt;, (error, results, fields) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
    console.log(results)
})

connection.end()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用模板字符串实现换行输入。&lt;/p&gt;
&lt;p&gt;执行&lt;code&gt;node test.js&lt;/code&gt;，如有报错，参考如下网站尝试修改密码加密规则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yubin1285570923/article/details/83352491&#34;&gt;navicat 连接不上虚拟机上的mysql容器 client does not support authentication protocol requested by server； consid_yubin1285570923的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;3-常用sql语句&#34;&gt;3 常用SQL语句&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;drop database gsq;&lt;/code&gt; 删除gsq数据库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drop table user;&lt;/code&gt; 删除user表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert into user (name,age) values (&#39;gsq&#39;,25);&lt;/code&gt; 添加一条数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from user where name=&#39;gsq&#39;;&lt;/code&gt; 删除name为gsq的数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;updata user set age=&#39;70&#39; where name = &#39;gsq&#39;;&lt;/code&gt; 修改name为gsq数据的age为70&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select name from user;&lt;/code&gt; 显示user中全部name字段信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select count(name) from user;&lt;/code&gt; 显示name字段数据条数&lt;/p&gt;
&lt;p&gt;一般不会自己直接运用SQL语句操作数据库，而是利用封装好的ORM库（MyBatis、Hibernate）来操作数据库。&lt;/p&gt;
- https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/ - </description>
        </item>
    
    
    
        <item>
        <title>Docker安装MySQL</title>
        <link>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</link>
        <pubDate>Fri, 02 Jul 2021 08:36:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/ -&lt;h1 id=&#34;1-win10安装docker&#34;&gt;1 win10安装Docker&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注册登录并下载安装&lt;code&gt;Docker Desktop&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用Hyper-V&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右键Windows按钮并选择“应用和功能”，选择相关设置中的“程序和功能”，选择“启用或关闭Windows功能”，选择Hyper-V，单机确定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210702084245852.png&#34; alt=&#34;image-20210702084245852&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用CPU的虚拟化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入&lt;code&gt;BIOS&lt;/code&gt;界面，找到&lt;code&gt;Virtualization Technology&lt;/code&gt;选项，将disabled改为&lt;code&gt;enabled&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新WSL2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果出现&lt;code&gt;WSL 2 installation is incomplete&lt;/code&gt;的报错，则需要更新WSL 2。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://aka.ms/wsl2kernel&#34;&gt;https://aka.ms/wsl2kernel&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据文档下载最新包，安装重启即可。&lt;/p&gt;
&lt;h1 id=&#34;2-docker安装mysql&#34;&gt;2 Docker安装MySQL&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --name mysql1 -e &lt;span style=&#34;color:#00688b&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;123456&lt;/span&gt; -p 3306:3306 -d mysql:8.0.25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;name&lt;/code&gt;是容器的名字；&lt;code&gt;-e&lt;/code&gt;是环境变量，配置的&lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;是mysql密码；&lt;code&gt;-p&lt;/code&gt;是端口映射，左侧是本机端口号，右侧是虚拟机端口号；&lt;code&gt;-d&lt;/code&gt;表示程序持续运行；最后指定mysql的版本号为&lt;code&gt;8.0.25&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;安装完成后，在docker desktop中可以发现mysql1的容器已开启，或者在命令行输入docker ps查看全部在运行的容器。&lt;/p&gt;
&lt;h1 id=&#34;3-docker常用命令&#34;&gt;3 Docker常用命令&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; 查看容器运行状态&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker start mysql1&lt;/code&gt; 启动mysql1容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker kill mysql1&lt;/code&gt; 关闭容器mysql1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker container run mysql1&lt;/code&gt; 开启刚刚关掉的容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker rm mysql1&lt;/code&gt; 删除容器，必要时可加-f选项&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run xxx&lt;/code&gt; 启动新容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + d&lt;/code&gt; 退出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：用docker运行的容器，默认不会持久化，如果容器数据被删掉了，那么数据也没了。类似网吧的电脑机制。&lt;/p&gt;
&lt;h1 id=&#34;4-连接mysql&#34;&gt;4 连接MySQL&lt;/h1&gt;
&lt;h2 id=&#34;1-进入容器&#34;&gt;1 进入容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;法1 DockerDesktop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单击容器右侧的&lt;code&gt;cli&lt;/code&gt;按钮，弹出命令行窗口，并自动连接到容器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;法2 命令行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it mysql1 bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-操作mysql&#34;&gt;2 操作MySQL&lt;/h2&gt;
&lt;p&gt;进入容器后，输入&lt;code&gt;mysql -u root -p&lt;/code&gt;输入密码，若出现欢迎界面，且命令行前缀变为&lt;code&gt;&amp;gt;mysql&lt;/code&gt;，表示连接成功。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL基本语句：（&lt;strong&gt;必须使用分号结尾&lt;/strong&gt;）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show databases;&lt;/code&gt; 查看全部数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use xxx;&lt;/code&gt; 选择要使用的数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show tables;&lt;/code&gt; 显示数据库中全部数据表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;describe xxx;&lt;/code&gt; 描述表中全部字段信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select * from xxx;&lt;/code&gt; 显示表中全部内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/ - </description>
        </item>
    
    
    
        <item>
        <title>杂七杂八</title>
        <link>https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</link>
        <pubDate>Wed, 30 Jun 2021 16:25:00 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/ -&lt;p&gt;const {a, b} = p// 在p中取出同名属性a和b，&lt;/p&gt;
&lt;p&gt;等同于&lt;/p&gt;
&lt;p&gt;const a = p.a&lt;/p&gt;
&lt;p&gt;const b = p.b&lt;/p&gt;
&lt;p&gt;等同于&lt;/p&gt;
&lt;p&gt;const {a:a,b:b} = p&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象中添加属性，可以利用&lt;code&gt;Object.assign()&lt;/code&gt;将其复制到一个对象中，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { a:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, b:&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; }
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; c = { pn_detail:[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;] }
&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign(c, obj)&lt;span style=&#34;color:#228b22&#34;&gt;// { pn_detail:[1, 2, 3], a:1, b:2 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在对象中取出指定的values&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/ - </description>
        </item>
    
    
    
        <item>
        <title>NodeHTTP模块</title>
        <link>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Wed, 30 Jun 2021 09:55:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/ -&lt;h1 id=&#34;0-准备工作&#34;&gt;0 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;1-ts-node-dev&#34;&gt;1 ts-node-dev&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当文件更新时自动重启node&lt;/li&gt;
&lt;li&gt;避免每次改完代码都要重新运行的麻烦&lt;/li&gt;
&lt;li&gt;可以用TS开发Node.js程序，且会自动重启&lt;/li&gt;
&lt;li&gt;不宜在生产环境使用，但非常适合用来学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm -g i ts-node-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要用npm安装 ，用yarn安装的话使用时会报错。。无法识别“ts-node-dev”命令，不知道为什么。&lt;/p&gt;
&lt;h2 id=&#34;2-vscode配置&#34;&gt;2 VSCode配置&lt;/h2&gt;
&lt;p&gt;配置自动保存与保存后自动格式化：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl shift p&lt;/code&gt;打开&lt;code&gt;首选项：打开设置(ui)&lt;/code&gt;，&lt;code&gt;AutoSave&lt;/code&gt;修改为&lt;code&gt;onFocusChange&lt;/code&gt;，搜索format，勾选&lt;code&gt;Format On Save&lt;/code&gt;开启保存后自动格式化。&lt;/p&gt;
&lt;h2 id=&#34;3-curl&#34;&gt;3 curl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GET请求：&lt;code&gt;curl -v url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;POST请求：&lt;code&gt;curl -v -d “name=gsq&amp;quot; url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置请求头：&lt;code&gt;-H &#39;Content-Type:application/json&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置动词：&lt;code&gt;-X PUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JSON请求：&lt;code&gt;curl -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;bob&amp;quot;}&#39; -H &#39;Content-Type:application/json&#39; url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后面会用到&lt;code&gt;curl&lt;/code&gt;来构造请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-创建项目&#34;&gt;1 创建项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;初始化项目：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn init -y
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;@types/node&lt;/code&gt;声明文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn add --dev @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;新建&lt;code&gt;index.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入http模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 用http创建server
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#228b22&#34;&gt;// 监听server的request事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request, response) =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;有人请求了&amp;#39;&lt;/span&gt;)
	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 服务器返回data，并终止服务器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;span style=&#34;color:#228b22&#34;&gt;// 开始监听8888端口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;控制台&lt;code&gt;ts-node-dev index.ts&lt;/code&gt;启动服务器&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;curl -v http://localhost:8888 &lt;/code&gt;发送请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-request对象&#34;&gt;2 request对象&lt;/h1&gt;
&lt;p&gt;http.createServer()创建的server是http.Server和net.Server类的实例，可以创建后端环境（静态服务器）。&lt;/p&gt;
&lt;p&gt;首先控制台打出&lt;code&gt;request.contructor&lt;/code&gt;，发现request对象的构造函数是&lt;code&gt;IncomingMessage&lt;/code&gt;，因此利用ts语法，在传参中直接定义&lt;code&gt;request:IncomingMessage&lt;/code&gt;，告诉TypeScript request不是任意对象，而是IncomingMessage对象。&lt;/p&gt;
&lt;p&gt;获取请求信息（请求头、路径、请求消息体等）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 引入IncomingMessage模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response) =&amp;gt; {
    console.log(request.httpVersion)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取http版本号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    console.log(request.url)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    console.log(request.headers)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求头
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求消息体
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = []
    &lt;span style=&#34;color:#228b22&#34;&gt;// 监听data事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 用户每上传一个字节或一段内容就会触发data事件，由于每次上传报文的大小是固定的，所以在用户上传过程中会不停地触发data事件。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 因此需要监听每一次的data事件，把每一次上传的数据放到一个数组中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    request.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, (chunk) =&amp;gt; {
        arr.push(chunk)
    })
    &lt;span style=&#34;color:#228b22&#34;&gt;// 监听上传结束事件，end事件只有在数据被完全消费掉后再触发
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    request.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, () =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 将数据中的每一段chunk连接起来
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; body = Buffer.concat(arr).toString()
        console.log(body)
        &lt;span style=&#34;color:#228b22&#34;&gt;// 请求处理完成后响应
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;)
    })
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开启服务器后，利用&lt;code&gt;curl&lt;/code&gt;构造请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -V -d &amp;quot;name=gsq&amp;quot; http://localhost:8888/api/message
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;控制台将打印如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.1
/api/message
{
  host: &#39;localhost:8888&#39;,
  &#39;user-agent&#39;: &#39;curl/7.55.1&#39;,
  accept: &#39;*/*&#39;,
  &#39;content-length&#39;: &#39;8&#39;,
  &#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;
}
name=gsq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有headers、method、url等属性&lt;/li&gt;
&lt;li&gt;从stream.Readable类继承了data、end、error事件&lt;/li&gt;
&lt;li&gt;不能直接拿到请求的消息体：原因与TCP有关&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-response对象&#34;&gt;3 response对象&lt;/h1&gt;
&lt;p&gt;同样的方式发现response对象是ServerResponse的实例对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有getHeader、setHeader、end、write等方法，可以控制响应的每一部分&lt;/li&gt;
&lt;li&gt;拥有statusCode属性，默认为200，可读可写&lt;/li&gt;
&lt;li&gt;继承了Stream，也属于Stream类的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gsq&amp;#39;&lt;/span&gt;)
response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;
response.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
response.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
response.end()
&lt;span style=&#34;color:#228b22&#34;&gt;// 响应的消息体
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&amp;lt; HTTP/&lt;span style=&#34;color:#b452cd&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt; Not Found
&amp;lt; NAME: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;gsq&lt;/span&gt;
&amp;lt; &lt;span style=&#34;color:#658b00&#34;&gt;Date&lt;/span&gt;: Wed, &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; Jun &lt;span style=&#34;color:#b452cd&#34;&gt;2021&lt;/span&gt; 05:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;56&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;08&lt;/span&gt; GMT
&amp;lt; Connection: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;keep&lt;/span&gt;-alive
&amp;lt; Keep-Alive: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;timeout&lt;/span&gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;
&amp;lt; Transfer-Encoding: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;chunked&lt;/span&gt;
&amp;lt;
&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4-根据url返回不同的文件&#34;&gt;4 根据url返回不同的文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;思路：通过request获取到用户请求的url，利用switch进行判断，根据请求不同，应用fs.readFile读取页面数据并返回给请求端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; fs &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; p &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage, ServerResponse } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#228b22&#34;&gt;// 获取当前目录下的public路径，利用resolve方法进行拼接并解析为绝对路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; publicDir = p.relative(__dirname, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;)

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ServerResponse&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 获取到请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url } = request
    &lt;span style=&#34;color:#228b22&#34;&gt;// 判断请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (url) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 读取index.html文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/main.js&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 在响应的头部声明文件类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;text/javascript; charset=utf-8&amp;#39;&lt;/span&gt;)
            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;main.js&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.css&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 在响应的头部声明文件类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;text/css; charset=utf-8&amp;#39;&lt;/span&gt;)
            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.css&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    }
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中访问&lt;code&gt;http://localhost:8888/index.html&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-处理查询参数&#34;&gt;5 处理查询参数&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;当请求的路径带有参数时（&amp;hellip;/index.html?q=1），会影响到switch对路径的判断，从而找不到对应访问的文件，因此需要&lt;code&gt;url模块&lt;/code&gt;来处理查询的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引入url模块时，模块名与request中取到的url同名，所以需要修改url为path：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;path&lt;/span&gt; } = request
&lt;span style=&#34;color:#228b22&#34;&gt;// 在request中取到url字段，重命名为path变量
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;url.parse(path)&lt;/code&gt;返回一个&lt;code&gt;URL对象&lt;/code&gt;，包含如下字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;Url {
  protocol: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, slashes: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, auth: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, host: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
  port: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  hostname: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  hash: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  search: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;?q=2&amp;#39;&lt;/span&gt;,
  query: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;q=2&amp;#39;&lt;/span&gt;, pathname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;, path: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html?q=2&amp;#39;&lt;/span&gt;,
  href: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html?q=2&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;switch只需读取URL对象中的&lt;code&gt;pathname&lt;/code&gt;字段来进行判断即可。&lt;/p&gt;
&lt;p&gt;**注：**但是目前node版本中，url.parse已被&lt;code&gt;弃用&lt;/code&gt;，所以我们直接实例化一个URL对象。URL对象接受两个参数，分别为&lt;code&gt;请求路径&lt;/code&gt;与&lt;code&gt;根路径&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; url = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { pathname } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新的URL对象包含如下字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;URL {
  href: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888/index.html?q=1&amp;#39;&lt;/span&gt;,
  origin: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;,
  protocol: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http:&amp;#39;&lt;/span&gt;,
  username: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  password: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  host: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost:8888&amp;#39;&lt;/span&gt;,
  hostname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
  port: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;8888&amp;#39;&lt;/span&gt;,
  pathname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;,
  search: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;?q=1&amp;#39;&lt;/span&gt;,
  searchParams: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;URLSearchParams&lt;/span&gt; { &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; },
  hash: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样拥有&lt;code&gt;pathname&lt;/code&gt;字段，之后的switch判断与之前保持一致即可。&lt;/p&gt;
&lt;h1 id=&#34;6-匹配任意文件&#34;&gt;6 匹配任意文件&lt;/h1&gt;
&lt;p&gt;目前为止我们只能访问三个路径，其他路径均视为404，如果每多一个页面就多写一个case来判断并响应的话，工作量非常大且代码冗余，重复代码很多，因此需要抽取出关键代码，使其能够自动匹配任意访问的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思路：还是从路径入手，URL对象中的pathname字段的字符串，经过一些字符处理，便可以作为fs读取文件的路径名。例如访问路径为&lt;code&gt;/aa/index.html&lt;/code&gt;，则读取路径中需要的字段是&lt;code&gt;aa/index.html&lt;/code&gt;，只需将前面的&lt;code&gt;&#39;/&#39;&lt;/code&gt;去掉即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改后代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; fs &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; p &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage, ServerResponse } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; publicDir = p.relative(__dirname, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;)

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ServerResponse&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;path&lt;/span&gt; } = request
    &lt;span style=&#34;color:#228b22&#34;&gt;// 在URL对象中获取pathname字段
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { pathname } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#228b22&#34;&gt;// 基于访问路径处理文件名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fileName = pathname.substring(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    fs.readFile(p.resolve(publicDir, fileName), (error, data) =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果读不到文件，则返回404
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) {
            response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;
            response.end()
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果成功读取到文件，则返回读取到的数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        response.end(data.toString())
    })
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;7-处理不存在的文件&#34;&gt;7 处理不存在的文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;对访问文件时出现的错误类型进行判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-文件不存在的情况&#34;&gt;1 文件不存在的情况&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error.errno === -&lt;span style=&#34;color:#b452cd&#34;&gt;4058&lt;/span&gt;) {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//找不到文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;404.html&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
        response.end(data)
        &lt;span style=&#34;color:#228b22&#34;&gt;// data无需toString()，浏览器自动解析data
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	})
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-当访问路径为根路径httplocalhost8888时默认访问indexhtml&#34;&gt;2 当访问路径为根路径&lt;code&gt;http://localhost:8888&lt;/code&gt;时，默认访问index.html&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; fileName = pathname.substring(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (fileName === &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) {
    fileName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3当访问路径不是文件而是目录时&#34;&gt;3.当访问路径不是文件而是目录时&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error.errno === -&lt;span style=&#34;color:#b452cd&#34;&gt;4068&lt;/span&gt;) {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;403&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//没有权限访问
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;无权查看目录内容&amp;#39;&lt;/span&gt;)
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4其他错误一律归为服务器内部错误&#34;&gt;4.其他错误一律归为服务器内部错误&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//服务器内部错误
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务器繁忙，请稍后再试&amp;#39;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;8-处理非get请求&#34;&gt;8 处理非GET请求&lt;/h1&gt;
&lt;p&gt;静态服务器不会接受非get请求，对Method进行过滤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { method } = request
if (method !== &#39;GET&#39;) {
	response.statusCode = 405// Method Not Allowed
	response.end();
	return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;9-添加缓存选项&#34;&gt;9 添加缓存选项&lt;/h1&gt;
&lt;p&gt;再次刷新页面时，css、js和图片等静态数据会缓存至内存中，提升网页访问性能。&lt;/p&gt;
&lt;p&gt;成功返回数据前，在响应头添加缓存字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public max-age=3600&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;10-发布未完成&#34;&gt;10 发布(未完成)&lt;/h1&gt;
&lt;p&gt;将ts变成js，需全局安装TypeScript，使用&lt;code&gt;tsc&lt;/code&gt;命令进行转换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tsc index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把js作为package.json中的&lt;code&gt;main&lt;/code&gt;字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;index.js&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发布&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn login/npm adduser
yarn publish/npm publish
&lt;/code&gt;&lt;/pre&gt;- https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
  </channel>
</rss> 