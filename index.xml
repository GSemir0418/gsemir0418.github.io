<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GSemir Blog</title>
    <link>https://gsemir0418.github.io/</link>
    <description>Recent content on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Jul 2021 11:01:55 +0800</lastBuildDate>
    
        <atom:link href="https://gsemir0418.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Sequelize ORM</title>
        <link>https://gsemir0418.github.io/posts/sequelize.js/</link>
        <pubDate>Fri, 02 Jul 2021 11:01:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/sequelize.js/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/sequelize.js/ -&lt;h1 id=&#34;1-mysql数据类型&#34;&gt;1 MySQL数据类型&lt;/h1&gt;
&lt;p&gt;MySQL支持的数据类型比较少，主要有五种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数字类型&lt;/li&gt;
&lt;li&gt;字符串类型&lt;/li&gt;
&lt;li&gt;时间和日期类型&lt;/li&gt;
&lt;li&gt;JSON类型&lt;/li&gt;
&lt;li&gt;其他特殊类型&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;id 可以指定类型为serial序列，时间格式最好使用ISO 8601格式，即&lt;code&gt;2021-07-02T11:01:55+08:00&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;2-sequelize使用&#34;&gt;2 Sequelize使用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方文档：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sequelize.org/master/manual/getting-started.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;安装：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn add sequelize
yarn add mysql2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Sequelize, Model, DataTypes } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;sequelize&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 创建sequelize连接
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; sequelize = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Sequelize(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gsq&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;, {
    host: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
    dialect: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;,
})

&lt;span style=&#34;color:#228b22&#34;&gt;// 创建User模型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; User &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Model { }
&lt;span style=&#34;color:#228b22&#34;&gt;// 初始化User表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;User.init({
    &lt;span style=&#34;color:#228b22&#34;&gt;// 指定字段及字段类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    username: DataTypes.STRING,
    birthday: DataTypes.DATE
}, { sequelize, modelName: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt; })&lt;span style=&#34;color:#228b22&#34;&gt;// 表名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 同步到数据库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;sequelize.sync()
    &lt;span style=&#34;color:#228b22&#34;&gt;// 创建一条数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    .then(() =&amp;gt; User.create({
        username: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gsq&amp;#39;&lt;/span&gt;,
        birthday: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Date&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;)
    }))
    &lt;span style=&#34;color:#228b22&#34;&gt;// 把数据打印出来
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    .then(gsq =&amp;gt; {
        console.log(gsq.toJSON())
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-查询数据与删除数据&#34;&gt;3 查询数据与删除数据&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查询全部数据：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; findAll() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; users = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; User.findAll()
    console.log(JSON.stringify(users))
    sequelize.close()
}
findAll()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;根据id删除数据：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; deleteById() {
    User.destroy({
        where: {
            id: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
        }
    })
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; users = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; User.findAll()
    console.log(JSON.stringify(users))
    sequelize.close()
}
deleteById()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gsemir0418.github.io/posts/sequelize.js/ - </description>
        </item>
    
    
    
        <item>
        <title>Node.js连接数据库</title>
        <link>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
        <pubDate>Fri, 02 Jul 2021 09:24:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/ -&lt;h1 id=&#34;1-安装mysql依赖包&#34;&gt;1 安装mysql依赖包&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;yarn add mysql
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;2-创建mysql连接&#34;&gt;2 创建mysql连接&lt;/h1&gt;
&lt;p&gt;创建连接前，确保容器是开启状态。新建&lt;code&gt;test.js&lt;/code&gt;文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入&lt;code&gt;mysql&lt;/code&gt;模块&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; mysql = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建连接&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; connection = mysql.createConnection({
    host: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;// 老版本的docker需要填ip
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    user: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;,
    password: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
})
connection.connect();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 创建数据库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;connection.query(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;CREATE DATABASE IF NOT EXISTS gsq DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_unicode_520_ci;&amp;#39;&lt;/span&gt;, (error, results, fields) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error;
    console.log(results)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建名为&lt;code&gt;gsq&lt;/code&gt;的数据库（数据库不存在的情况下），并指定默认字符集为&lt;code&gt;utf8mb4&lt;/code&gt;(mysql对于utf-8字符集支持不佳)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建数据表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 选择数据库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;connection.query(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;use gsq;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 创建表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;connection.query(&lt;span style=&#34;color:#cd5555&#34;&gt;`CREATE TABLE IF NOT EXISTS user(
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;    name text,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;    age int
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;);`&lt;/span&gt;, (error, results, fields) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
    console.log(results)
})

connection.end()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用模板字符串实现换行输入。&lt;/p&gt;
&lt;p&gt;执行&lt;code&gt;node test.js&lt;/code&gt;，如有报错，参考如下网站尝试修改密码加密规则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yubin1285570923/article/details/83352491&#34;&gt;navicat 连接不上虚拟机上的mysql容器 client does not support authentication protocol requested by server； consid_yubin1285570923的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;3-常用sql语句&#34;&gt;3 常用SQL语句&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;drop database gsq;&lt;/code&gt; 删除gsq数据库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drop table user;&lt;/code&gt; 删除user表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert into user (name,age) values (&#39;gsq&#39;,25);&lt;/code&gt; 添加一条数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from user where name=&#39;gsq&#39;;&lt;/code&gt; 删除name为gsq的数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;updata user set age=&#39;70&#39; where name = &#39;gsq&#39;;&lt;/code&gt; 修改name为gsq数据的age为70&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select name from user;&lt;/code&gt; 显示user中全部name字段信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select count(name) from user;&lt;/code&gt; 显示name字段数据条数&lt;/p&gt;
&lt;p&gt;一般不会自己直接运用SQL语句操作数据库，而是利用封装好的ORM库（MyBatis、Hibernate）来操作数据库。&lt;/p&gt;
- https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/ - </description>
        </item>
    
    
    
        <item>
        <title>Docker安装MySQL</title>
        <link>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</link>
        <pubDate>Fri, 02 Jul 2021 08:36:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/ -&lt;h1 id=&#34;1-win10安装docker&#34;&gt;1 win10安装Docker&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注册登录并下载安装&lt;code&gt;Docker Desktop&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用Hyper-V&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右键Windows按钮并选择“应用和功能”，选择相关设置中的“程序和功能”，选择“启用或关闭Windows功能”，选择Hyper-V，单机确定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210702084245852.png&#34; alt=&#34;image-20210702084245852&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用CPU的虚拟化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入&lt;code&gt;BIOS&lt;/code&gt;界面，找到&lt;code&gt;Virtualization Technology&lt;/code&gt;选项，将disabled改为&lt;code&gt;enabled&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新WSL2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果出现&lt;code&gt;WSL 2 installation is incomplete&lt;/code&gt;的报错，则需要更新WSL 2。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://aka.ms/wsl2kernel&#34;&gt;https://aka.ms/wsl2kernel&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据文档下载最新包，安装重启即可。&lt;/p&gt;
&lt;h1 id=&#34;2-docker安装mysql&#34;&gt;2 Docker安装MySQL&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --name mysql1 -e &lt;span style=&#34;color:#00688b&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;123456&lt;/span&gt; -p 3306:3306 -d mysql:8.0.25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;name&lt;/code&gt;是容器的名字；&lt;code&gt;-e&lt;/code&gt;是环境变量，配置的&lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;是mysql密码；&lt;code&gt;-p&lt;/code&gt;是端口映射，左侧是本机端口号，右侧是虚拟机端口号；&lt;code&gt;-d&lt;/code&gt;表示程序持续运行；最后指定mysql的版本号为&lt;code&gt;8.0.25&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;安装完成后，在docker desktop中可以发现mysql1的容器已开启，或者在命令行输入docker ps查看全部在运行的容器。&lt;/p&gt;
&lt;h1 id=&#34;3-docker常用命令&#34;&gt;3 Docker常用命令&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; 查看容器运行状态&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker start mysql1&lt;/code&gt; 启动mysql1容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker kill mysql1&lt;/code&gt; 关闭容器mysql1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker container run mysql1&lt;/code&gt; 开启刚刚关掉的容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker rm mysql1&lt;/code&gt; 删除容器，必要时可加-f选项&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run xxx&lt;/code&gt; 启动新容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + d&lt;/code&gt; 退出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：用docker运行的容器，默认不会持久化，如果容器数据被删掉了，那么数据也没了。类似网吧的电脑机制。&lt;/p&gt;
&lt;h1 id=&#34;4-连接mysql&#34;&gt;4 连接MySQL&lt;/h1&gt;
&lt;h2 id=&#34;1-进入容器&#34;&gt;1 进入容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;法1 DockerDesktop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单击容器右侧的&lt;code&gt;cli&lt;/code&gt;按钮，弹出命令行窗口，并自动连接到容器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;法2 命令行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it mysql1 bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-操作mysql&#34;&gt;2 操作MySQL&lt;/h2&gt;
&lt;p&gt;进入容器后，输入&lt;code&gt;mysql -u root -p&lt;/code&gt;输入密码，若出现欢迎界面，且命令行前缀变为&lt;code&gt;&amp;gt;mysql&lt;/code&gt;，表示连接成功。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL基本语句：（&lt;strong&gt;必须使用分号结尾&lt;/strong&gt;）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show databases;&lt;/code&gt; 查看全部数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use xxx;&lt;/code&gt; 选择要使用的数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show tables;&lt;/code&gt; 显示数据库中全部数据表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;describe xxx;&lt;/code&gt; 描述表中全部字段信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select * from xxx;&lt;/code&gt; 显示表中全部内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/ - </description>
        </item>
    
    
    
        <item>
        <title>杂七杂八</title>
        <link>https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</link>
        <pubDate>Wed, 30 Jun 2021 16:25:00 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/ -&lt;p&gt;const {a, b} = p// 在p中取出同名属性a和b，&lt;/p&gt;
&lt;p&gt;等同于&lt;/p&gt;
&lt;p&gt;const a = p.a&lt;/p&gt;
&lt;p&gt;const b = p.b&lt;/p&gt;
&lt;p&gt;等同于&lt;/p&gt;
&lt;p&gt;const {a:a,b:b} = p&lt;/p&gt;
- https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/ - </description>
        </item>
    
    
    
        <item>
        <title>NodeHTTP模块</title>
        <link>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Wed, 30 Jun 2021 09:55:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/ -&lt;h1 id=&#34;0-准备工作&#34;&gt;0 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;1-ts-node-dev&#34;&gt;1 ts-node-dev&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当文件更新时自动重启node&lt;/li&gt;
&lt;li&gt;避免每次改完代码都要重新运行的麻烦&lt;/li&gt;
&lt;li&gt;可以用TS开发Node.js程序，且会自动重启&lt;/li&gt;
&lt;li&gt;不宜在生产环境使用，但非常适合用来学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm -g i ts-node-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要用npm安装 ，用yarn安装的话使用时会报错。。无法识别“ts-node-dev”命令，不知道为什么。&lt;/p&gt;
&lt;h2 id=&#34;2-vscode配置&#34;&gt;2 VSCode配置&lt;/h2&gt;
&lt;p&gt;配置自动保存与保存后自动格式化：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl shift p&lt;/code&gt;打开&lt;code&gt;首选项：打开设置(ui)&lt;/code&gt;，&lt;code&gt;AutoSave&lt;/code&gt;修改为&lt;code&gt;onFocusChange&lt;/code&gt;，搜索format，勾选&lt;code&gt;Format On Save&lt;/code&gt;开启保存后自动格式化。&lt;/p&gt;
&lt;h2 id=&#34;3-curl&#34;&gt;3 curl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GET请求：&lt;code&gt;curl -v url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;POST请求：&lt;code&gt;curl -v -d “name=gsq&amp;quot; url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置请求头：&lt;code&gt;-H &#39;Content-Type:application/json&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置动词：&lt;code&gt;-X PUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JSON请求：&lt;code&gt;curl -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;bob&amp;quot;}&#39; -H &#39;Content-Type:application/json&#39; url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后面会用到&lt;code&gt;curl&lt;/code&gt;来构造请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-创建项目&#34;&gt;1 创建项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;初始化项目：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn init -y
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;@types/node&lt;/code&gt;声明文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn add --dev @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;新建&lt;code&gt;index.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入http模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 用http创建server
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#228b22&#34;&gt;// 监听server的request事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request, response) =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;有人请求了&amp;#39;&lt;/span&gt;)
	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 服务器返回data，并终止服务器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;span style=&#34;color:#228b22&#34;&gt;// 开始监听8888端口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;控制台&lt;code&gt;ts-node-dev index.ts&lt;/code&gt;启动服务器&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;curl -v http://localhost:8888 &lt;/code&gt;发送请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-request对象&#34;&gt;2 request对象&lt;/h1&gt;
&lt;p&gt;http.createServer()创建的server是http.Server和net.Server类的实例，可以创建后端环境（静态服务器）。&lt;/p&gt;
&lt;p&gt;首先控制台打出&lt;code&gt;request.contructor&lt;/code&gt;，发现request对象的构造函数是&lt;code&gt;IncomingMessage&lt;/code&gt;，因此利用ts语法，在传参中直接定义&lt;code&gt;request:IncomingMessage&lt;/code&gt;，告诉TypeScript request不是任意对象，而是IncomingMessage对象。&lt;/p&gt;
&lt;p&gt;获取请求信息（请求头、路径、请求消息体等）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 引入IncomingMessage模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response) =&amp;gt; {
    console.log(request.httpVersion)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取http版本号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    console.log(request.url)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    console.log(request.headers)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求头
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求消息体
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = []
    &lt;span style=&#34;color:#228b22&#34;&gt;// 监听data事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 用户每上传一个字节或一段内容就会触发data事件，由于每次上传报文的大小是固定的，所以在用户上传过程中会不停地触发data事件。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 因此需要监听每一次的data事件，把每一次上传的数据放到一个数组中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    request.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, (chunk) =&amp;gt; {
        arr.push(chunk)
    })
    &lt;span style=&#34;color:#228b22&#34;&gt;// 监听上传结束事件，end事件只有在数据被完全消费掉后再触发
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    request.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, () =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 将数据中的每一段chunk连接起来
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; body = Buffer.concat(arr).toString()
        console.log(body)
        &lt;span style=&#34;color:#228b22&#34;&gt;// 请求处理完成后响应
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;)
    })
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开启服务器后，利用&lt;code&gt;curl&lt;/code&gt;构造请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -V -d &amp;quot;name=gsq&amp;quot; http://localhost:8888/api/message
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;控制台将打印如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.1
/api/message
{
  host: &#39;localhost:8888&#39;,
  &#39;user-agent&#39;: &#39;curl/7.55.1&#39;,
  accept: &#39;*/*&#39;,
  &#39;content-length&#39;: &#39;8&#39;,
  &#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;
}
name=gsq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有headers、method、url等属性&lt;/li&gt;
&lt;li&gt;从stream.Readable类继承了data、end、error事件&lt;/li&gt;
&lt;li&gt;不能直接拿到请求的消息体：原因与TCP有关&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-response对象&#34;&gt;3 response对象&lt;/h1&gt;
&lt;p&gt;同样的方式发现response对象是ServerResponse的实例对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有getHeader、setHeader、end、write等方法，可以控制响应的每一部分&lt;/li&gt;
&lt;li&gt;拥有statusCode属性，默认为200，可读可写&lt;/li&gt;
&lt;li&gt;继承了Stream，也属于Stream类的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gsq&amp;#39;&lt;/span&gt;)
response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;
response.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
response.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
response.end()
&lt;span style=&#34;color:#228b22&#34;&gt;// 响应的消息体
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&amp;lt; HTTP/&lt;span style=&#34;color:#b452cd&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt; Not Found
&amp;lt; NAME: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;gsq&lt;/span&gt;
&amp;lt; &lt;span style=&#34;color:#658b00&#34;&gt;Date&lt;/span&gt;: Wed, &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; Jun &lt;span style=&#34;color:#b452cd&#34;&gt;2021&lt;/span&gt; 05:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;56&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;08&lt;/span&gt; GMT
&amp;lt; Connection: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;keep&lt;/span&gt;-alive
&amp;lt; Keep-Alive: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;timeout&lt;/span&gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;
&amp;lt; Transfer-Encoding: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;chunked&lt;/span&gt;
&amp;lt;
&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4-根据url返回不同的文件&#34;&gt;4 根据url返回不同的文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;思路：通过request获取到用户请求的url，利用switch进行判断，根据请求不同，应用fs.readFile读取页面数据并返回给请求端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; fs &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; p &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage, ServerResponse } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#228b22&#34;&gt;// 获取当前目录下的public路径，利用resolve方法进行拼接并解析为绝对路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; publicDir = p.relative(__dirname, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;)

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ServerResponse&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 获取到请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url } = request
    &lt;span style=&#34;color:#228b22&#34;&gt;// 判断请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (url) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 读取index.html文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/main.js&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 在响应的头部声明文件类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;text/javascript; charset=utf-8&amp;#39;&lt;/span&gt;)
            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;main.js&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.css&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 在响应的头部声明文件类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;text/css; charset=utf-8&amp;#39;&lt;/span&gt;)
            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.css&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    }
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中访问&lt;code&gt;http://localhost:8888/index.html&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-处理查询参数&#34;&gt;5 处理查询参数&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;当请求的路径带有参数时（&amp;hellip;/index.html?q=1），会影响到switch对路径的判断，从而找不到对应访问的文件，因此需要&lt;code&gt;url模块&lt;/code&gt;来处理查询的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引入url模块时，模块名与request中取到的url同名，所以需要修改url为path：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;path&lt;/span&gt; } = request
&lt;span style=&#34;color:#228b22&#34;&gt;// 在request中取到url字段，重命名为path变量
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;url.parse(path)&lt;/code&gt;返回一个&lt;code&gt;URL对象&lt;/code&gt;，包含如下字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;Url {
  protocol: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, slashes: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, auth: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, host: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
  port: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  hostname: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  hash: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  search: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;?q=2&amp;#39;&lt;/span&gt;,
  query: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;q=2&amp;#39;&lt;/span&gt;, pathname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;, path: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html?q=2&amp;#39;&lt;/span&gt;,
  href: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html?q=2&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;switch只需读取URL对象中的&lt;code&gt;pathname&lt;/code&gt;字段来进行判断即可。&lt;/p&gt;
&lt;p&gt;**注：**但是目前node版本中，url.parse已被&lt;code&gt;弃用&lt;/code&gt;，所以我们直接实例化一个URL对象。URL对象接受两个参数，分别为&lt;code&gt;请求路径&lt;/code&gt;与&lt;code&gt;根路径&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; url = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { pathname } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新的URL对象包含如下字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;URL {
  href: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888/index.html?q=1&amp;#39;&lt;/span&gt;,
  origin: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;,
  protocol: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http:&amp;#39;&lt;/span&gt;,
  username: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  password: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  host: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost:8888&amp;#39;&lt;/span&gt;,
  hostname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
  port: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;8888&amp;#39;&lt;/span&gt;,
  pathname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;,
  search: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;?q=1&amp;#39;&lt;/span&gt;,
  searchParams: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;URLSearchParams&lt;/span&gt; { &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; },
  hash: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样拥有&lt;code&gt;pathname&lt;/code&gt;字段，之后的switch判断与之前保持一致即可。&lt;/p&gt;
&lt;h1 id=&#34;6-匹配任意文件&#34;&gt;6 匹配任意文件&lt;/h1&gt;
&lt;p&gt;目前为止我们只能访问三个路径，其他路径均视为404，如果每多一个页面就多写一个case来判断并响应的话，工作量非常大且代码冗余，重复代码很多，因此需要抽取出关键代码，使其能够自动匹配任意访问的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思路：还是从路径入手，URL对象中的pathname字段的字符串，经过一些字符处理，便可以作为fs读取文件的路径名。例如访问路径为&lt;code&gt;/aa/index.html&lt;/code&gt;，则读取路径中需要的字段是&lt;code&gt;aa/index.html&lt;/code&gt;，只需将前面的&lt;code&gt;&#39;/&#39;&lt;/code&gt;去掉即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改后代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; fs &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; p &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage, ServerResponse } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; publicDir = p.relative(__dirname, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;)

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ServerResponse&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;path&lt;/span&gt; } = request
    &lt;span style=&#34;color:#228b22&#34;&gt;// 在URL对象中获取pathname字段
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { pathname } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#228b22&#34;&gt;// 基于访问路径处理文件名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fileName = pathname.substring(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    fs.readFile(p.resolve(publicDir, fileName), (error, data) =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果读不到文件，则返回404
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) {
            response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;
            response.end()
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果成功读取到文件，则返回读取到的数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        response.end(data.toString())
    })
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;7-处理不存在的文件&#34;&gt;7 处理不存在的文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;对访问文件时出现的错误类型进行判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-文件不存在的情况&#34;&gt;1 文件不存在的情况&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error.errno === -&lt;span style=&#34;color:#b452cd&#34;&gt;4058&lt;/span&gt;) {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//找不到文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;404.html&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
        response.end(data)
        &lt;span style=&#34;color:#228b22&#34;&gt;// data无需toString()，浏览器自动解析data
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	})
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-当访问路径为根路径httplocalhost8888时默认访问indexhtml&#34;&gt;2 当访问路径为根路径&lt;code&gt;http://localhost:8888&lt;/code&gt;时，默认访问index.html&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; fileName = pathname.substring(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (fileName === &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) {
    fileName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3当访问路径不是文件而是目录时&#34;&gt;3.当访问路径不是文件而是目录时&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error.errno === -&lt;span style=&#34;color:#b452cd&#34;&gt;4068&lt;/span&gt;) {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;403&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//没有权限访问
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;无权查看目录内容&amp;#39;&lt;/span&gt;)
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4其他错误一律归为服务器内部错误&#34;&gt;4.其他错误一律归为服务器内部错误&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//服务器内部错误
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务器繁忙，请稍后再试&amp;#39;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;8-处理非get请求&#34;&gt;8 处理非GET请求&lt;/h1&gt;
&lt;p&gt;静态服务器不会接受非get请求，对Method进行过滤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { method } = request
if (method !== &#39;GET&#39;) {
	response.statusCode = 405// Method Not Allowed
	response.end();
	return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;9-添加缓存选项&#34;&gt;9 添加缓存选项&lt;/h1&gt;
&lt;p&gt;再次刷新页面时，css、js和图片等静态数据会缓存至内存中，提升网页访问性能。&lt;/p&gt;
&lt;p&gt;成功返回数据前，在响应头添加缓存字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public max-age=3600&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;10-发布未完成&#34;&gt;10 发布(未完成)&lt;/h1&gt;
&lt;p&gt;将ts变成js，需全局安装TypeScript，使用&lt;code&gt;tsc&lt;/code&gt;命令进行转换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tsc index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把js作为package.json中的&lt;code&gt;main&lt;/code&gt;字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;index.js&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发布&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn login/npm adduser
yarn publish/npm publish
&lt;/code&gt;&lt;/pre&gt;- https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
    
        <item>
        <title>调试Nodejs</title>
        <link>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</link>
        <pubDate>Wed, 30 Jun 2021 09:40:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/ -&lt;h1 id=&#34;1-vscode调试nodejs&#34;&gt;1 VSCode调试Node.js&lt;/h1&gt;
&lt;p&gt;在&lt;code&gt;launch.json&lt;/code&gt;中添加配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;使用&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;IntelliSense&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;了解相关属性。&lt;/span&gt; 
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;悬停以查看现有属性的描述。&lt;/span&gt;
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;欲了解更多信息，请访问:&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;https://go.microsoft.com/fwlink/?linkid=830387&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pwa-node&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;会用node来启动&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cli add task&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;skipFiles&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;node_internals&amp;gt;/**&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${workspaceFolder}\\cli.js&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;入口文件&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;task&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;参数&lt;/span&gt;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;点击启动即可在调试控制台查看运行情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./node1.png&#34; alt=&#34;node1&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-命令行结合chrome调试nodejs&#34;&gt;2 命令行结合Chrome调试Node.js&lt;/h1&gt;
&lt;p&gt;命令行中输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;node --inspect-brk cli add task2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开浏览器，F12检查页面，几秒钟后上方会出现node图标，点进去即可对node程序进行调试了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./node2.png&#34; alt=&#34;node2&#34;&gt;&lt;/p&gt;
- https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/ - </description>
        </item>
    
    
    
        <item>
        <title>单元测试之文件模块</title>
        <link>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Tue, 29 Jun 2021 08:43:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/ -&lt;p&gt;安装&lt;code&gt;jest&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add -dev jest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在&lt;code&gt;package.json&lt;/code&gt;中添加&lt;code&gt;test&lt;/code&gt;命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt;{
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;jest&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新建&lt;code&gt;__tests__&lt;/code&gt;文件夹，单元测试文件一般命名为&lt;code&gt;xx.unit.js&lt;/code&gt;或者&lt;code&gt;xx.spec.js&lt;/code&gt;，下面是测试示例，测试db中的read和write是否为方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; db = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;../db.js&amp;#39;&lt;/span&gt;)
describe(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;, () =&amp;gt; {
	it(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;read is a function&amp;#39;&lt;/span&gt;, () =&amp;gt; {
		expect(db.read &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Function&lt;/span&gt;).toBe(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;)
	})
	it(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;write is a function&amp;#39;&lt;/span&gt;, () =&amp;gt; {
		expect(db.write &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Function&lt;/span&gt;).toBe(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;)
	})
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般单元测试为白盒测试，知道代码是怎么编写的&lt;/p&gt;
&lt;p&gt;单元测试不应该与外界打交道，不能操作硬盘、网络等&lt;/p&gt;
&lt;p&gt;单元测试的对象是函数&lt;/p&gt;
&lt;p&gt;功能测试的对象是模块&lt;/p&gt;
&lt;p&gt;集成测试的对象是系统&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;__test__&lt;/code&gt;同级目录下创建&lt;code&gt;__mocks__&lt;/code&gt;，新建&lt;code&gt;fs.js&lt;/code&gt;，在test文件开头就要写&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jest.mock(&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;未完待续&#34;&gt;未完待续。。。&lt;/h1&gt;
- https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
    
        <item>
        <title>Array常用方法整理</title>
        <link>https://gsemir0418.github.io/posts/array/</link>
        <pubDate>Mon, 28 Jun 2021 09:30:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/array/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/array/ -&lt;h4 id=&#34;arrayprototypemap&#34;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词遍历&#34;&gt;1.关键词：遍历&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组false&#34;&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3返回值&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;newArray[]&lt;/code&gt;，回调函数的结果组成了新数组的每一个元素。&lt;/p&gt;
&lt;h5 id=&#34;4语法&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; new_array = arr.map((currentValue, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;currentValue&lt;/code&gt;：callback数组中正在处理的当前元素；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;：可选，callback数组中正在处理的当前元素的索引；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;：可选，map方法调用的数组，几乎不用&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5描述&#34;&gt;5.描述&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; 方法会给原数组中的每个元素都按顺序调用一次  &lt;code&gt;callback&lt;/code&gt; 函数。&lt;code&gt;callback&lt;/code&gt; 每次执行后的返回值（包括&lt;code&gt;undefined&lt;/code&gt;）组合起来形成一个新数组。 &lt;code&gt;callback&lt;/code&gt; 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 &lt;code&gt;delete&lt;/code&gt; 删除的索引则不会被调用。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;map&lt;/code&gt;生成一个新数组，当你不打算使用返回的新数组却使用&lt;code&gt;map&lt;/code&gt;是违背设计初衷的，请用&lt;code&gt;forEach&lt;/code&gt;或者&lt;code&gt;for-of&lt;/code&gt;替代。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; 函数会被自动传入三个参数：数组元素，元素索引，原数组本身。&lt;/p&gt;
&lt;h5 id=&#34;6示例&#34;&gt;6.示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 求数组中每个元素的平方根
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; newArr = arr.map(&lt;span style=&#34;color:#658b00&#34;&gt;Math&lt;/span&gt;.sqrt)&lt;span style=&#34;color:#228b22&#34;&gt;// [2, 3, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 使用map重新格式化数组中的对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [
    { key:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; },
    { key:&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt; }
]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; newArr = arr.map((item) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rObj={}
    rObj[item.key] = item.value
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; rObj
})&lt;span style=&#34;color:#228b22&#34;&gt;// [{ 1:10 },{ 2:20 }]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;arrayprototypepop&#34;&gt;&lt;code&gt;Array.prototype.pop()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词删除&#34;&gt;1.关键词：删除&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组true&#34;&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3返回值-1&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;从数组中删除的元素(当数组为空时返回&lt;code&gt;undefined&lt;/code&gt;)&lt;/p&gt;
&lt;h5 id=&#34;4语法-1&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.pop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;5描述-1&#34;&gt;5.描述：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;pop&lt;/code&gt; 方法从一个数组中删除并返回最后一个元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pop&lt;/code&gt; 方法有意具有通用性。该方法和&lt;code&gt;call()&lt;/code&gt;或&lt;code&gt;apply()&lt;/code&gt; 一起使用时，可应用在类似数组的对象上。&lt;code&gt;pop&lt;/code&gt;方法根据 &lt;code&gt;length&lt;/code&gt;属性来确定最后一个元素的位置。如果不包含&lt;code&gt;length&lt;/code&gt;属性或&lt;code&gt;length&lt;/code&gt;属性不能被转成一个数值，会将&lt;code&gt;length&lt;/code&gt;置为0，并返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你在一个空数组上调用 pop()，它返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;6示例-1&#34;&gt;6.示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; poped = arr.pop()
&lt;span style=&#34;color:#228b22&#34;&gt;// arr = [1, 2]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// poped = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;arrayprototypefill&#34;&gt;&lt;code&gt;Array.prototype.fill()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词修改填充&#34;&gt;1.关键词：修改、填充&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组true-1&#34;&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3返回值-2&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;修改后的数组&lt;/p&gt;
&lt;h5 id=&#34;4语法-2&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.fill(value, start, end)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;：用来填充数组元素的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; ：可选，起始索引，默认值为0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt; ：可选，终止索引，默认值为 &lt;code&gt;this.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5描述-2&#34;&gt;5.描述：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;fill&lt;/code&gt; 方法接受三个参数 &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; 以及 &lt;code&gt;end&lt;/code&gt;。 &lt;code&gt;start&lt;/code&gt; 和&lt;code&gt;end&lt;/code&gt; 参数是可选的, 其默认值分别为 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;this&lt;/code&gt; 对象的 &lt;code&gt;length &lt;/code&gt;属性值。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;start&lt;/code&gt; 是个负数, 则开始索引会被自动计算成为 &lt;code&gt;length+start&lt;/code&gt;, 其中 &lt;code&gt;length&lt;/code&gt; 是 &lt;code&gt;this&lt;/code&gt; 对象的 &lt;code&gt;length &lt;/code&gt;属性值。如果 &lt;code&gt;end&lt;/code&gt; 是个负数, 则结束索引会被自动计算成为 &lt;code&gt;length+end&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当一个对象被传递给 &lt;code&gt;fill&lt;/code&gt;方法的时候, 填充数组的是这个对象的引用。&lt;/p&gt;
&lt;h5 id=&#34;6示例-2&#34;&gt;6.示例：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);               &lt;span style=&#34;color:#228b22&#34;&gt;// [4, 4, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);            &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 4, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 4, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;);       &lt;span style=&#34;color:#228b22&#34;&gt;// [4, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;);     &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Array&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;).fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);                &lt;span style=&#34;color:#228b22&#34;&gt;// [4, 4, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[].fill.call({ length: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; }, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// {0: 4, 1: 4, 2: 4, length: 3}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// Objects by reference.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; arr = &lt;span style=&#34;color:#658b00&#34;&gt;Array&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;).fill({}) &lt;span style=&#34;color:#228b22&#34;&gt;// [{}, {}, {}];
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;].hi = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// [{ hi: &amp;#34;hi&amp;#34; }, { hi: &amp;#34;hi&amp;#34; }, { hi: &amp;#34;hi&amp;#34; }]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;arrayprototypefind&#34;&gt;&lt;code&gt;Array.prototype.find()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词查找&#34;&gt;1.关键词：查找&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组false-1&#34;&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3返回值-3&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;数组中第一个满足所提供测试函数的元素的值，否则返回&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;4语法-3&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.find((element, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;：当前遍历到的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;：可选，当前遍历到的索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;：可选，数组本身，基本用不到&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5描述-3&#34;&gt;5.描述：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt;方法对数组中的每一项元素执行一次 &lt;code&gt;callback&lt;/code&gt; 函数，直至有一个 callback 返回 &lt;code&gt;true&lt;/code&gt;。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回&lt;code&gt;undefined&lt;/code&gt;。注意 &lt;code&gt;callback &lt;/code&gt;函数会为数组中的每个索引调用即从 &lt;code&gt;0 &lt;/code&gt;到 &lt;code&gt;length - 1&lt;/code&gt;，而不仅仅是那些被赋值的索引，这意味着对于稀疏数组来说，该方法的效率要低于那些只遍历有值的索引的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt;方法不会改变数组。&lt;/p&gt;
&lt;h5 id=&#34;6示例-3&#34;&gt;6.示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; inventory = [
    {name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;, quantity: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;},
    {name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt;, quantity: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;},
    {name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cherries&amp;#39;&lt;/span&gt;, quantity: &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;}
]

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; result = inventory.find(fruit =&amp;gt; {
    fruit.name === &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cherries&amp;#39;&lt;/span&gt;
})

console.log(result); 
&lt;span style=&#34;color:#228b22&#34;&gt;// { name: &amp;#39;cherries&amp;#39;, quantity: 5 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;arrayprototypejoin&#34;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词连接&#34;&gt;1.关键词：连接&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组false-2&#34;&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3返回值-4&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;一个所有数组元素连接的字符串。如果 &lt;code&gt;arr.length&lt;/code&gt; 为0，则返回空字符串&lt;/p&gt;
&lt;h5 id=&#34;4语法-4&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.join(分隔符)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;5描述-4&#34;&gt;5.描述：&lt;/h5&gt;
&lt;p&gt;所有的数组元素被转换成字符串，再用一个分隔符将这些字符串连接起来。&lt;/p&gt;
&lt;p&gt;如果一个元素为 &lt;code&gt;undefined&lt;/code&gt; 或 &lt;code&gt;null&lt;/code&gt;，它会被转换为空字符串。&lt;/p&gt;
&lt;h5 id=&#34;6示例-4&#34;&gt;6.示例：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; a = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Wind&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Rain&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Fire&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar1 = a.join();      
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Wind,Rain,Fire&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar2 = a.join(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Wind, Rain, Fire&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar3 = a.join(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; + &amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Wind + Rain + Fire&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar4 = a.join(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);    
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;WindRainFire&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;arrayprototypepush&#34;&gt;&lt;code&gt;Array.prototype.push()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词添加&#34;&gt;1.关键词：添加&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组true-2&#34;&gt;2.是否修改原数组：true&lt;/h5&gt;
&lt;h5 id=&#34;3返回值-5&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;当调用该方法时，新的&lt;code&gt;length&lt;/code&gt;属性值将被返回。&lt;/p&gt;
&lt;h5 id=&#34;4语法-5&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.push(element1, ..., elementN)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;5描述-5&#34;&gt;5.描述：&lt;/h5&gt;
&lt;p&gt;push方法将值追加到数组中。&lt;/p&gt;
&lt;p&gt;唯一的原生类数组（array-like）对象是&lt;code&gt;Strings&lt;/code&gt;，尽管如此，它们并不适用该方法，因为字符串是不可改变的。&lt;/p&gt;
&lt;h5 id=&#34;6示例-5&#34;&gt;6.示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 添加元素到数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; sports = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;soccer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;baseball&amp;#34;&lt;/span&gt;];
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;soccer&amp;#34;, &amp;#34;baseball&amp;#34;, &amp;#34;football&amp;#34;, &amp;#34;swimming&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; total = sports.push(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;football&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;swimming&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// 4 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 合并两个数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; vegetables = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;parsnip&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;potato&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; moreVegs = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;celery&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;beetroot&amp;#39;&lt;/span&gt;];

&lt;span style=&#34;color:#228b22&#34;&gt;// 将第二个数组融合进第一个数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 相当于 vegetables.push(&amp;#39;celery&amp;#39;, &amp;#39;beetroot&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Array&lt;/span&gt;.prototype.push.apply(vegetables, moreVegs);

console.log(vegetables); 
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;parsnip&amp;#39;, &amp;#39;potato&amp;#39;, &amp;#39;celery&amp;#39;, &amp;#39;beetroot&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;arrayprototypesome&#34;&gt;&lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词查找-1&#34;&gt;1.关键词：查找&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组false-3&#34;&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3返回值-6&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;数组中有至少一个元素通过回调函数的测试就会返回**&lt;code&gt;true&lt;/code&gt;**；所有元素都没有通过回调函数的测试返回值才会为&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;4语法-6&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.some((element, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;:数组中正在处理的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt; :可选，数组中正在处理的元素的索引值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;：可选，几乎不用&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5描述-6&#34;&gt;5.描述：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;some()&lt;/code&gt; 为数组中的每一个元素执行一次 &lt;code&gt;callback&lt;/code&gt; 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，&lt;code&gt;some()&lt;/code&gt; 将会立即返回 &lt;code&gt;true&lt;/code&gt;。否则，&lt;code&gt;some()&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt;。&lt;code&gt;callback&lt;/code&gt; 只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; 被调用时传入三个参数：元素的值，元素的索引，被遍历的数组。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;some()&lt;/code&gt; 被调用时不会改变数组。&lt;/p&gt;
&lt;h5 id=&#34;6示例-6&#34;&gt;6.示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 使用箭头函数测试数组元素的值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;].some(x =&amp;gt; x &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;);  &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;].some(x =&amp;gt; x &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 判断数组元素中是否存在某个值，可以用include()代替
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; fruits = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mango&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;guava&amp;#39;&lt;/span&gt;];

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; checkAvailability(arr, val) {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; arr.some(arrVal =&amp;gt; val === arrVal);
}

checkAvailability(fruits, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;kela&amp;#39;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;checkAvailability(fruits, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;arrayprototypesort&#34;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1关键词排序&#34;&gt;1.关键词：排序&lt;/h5&gt;
&lt;h5 id=&#34;2是否修改原数组true-3&#34;&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3返回值-7&#34;&gt;3.返回值：&lt;/h5&gt;
&lt;p&gt;排序后的数组。请注意，数组已原地排序，并且不进行复制。&lt;/p&gt;
&lt;h5 id=&#34;4语法-7&#34;&gt;4.语法：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.sort([compareFunction])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;compareFunction&lt;/code&gt; 可选&lt;/p&gt;
&lt;p&gt;用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;firstEl&lt;/code&gt;第一个用于比较的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;	secondEl&lt;/code&gt;第二个用于比较的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5描述-7&#34;&gt;5.描述：&lt;/h5&gt;
&lt;p&gt;如果没有指明 &lt;code&gt;compareFunction&lt;/code&gt; ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。例如 &amp;ldquo;Banana&amp;rdquo; 会被排列到 &amp;ldquo;cherry&amp;rdquo; 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 &lt;code&gt;compareFunction&lt;/code&gt;），比较的数字会先被转换为字符串，所以在Unicode顺序上 &amp;ldquo;80&amp;rdquo; 要比 &amp;ldquo;9&amp;rdquo; 要靠前。&lt;/p&gt;
&lt;p&gt;如果指明了 &lt;code&gt;compareFunction&lt;/code&gt; ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 小于 0 ，那么 a 会被排列到 b 之前；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 大于 0 ， b 会被排列到 a 之前。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;compareFunction(a, b)&lt;/code&gt; 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;6示例-7&#34;&gt;6.示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对象按某个属性排序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;未完待续&#34;&gt;未完待续。。。。&lt;/h1&gt;
- https://gsemir0418.github.io/posts/array/ - </description>
        </item>
    
    
    
        <item>
        <title>React入门</title>
        <link>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</link>
        <pubDate>Fri, 25 Jun 2021 23:11:51 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/ -&lt;h1 id=&#34;1react是什么&#34;&gt;1.React是什么&lt;/h1&gt;
&lt;p&gt;用于构建&lt;strong&gt;用户界面&lt;/strong&gt;的JS库（操作DOM呈现页面）&lt;/p&gt;
&lt;p&gt;是一个将数据渲染为HTML视图的开源的JavaScript库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：https://react.docschina.org/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;2谁开发的&#34;&gt;2.谁开发的&lt;/h1&gt;
&lt;p&gt;Facebook&lt;/p&gt;
&lt;h1 id=&#34;3为什么要学&#34;&gt;3.为什么要学&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原生JS操作DOM&lt;strong&gt;繁琐、效率低&lt;/strong&gt;（&lt;strong&gt;DOM-API操作UI&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用js直接操作DOM，浏览器会进行大量的&lt;strong&gt;重绘重排&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原生js没有&lt;strong&gt;组件化&lt;/strong&gt;的编码方案，代码复用率低&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模块化&lt;/strong&gt;是针对js的，可以把js拆分成独立的功能模块，方便复用。但是html结构和css样式，包括字体图片音频视频等，复用率低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4react的特点&#34;&gt;4.React的特点&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用&lt;strong&gt;组件化模式&lt;/strong&gt;、&lt;strong&gt;声明式编码&lt;/strong&gt;，提高开发效率及组件复用率&lt;/p&gt;
&lt;p&gt;之前使用的是&lt;strong&gt;命令式编码&lt;/strong&gt;，面向过程。比如我想喝一杯水，需要命令别人先站起来，再走到水杯旁，把我帮我拿过来等等的步骤；但是声明式编码只需我说嗓子干了，自动就会帮我把水拿过来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;React Native&lt;/strong&gt;中可以使用React语法进行&lt;strong&gt;移动端&lt;/strong&gt;开发。&lt;/p&gt;
&lt;p&gt;React Native可以使得前端开发人员使用最熟悉的js来编写安卓和ios应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;strong&gt;虚拟DOM&lt;/strong&gt;+优秀的&lt;strong&gt;Diffing算法&lt;/strong&gt;，尽量减少与真实DOM的交互&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;​	虚拟DOM发生改变后会对比之前的虚拟DOM，从而减少真实DOM的更新渲染过程&lt;/p&gt;
&lt;h1 id=&#34;5-react基本使用&#34;&gt;5. React基本使用&lt;/h1&gt;
&lt;h2 id=&#34;51-js库引入注意引入顺序&#34;&gt;5.1 js库引入（注意引入顺序）&lt;/h2&gt;
&lt;p&gt;1.react.development.js：react核心库&lt;/p&gt;
&lt;p&gt;2.react-dom.development.js：提供操作DOM的react扩展库&lt;/p&gt;
&lt;p&gt;3.babel.min.js：解析JSX语法代码转为js代码的库&lt;/p&gt;
&lt;h2 id=&#34;52-虚拟dom的创建&#34;&gt;5.2 虚拟DOM的创建&lt;/h2&gt;
&lt;h3 id=&#34;521-关于虚拟dom&#34;&gt;5.2.1 关于虚拟DOM&lt;/h3&gt;
&lt;p&gt;（1）本质上是object类型的&lt;strong&gt;一般对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（2）虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是react内部在用，无需真实DOM上那么多属性&lt;/p&gt;
&lt;p&gt;（3）虚拟DOM最终会被React转化为真实DOM，呈现在页面上&lt;/p&gt;
&lt;h3 id=&#34;522-创建的两种方式&#34;&gt;5.2.2 创建的两种方式&lt;/h3&gt;
&lt;p&gt;（1）纯js方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = React.createElement(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;标签名&amp;#39;&lt;/span&gt;,{标签属性},&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;标签内容&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = React.createElement(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;,{id:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;},&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;React.createElement(&amp;#39;&lt;/span&gt;span&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;,{},&amp;#39;&lt;/span&gt;HELLO REACT!&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​		可以看到，若遇标签嵌套情况，利用纯js来写非常复杂。&lt;/p&gt;
&lt;p&gt;（2）JSX方式&lt;/p&gt;
&lt;p&gt;​		是react 定义的一种类似于 XML 的 JS 扩展语法: JS + XML。本质是React.createElement(&amp;lsquo;标签名&amp;rsquo;,{标签属性},&amp;lsquo;标签内容&amp;rsquo;)方法的语法糖，极大地简化了创建虚拟DOM过程。&lt;strong&gt;在利用JSX创建之前，需要将&lt;!-- raw HTML omitted --&gt;标签的type属性由默认的text/javascript改为text/babel&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1）JSX创建虚拟DOM的写法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&amp;gt;
    	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;span&lt;/span&gt;&amp;gt;hello,react&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;span&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）&lt;strong&gt;JSX语法&lt;/strong&gt;如下：&lt;/p&gt;
&lt;p&gt;1.遇到 &amp;lt;开头的代码，以标签的语法解析：html 同名标签转换为 html 同名元素，其它标签需要特别解析：若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。&lt;/p&gt;
&lt;p&gt;2.遇到以 { 开头的代码，以 JS 语法解析: &lt;strong&gt;标签中的 js 表达式必须用{ }包含&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;只有一个根标签&lt;/strong&gt;，若想在虚拟DOM中再新增标签，外面需要统一包一个标签&lt;/p&gt;
&lt;p&gt;4.标签必须&lt;strong&gt;闭合&lt;/strong&gt;（自闭合也行）&lt;/p&gt;
&lt;p&gt;5.标签内样式的类名指定不要用class，要用&lt;strong&gt;className&lt;/strong&gt;，例如&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;6.标签中内联样式要用**style={{key:value}}**的形式去写，多个单词的要用小驼峰,例如style={{fontSize:&amp;lsquo;29px&amp;rsquo;}}&lt;/p&gt;
&lt;h2 id=&#34;53-渲染虚拟dom&#34;&gt;5.3 渲染虚拟DOM&lt;/h2&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;ReactDOM.render(VirtualDOM,containerDOM)
ReactDOM.render(VDOM,&lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;54-模块与组件的理解&#34;&gt;5.4 模块与组件的理解&lt;/h2&gt;
&lt;p&gt;模块指的是向外提供特定功能的js程序，一般就是一个js文件，模块化是为了更好地复用js，简化js的编写，提高js运行效率。模块化只针对js；而组件指的是用来实现局部功能效果的代码和资源的集合（html、css、js、image、video等），组件化是为了复用编码，简化项目编码，提高运行效率&lt;/p&gt;
&lt;p&gt;1.5 jsx练习&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;.%5Cimage-20210321123104572.png&#34; alt=&#34;image-20210321123104572&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;../js/react.development.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;../js/react-dom.development.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;../js/babel.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/babel&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        一定注意区分【js语句（代码）】与【js表达式】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;            1.表达式：一个表达式会产生一个值，可以放任何一个需要值的地方
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                下面这些都是表达式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                a
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                a+b
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                demo(1)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                arr.map()//用来处理数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                function test(){}//定义方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;            2.语句（代码）：控制代码走向，没有值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                if(){}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                for(){}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                switch(){case}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    */&lt;/span&gt;
        &lt;span style=&#34;color:#228b22&#34;&gt;//模拟一些数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; data = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Angular&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Vue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;React&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; data2 = [&amp;lt;li&amp;gt;Angular&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/li&amp;gt;, &amp;lt;li&amp;gt;Vue&amp;lt;/li&amp;gt;, &amp;lt;li&amp;gt;React&amp;lt;/li&amp;gt;]//React可以自动遍历数组&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = {name1:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Angular&amp;#39;&lt;/span&gt;,name2:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Vue&amp;#39;&lt;/span&gt;,name3:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;React&amp;#39;&lt;/span&gt;}&lt;span style=&#34;color:#228b22&#34;&gt;//对象不能作为React的节点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//jsx创建虚拟DOM
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;前端js框架列表&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/h1&amp;gt;&lt;/span&gt;
                &amp;lt;ul&amp;gt;
                    {
                        data.map((a,index)=&amp;gt;{
                            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;li key={index}&amp;gt;{a}&amp;lt;&lt;span style=&#34;color:#1c7e71&#34;&gt;/li&amp;gt;/&lt;/span&gt;/虚拟dom必须有唯一标识key
                        })
                    }
                &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/ul&amp;gt;&lt;/span&gt;
            &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
        )
        ReactDOM.render(VDOM, &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;补充&#34;&gt;补充：&lt;/h2&gt;
&lt;p&gt;1）早期传输数据的两种格式&lt;/p&gt;
&lt;p&gt;​		最早使用XML来存储与传输数据的，XML即扩展标记语言 (Extensible Markup Language, XML) ，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。典型写法如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;student&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Tom&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/student&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​		后面改为利用JSON格式。JSON(JavaScript Object Notation)一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。主要是得益于JSON的两个重要方法：JSON.parse()和JSON.stringfy()，分别用来快速将JSON中的数据解析为数组和对象，以及快速把JS中的数组和对象转化为JSON字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#39;name&amp;#39;:&amp;#39;gsq&amp;#39;,&amp;#39;age&amp;#39;:26&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）XML和JSON的优缺点对比&lt;/p&gt;
&lt;p&gt;(1)可读性两者基本相同，一边是建议的语法，一边是规范的标签形式，XML可读性较好些；
(2)可扩展性方面差不多；
(3)编码难度方面，不借助工具的话，XML较为复杂；
(4)解码难度方面，XML的解析得考虑子节点父节点，让人头昏眼花，而JSON的解析难度几乎为0。
(5)流行度方面，XML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。到时Ajax应该变成Ajaj(Asynchronous Javascript and JSON)了；
(7)数据体积方面，JSON相对于XML来讲，数据的体积小，传递的速度更快些；
(8)数据交互方面，JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互； 
(9)数据描述方面，JSON对数据的描述性比XML较差；
(10)传输速度方面， JSON的速度要远远快于XML。&lt;/p&gt;
- https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/ - </description>
        </item>
    
    
    
        <item>
        <title>初识Hooks</title>
        <link>https://gsemir0418.github.io/posts/reacthooks/</link>
        <pubDate>Fri, 25 Jun 2021 23:07:51 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/reacthooks/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/reacthooks/ -&lt;h1 id=&#34;1-hook简介&#34;&gt;1 Hook简介&lt;/h1&gt;
&lt;h2 id=&#34;11-基本概念&#34;&gt;1.1 基本概念&lt;/h2&gt;
&lt;p&gt;Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使⽤ state 以及其他的 React 特性。&lt;/p&gt;
&lt;h2 id=&#34;12-react-hooks优势&#34;&gt;1.2 React Hooks优势&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数组件不能使⽤state，⼀般只⽤于⼀些简单⽆交互的组件，⽤作信息展示，即我们上⾯说的傻⽠组件使⽤，如果需要交互更改状态等复杂逻辑时就需要使⽤class组件了&lt;/p&gt;
&lt;p&gt;React Hooks让我们更好的拥抱函数式编程，让函数式组件也能使⽤state功能，因为函数式组件⽐class组件更简洁好⽤，因为React Hooks的出现，相信未来我们会更多的使⽤函数式组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;副作⽤问题&lt;/p&gt;
&lt;p&gt;我们⼀般称数据获取、订阅、定时执⾏任务、⼿动修改ReactDOM这些⾏为都可以称为副作⽤由于React Hooks的出现，我们可以使⽤useEffect来处理组件副作⽤问题，所以我们的函数式组件也能进⾏副作⽤逻辑的处理了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有状态的逻辑重⽤组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂的状态管理&lt;/p&gt;
&lt;p&gt;之前我们使⽤redux、dva、mobx第三⽅状态管理器来进⾏复杂的状态管理&lt;/p&gt;
&lt;p&gt;现在我们可以使⽤useReducer、useContext配合使⽤实现复杂状态管理，不⽤再依赖第三⽅状态管理器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发效率和质量问题&lt;/p&gt;
&lt;p&gt;函数式组件⽐class组件简洁，开发的体验更好，效率更⾼同时应⽤的性能也更好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2-usestate&#34;&gt;2 useState&lt;/h1&gt;
&lt;h2 id=&#34;21-定义&#34;&gt;2.1 定义&lt;/h2&gt;
&lt;p&gt;useState：组件状态管理钩⼦，使函数组件能够使⽤state&lt;/p&gt;
&lt;h2 id=&#34;22-基本使用&#34;&gt;2.2 基本使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [state,setState]=useState(initState)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;state是要设置的状态&lt;/li&gt;
&lt;li&gt;setState是更新state的⽅法，只是⼀个⽅法名，可以随意更改&lt;/li&gt;
&lt;li&gt;initState是初始的state，可以是随意的数据类型，也可以是回调函数，但是函数必须是有返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-实际应用&#34;&gt;2.3 实际应用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React, { useState } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; UseS() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [count, setState] = useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;你点击了{count}次&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setState(count + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;点 击&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;3-useeffect&#34;&gt;3 useEffect&lt;/h1&gt;
&lt;h2 id=&#34;31-定义&#34;&gt;3.1 定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;useEffect：副作⽤处理钩⼦&lt;/li&gt;
&lt;li&gt;数据获取、订阅、定时执⾏任务、⼿动修改ReactDOM这些⾏为都可以称为副作⽤。⽽useEffect就是为了处理这些副作⽤⽽⽣的&lt;/li&gt;
&lt;li&gt;useEffect也是componentDidMount、componentDidUpdate和componentWillUnmount这⼏个⽣命周期⽅法的统⼀&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-基本使用&#34;&gt;3.2 基本使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;useEffect(callback,array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;callback：回调函数，作⽤是处理副作⽤逻辑。可以返回⼀个函数，⽤作清理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;useEffect(() =&amp;gt;{
	&lt;span style=&#34;color:#228b22&#34;&gt;//副作⽤逻辑
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	xxxxxx
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ()=&amp;gt;{
		&lt;span style=&#34;color:#228b22&#34;&gt;//清理副作⽤需要清理的内容
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;//类似于componentWillUnmount，组件渲染和组件卸载前执⾏的代码
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	}
},[array])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;array(可选参数)：数组，⽤于控制useEffect的执⾏。分三种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空数组，则只会执⾏⼀次（即初次渲染render）,相当于componentDidMount&lt;/li&gt;
&lt;li&gt;⾮空数组，useEffect会在数组发⽣改变后执⾏，相当于componentDidUpdate&lt;/li&gt;
&lt;li&gt;不填array这个数组，useEffect每次渲染都会执⾏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33-实际应用&#34;&gt;3.3 实际应用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { useState, useEffect } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; UseE = () =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [count, setState] = useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)

    useEffect(() =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;//更新⻚⾯标题
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.title = &lt;span style=&#34;color:#cd5555&#34;&gt;`您点击了&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;count&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;次了哦`&lt;/span&gt;
    }, [count])
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;你点击了{count}次&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setState(count + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;点 击&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    )
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; UseE;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;4-usecontext&#34;&gt;4 useContext&lt;/h1&gt;
&lt;h2 id=&#34;41-定义&#34;&gt;4.1 定义&lt;/h2&gt;
&lt;p&gt;context就是⽤来更⽅便的实现全局数据共享的，但是由于他并不是那么好⽤，所以我们⼀般会使⽤第三⽅状态管理器来实现全局数据共享&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redux&lt;/li&gt;
&lt;li&gt;dva&lt;/li&gt;
&lt;li&gt;mobx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是针对context上下⽂提出的⼀个Hooks提出的⼀个API，它接受React.createContext()的返回值作为参数，即context对象，并返回最近的context&lt;/p&gt;
&lt;p&gt;使⽤useContext是不需要再使⽤Provider和Consumer的&lt;/p&gt;
&lt;p&gt;当最近的context更新时，那么使⽤该context的hook将会重新渲染&lt;/p&gt;
&lt;h2 id=&#34;42-基本使用&#34;&gt;4.2 基本使用&lt;/h2&gt;
&lt;p&gt;store.js中创建数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Context = React.createContext({ age: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;18&amp;#39;&lt;/span&gt;, name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;jerry&amp;#39;&lt;/span&gt; })
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; Context
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;组件中使用useContext接收数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React, { useContext } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; Context from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./store&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; UseC = () =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;//使⽤useContext
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; ctx = useContext(Context)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;姓名&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h2&lt;/span&gt;&amp;gt;{ctx.name}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h2&lt;/span&gt;&amp;gt;年龄&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;{ctx.age}岁&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    )
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; UseC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gsemir0418.github.io/posts/reacthooks/ - </description>
        </item>
    
    
  </channel>
</rss> 