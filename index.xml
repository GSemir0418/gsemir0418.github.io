<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GSemir Blog</title>
    <link>https://gsemir0418.github.io/</link>
    <description>Recent content on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Aug 2021 22:02:28 +0800</lastBuildDate>
    
        <atom:link href="https://gsemir0418.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Git相关</title>
        <link>https://gsemir0418.github.io/posts/git/</link>
        <pubDate>Sun, 15 Aug 2021 22:02:28 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/git/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/git/ -&lt;h1 id=&#34;0-初始化配置&#34;&gt;0 初始化配置&lt;/h1&gt;
&lt;h2 id=&#34;01-全局配置&#34;&gt;0.1 全局配置&lt;/h2&gt;
&lt;p&gt;安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git config --global user.name &amp;quot;gsemir0418&amp;quot;
git config --global user.email &amp;quot;845217811@qq.com&amp;quot;
// 查看全局配置
git config --list
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;02-配置ssh公匙&#34;&gt;0.2 配置SSH公匙&lt;/h2&gt;
&lt;h3 id=&#34;021-本地创建ssh-key&#34;&gt;0.2.1 本地创建ssh key&lt;/h3&gt;
&lt;p&gt;打开终端，输入如下指令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;845217811@qq.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直接点回车，说明会在默认文件id_rsa上生成ssh key&lt;/p&gt;
&lt;p&gt;然后系统要求输入密码，直接回车表示不设密码；重复密码是也可以直接回车，表示不设密码。&lt;/p&gt;
&lt;p&gt;创建成功后，在终端输入如下指令，便可看到几个文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls ~/.ssh
id_rsa  id_rsa.pub  known_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vscode或vim打开id_rsa.pub，复制全部内容备用。&lt;/p&gt;
&lt;h3 id=&#34;022-git账户设置ssh&#34;&gt;0.2.2 git账户设置ssh&lt;/h3&gt;
&lt;p&gt;进入github主页，进入Account Settings，左边选择SSH Keys，Add SSH Key,&lt;/p&gt;
&lt;p&gt;title建议填写计算机名称，粘贴刚刚复制的key。确定后配置完成了&lt;/p&gt;
&lt;h3 id=&#34;023-验证&#34;&gt;0.2.3 验证&lt;/h3&gt;
&lt;p&gt;输入以下指令验证配置是否成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果配置过密码，输入密码后，看到如下指令，则表示配置成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You’ve successfully authenticated, but GitHub does not provide shell access
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;03-修改之前的http仓库为ssh&#34;&gt;0.3 修改之前的http仓库为ssh&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;// 查看当前远程仓库路径
git remote -v
// 修改为ssh路径
git remote set-url origin [新路径]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;1-简单的代码提交流程&#34;&gt;1 简单的代码提交流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt; 查看工作区代码相对于暂存区的差别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt; 将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m ‘注释’&lt;/code&gt; 将缓存区内容添加到本地仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin master&lt;/code&gt;先将远程仓库master中的信息同步到本地仓库master中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt; 将本地版本库推送到远程服务器，origin是远程主机，master表示是远程服务器上的master分支和本地分支重名的简写，分支名是可以修改的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-git-add&#34;&gt;2 git add&lt;/h1&gt;
&lt;h1 id=&#34;3-git-commit&#34;&gt;3 git commit&lt;/h1&gt;
&lt;h1 id=&#34;4-git-fetch&#34;&gt;4 git fetch&lt;/h1&gt;
&lt;h1 id=&#34;5-git-merge&#34;&gt;5 git merge&lt;/h1&gt;
&lt;h1 id=&#34;6-git-pull&#34;&gt;6 git pull&lt;/h1&gt;
&lt;h1 id=&#34;7-git-push&#34;&gt;7 git push&lt;/h1&gt;
&lt;h1 id=&#34;8-git-remote&#34;&gt;8 git remote&lt;/h1&gt;
- https://gsemir0418.github.io/posts/git/ - </description>
        </item>
    
    
    
        <item>
        <title>useState原理</title>
        <link>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</link>
        <pubDate>Sat, 07 Aug 2021 22:15:51 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/ -&lt;h1 id=&#34;1-usestate简单实现&#34;&gt;1 useState简单实现&lt;/h1&gt;
&lt;h2 id=&#34;11-示例&#34;&gt;1.1 示例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;点击按钮，结果+1&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; ReactDOM from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rootElement = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [n, setN] = React.useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;className&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;App&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;{n}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setN(n + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}

ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;运行过程分析
&lt;ol&gt;
&lt;li&gt;首次render&lt;code&gt;&amp;lt;App/&amp;gt;&lt;/code&gt;，调用&lt;code&gt;App()&lt;/code&gt;方法，得到虚拟DOM，React会生成真实DOM&lt;/li&gt;
&lt;li&gt;用户单击button，调用&lt;code&gt;setN(n+1)&lt;/code&gt;，并再次render&lt;code&gt;&amp;lt;App/&amp;gt;&lt;/code&gt;，调用&lt;code&gt;App()&lt;/code&gt;方法，得到新的虚拟DOM，经过DOM Diff运算，React会更新真实DOM&lt;/li&gt;
&lt;li&gt;每次调用&lt;code&gt;App()&lt;/code&gt;，都会运行&lt;code&gt;useState(0)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;setN&lt;/code&gt;的时候会发生什么？n会变吗？&lt;code&gt;App()&lt;/code&gt;会重新执行吗？
&lt;ul&gt;
&lt;li&gt;setN一定会修改某个数据x，而&lt;strong&gt;不是直接修改n&lt;/strong&gt;，并将n+1存入x&lt;/li&gt;
&lt;li&gt;setN&lt;strong&gt;一定会触发&lt;code&gt;&amp;lt;App/&amp;gt;&lt;/code&gt;重新渲染&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每次重新执行&lt;code&gt;App()&lt;/code&gt;时，都会执行&lt;code&gt;useState(o)&lt;/code&gt;，那么n每次的值会有不同吗（即不为0）
&lt;ul&gt;
&lt;li&gt;每次n的值都会不同，说明useState肯定会&lt;strong&gt;从x读取n的最新值&lt;/strong&gt;，而不是简单的初始化n为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;x
&lt;ul&gt;
&lt;li&gt;每个组件有自己的数据&lt;code&gt;x&lt;/code&gt;，即&lt;code&gt;state&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-简易usestate实现&#34;&gt;1.2 简易useState实现&lt;/h2&gt;
&lt;p&gt;依据上面的分析，现在可以初步尝试一下手写&lt;code&gt;myUseState&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义&lt;code&gt;myUseState&lt;/code&gt;，接受初始值&lt;code&gt;initialValue&lt;/code&gt;，返回一个数组&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; myUseState = (initialValue) =&amp;gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; [state, setState]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;定义&lt;code&gt;state&lt;/code&gt;变量和&lt;code&gt;setState&lt;/code&gt;方法，并实现&lt;code&gt;re-render&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; myUseState = (initialValue) =&amp;gt; {
  &lt;span style=&#34;color:#228b22&#34;&gt;// 定义state变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; state = initialValue
  &lt;span style=&#34;color:#228b22&#34;&gt;// 定义useState方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; useState = (newValue) =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 将新值赋给state
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		state = newValue
		&lt;span style=&#34;color:#228b22&#34;&gt;// re-render
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement)
	}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; [state, setState]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;每次执行都会重新把初始值赋给state，导致n的值不会发生改变。因此需要将state定义在函数外面，避免被myUseState重置。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; _state;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; myUseState = (initialValue) =&amp;gt; {
  &lt;span style=&#34;color:#228b22&#34;&gt;// 对_state值进行判断，重新赋值或者保持上次的值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	_state = _state === &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;undefined&lt;/span&gt; ? initialValue : _state
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; useState = (newValue) =&amp;gt; {
		_state = newValue
		ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement)
	}
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; [_state, setState]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此，针对单一组件单一状态值的简易版本useState就完成了，但仍存在一些问题。&lt;/p&gt;
&lt;h2 id=&#34;13-多个state的情况&#34;&gt;1.3 多个state的情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：如果一个组件用了两个useState，怎么办&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改写_state为对象：_
&lt;ul&gt;
&lt;li&gt;_比如_state = { n : 0, m : 0 }&lt;/li&gt;
&lt;li&gt;不行，因为useState(0)并不知道要赋值的变量的key是m还是n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改写_state为数组：_
&lt;ul&gt;
&lt;li&gt;比如_state = [ 0, 0 ]&lt;/li&gt;
&lt;li&gt;第一次useState就操作第一个数，第二次就操作第二个数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改写_state为数组&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义index变量，标识state的初始化与操作顺序。初步改写如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; ReactDOM from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rootElement = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; _state = []
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; index = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; myUseState = (initialValue) =&amp;gt; {
  _state[index] = _state[index] === &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;undefined&lt;/span&gt;?initialValue:_state[index]
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; setState = (newValue) =&amp;gt; {
    _state[index] = newValue
    ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);
  }
  index += &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#228b22&#34;&gt;// 此处返回的实际上总是下一个_state值，因为上面的index已经加一了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// 将其放到return后面的话是不会被执行的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; [_state[index], setState]
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [n, setN] = myUseState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [m, setM] = myUseState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;className&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;App&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;{n}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setN(n + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;{m}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setM(m + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}
ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;由于出现了&lt;code&gt;index += 1&lt;/code&gt;的执行顺序问题，页面中的m和n值得不到正确显示。需要定义中间变量&lt;code&gt;currentIndex&lt;/code&gt;解决这个问题：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;...
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; myUseState = (initialValue) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// 将当前index值赋给中间变量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; currentIndex = index
  _state[currentIndex] = _state[currentIndex] === &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;undefined&lt;/span&gt; ? initialValue : _state[currentIndex]
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; setState = (newValue) =&amp;gt; {
    _state[currentIndex] = newValue
    ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);
  }
  index += &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#228b22&#34;&gt;// 此时index的变化对返回值就不会产生影响了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; [_state[currentIndex], setState]
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;此时单击+1，没有发生任何变化。通过控制台打印出currentIndex的值我们发现，首次渲染&lt;code&gt;&amp;lt;App/&amp;gt;&lt;/code&gt;时，currentIndex为0和1；但当单击+1时，currentIndex变为了2和3，导致返回的数组每次useState后都会增加两个值，说明index每次执行useState都继续+1。那么我们应该在每次re-render时重置index为0：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;...
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; setState = (newValue) =&amp;gt; {
	_state[currentIndex] = newValue
	&lt;span style=&#34;color:#228b22&#34;&gt;// before re-render
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	index = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
	ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;完成多个state的状态处理！&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组方案&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二次渲染时必须保证useState&lt;strong&gt;调用顺序完全一致&lt;/strong&gt;，否则state就乱了&lt;/li&gt;
&lt;li&gt;同样React不允许useState出现在&lt;code&gt;if&lt;/code&gt;等条件判断语句中，规定hooks在每次渲染中必须&lt;strong&gt;保持严格一致的执行顺序&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;React为每个组件创建自己的&lt;code&gt;_state&lt;/code&gt;和&lt;code&gt;index&lt;/code&gt;，放在组件对应的虚拟节点对象上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图示：App组件的更新过程（两个子组件也经历同样的过程）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./useState1.png&#34; alt=&#34;image-20210808092323870&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14-总结&#34;&gt;1.4 总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;每个函数组件对应一个 React节点*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;React的节点实际上应该是FiberNode，_state的真实名称为memorizedState，index的实现则是用到了链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.im/post/5bdfc1c4e51d4539f4178e1f&#34;&gt;https://juejin.im/post/5bdfc1c4e51d4539f4178e1f&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个节点保存着&lt;code&gt;state&lt;/code&gt;和&lt;code&gt;index&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;useState会读取&lt;code&gt;state[index]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;index&lt;/code&gt;由useState出现的顺序决定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setState会修改&lt;code&gt;state&lt;/code&gt;,并触发更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-n的分身setn会直接改变n吗&#34;&gt;2 n的分身(setN会直接改变n吗)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;背景：两个按钮，一个是单击+1，另一个是在3s后打印出n的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; ReactDOM from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rootElement = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [n, setN] = React.useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; log = () =&amp;gt; setTimeout(() =&amp;gt; console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;`n: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;n&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;3000&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;className&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;App&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;{n}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setN(n + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={log}&amp;gt;log&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}

ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;先+1再log时&lt;/strong&gt;，控制台3s后打印出：&lt;code&gt;n : 1&lt;/code&gt;，在预料之中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./useState2.png&#34; alt=&#34;image-20210808124646987&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;先log再+1时&lt;/strong&gt;，控制台3s后打印出：&lt;code&gt;n : 0&lt;/code&gt;，而不是有部分人预想的n：1。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./useState3.png&#34; alt=&#34;image-20210808124726273&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么log出了&lt;strong&gt;旧数据&lt;/strong&gt;？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在单击log后，无论点击多少次+1，即无论n改变了几次，log始终都会读取点击log那一刻的n值&lt;/li&gt;
&lt;li&gt;说明每次&lt;strong&gt;setN不会直接修改n值&lt;/strong&gt;，而是&lt;strong&gt;产生一个新的n&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果想要有一个贯穿始终的状态，办法有很多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-贯穿始终的状态&#34;&gt;3 贯穿始终的状态&lt;/h1&gt;
&lt;p&gt;最直接的方式就是定义全局变量，即&lt;code&gt;window.xxx&lt;/code&gt;，除了很low别的没啥毛病&lt;/p&gt;
&lt;h2 id=&#34;31-useref&#34;&gt;3.1 useRef&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;useRef不仅可以用于引用div，还能用于&lt;strong&gt;任意数据&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; ReactDOM from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rootElement = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; nRef = React.useRef(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; log = () =&amp;gt; setTimeout(() =&amp;gt; console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;`n: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;nRef.current&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;className&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;App&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;{nRef.current} 这里并不能实时更新&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; (nRef.current += &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={log}&amp;gt;log&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}

ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;无论+1与log的顺序如何，log总能打印出最新的n值，因为&lt;strong&gt;nRef是唯一的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./useState4.png&#34; alt=&#34;image-20210808131507759&#34;&gt;&lt;/p&gt;
&lt;p&gt;但nRef的改变并不能驱动页面刷新，可以借助useState帮助页面刷新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;...
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App() {
  &lt;span style=&#34;color:#228b22&#34;&gt;// useRef实际上就是个简单的对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; nRef = React.useRef(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;// { current : 0 }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// 只需借助setState方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; update = React.useState(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; log = () =&amp;gt; setTimeout(() =&amp;gt; console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;`n: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;nRef.current&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;className&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;App&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;{nRef.current}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; {
            nRef.current += &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
            update(nRef.current)
          }}&amp;gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={log}&amp;gt;log&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在改变nRef的值时，随便改变一下setState的值，页面就会同时刷新&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./useState5.png&#34; alt=&#34;image-20210808132338632&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-usecontext&#34;&gt;3.2 useContext&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;useContext不仅能贯穿始终，还能&lt;strong&gt;贯穿不同组件&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; ReactDOM from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;./styles.css&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rootElement = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// 创建上下文（全局）对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; themeContext = React.createContext(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [theme, setTheme] = React.useState(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &lt;span style=&#34;color:#228b22&#34;&gt;// 将状态值theme以及改变状态的方法setTheme传入value中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;themeContext.Provider&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;={{ theme, setTheme }}&amp;gt;
      &lt;span style=&#34;color:#228b22&#34;&gt;// 通过theme值改变className，从而改变主题样式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;className&lt;/span&gt;={&lt;span style=&#34;color:#cd5555&#34;&gt;`App &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;theme&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;}&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;{theme}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
          &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ChildA&lt;/span&gt; /&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
          &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ChildB&lt;/span&gt; /&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;themeContext.Provider&lt;/span&gt;&amp;gt;
  );
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; ChildA() {
  &lt;span style=&#34;color:#228b22&#34;&gt;// 通过useContext读取到父组件的themeContext对象，取出其中的setTheme方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { setTheme } = React.useContext(themeContext);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setTheme(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;)}&amp;gt;red&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; ChildB() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { setTheme } = React.useContext(themeContext);
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setTheme(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;)}&amp;gt;blue&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}

ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./useState6.png&#34; alt=&#34;image-20210808132931213&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33-总结&#34;&gt;3.3 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每次重新渲染，组件函数就会再次执行&lt;/li&gt;
&lt;li&gt;对应的所有state都会出现&lt;code&gt;「分身」&lt;/code&gt;，旧的state和新的state可以&lt;strong&gt;同时存在&lt;/strong&gt;（例如setTimeout时），之后旧的state会&lt;strong&gt;消失&lt;/strong&gt;（垃圾回收）&lt;/li&gt;
&lt;li&gt;如果你不希望出现分身，可以用&lt;code&gt;useRef/useContext&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/ - </description>
        </item>
    
    
    
        <item>
        <title>JS专精</title>
        <link>https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</link>
        <pubDate>Sat, 07 Aug 2021 20:40:20 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/ -&lt;p&gt;1&lt;/p&gt;
- https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/ - </description>
        </item>
    
    
    
        <item>
        <title>Node进程与线程</title>
        <link>https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
        <pubDate>Fri, 06 Aug 2021 17:33:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/ -&lt;h1 id=&#34;1-进程&#34;&gt;1 进程&lt;/h1&gt;
&lt;h2 id=&#34;11-进程-process&#34;&gt;1.1 进程 Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;场景
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;notepad.exe&lt;/code&gt;是一个&lt;strong&gt;程序&lt;/strong&gt;，不是进程&lt;/li&gt;
&lt;li&gt;双击notepad.exe时，操作系统会开启一个&lt;strong&gt;进程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义
&lt;ul&gt;
&lt;li&gt;进程是程序的&lt;strong&gt;执行实例&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;程序在CPU上&lt;strong&gt;执行时的活动&lt;/strong&gt;叫做进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;一个进程可以创建另一个进程（父进程和子进程）例如Chrome浏览器的网页和插件&lt;/li&gt;
&lt;li&gt;通过任务管理器可以看到进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-了解cpu&#34;&gt;1.2 了解CPU&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个单核CPU，在一个时刻，只能做一件事情&lt;/li&gt;
&lt;li&gt;如何让用户同时看电影、听音乐、写代码呢&lt;/li&gt;
&lt;li&gt;答案是在不同进程中&lt;strong&gt;快速切换&lt;/strong&gt;（CPU频率）&lt;/li&gt;
&lt;li&gt;以渣男交多个女朋友举例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多程序并发执行时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个程序在&lt;strong&gt;宏观上并行，微观上串行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个进程会出现&lt;strong&gt;执行-暂停-执行&lt;/strong&gt;的规律&lt;/li&gt;
&lt;li&gt;多个进程之前会出现抢资源（如打印机队列）的现象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程的两个状态：运行态与非运行态&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./process1.png&#34; alt=&#34;image-20210805104328732&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程队列示意&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./process2.png&#34; alt=&#34;image-20210805104451902&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-阻塞&#34;&gt;1.3 阻塞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;等待执行的进程中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都是非运行态&lt;/li&gt;
&lt;li&gt;一些（A）在等待CPU资源&lt;/li&gt;
&lt;li&gt;另一些（B）在等待I/O完成（如文件读取）&lt;/li&gt;
&lt;li&gt;如果这时把CPU资源分配给B进程，B还是在等I/O（不占用CPU）&lt;/li&gt;
&lt;li&gt;B进程就是阻塞进程&lt;/li&gt;
&lt;li&gt;因此，分派程序只会把CPU分配给非阻塞进程&lt;/li&gt;
&lt;li&gt;比如和女朋友排队买饭，但她中途去厕所了，那么如果排到你们了就会让你去后面重新排队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程的三个状态：&lt;strong&gt;运行&lt;/strong&gt;，&lt;strong&gt;就绪&lt;/strong&gt;，&lt;strong&gt;阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./process3.png&#34; alt=&#34;image-20210805105749846&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-线程&#34;&gt;2 线程&lt;/h1&gt;
&lt;h2 id=&#34;21-线程引入&#34;&gt;2.1 线程引入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分阶段
&lt;ul&gt;
&lt;li&gt;过去在面向进程设计的系统中，进程是程序的基本执行实体&lt;/li&gt;
&lt;li&gt;在面向线程设计的系统中，进程本身不是基本运行单位，而是&lt;strong&gt;线程的容器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;引入原因
&lt;ul&gt;
&lt;li&gt;进程是程序的基本执行实体，也是资源（内存等）分配的基本实体&lt;/li&gt;
&lt;li&gt;导致进程的创建、切换、销毁太消耗CPU时间了&lt;/li&gt;
&lt;li&gt;于是引入线程，&lt;strong&gt;线程作为执行的基本实体&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;而&lt;strong&gt;进程只作为资源分配的基本实体&lt;/strong&gt;（不管执行了）&lt;/li&gt;
&lt;li&gt;例如领导与员工们，&lt;strong&gt;领导负责申请、调配资源，员工们负责执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-线程thread&#34;&gt;2.2 线程Thread&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;概念
&lt;ul&gt;
&lt;li&gt;CPU&lt;strong&gt;调度和执行&lt;/strong&gt;的&lt;strong&gt;最小单元&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一个进程中&lt;strong&gt;至少&lt;/strong&gt;有一个线程&lt;/li&gt;
&lt;li&gt;一个进程中的线程共享该进程的所有资源&lt;/li&gt;
&lt;li&gt;进程的第一个线程叫做初始化线程&lt;/li&gt;
&lt;li&gt;线程的调度可以由操作系统负责，也可以由用户自己负责&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例
&lt;ul&gt;
&lt;li&gt;浏览器进程中有渲染引擎、V8引擎、存储模块、网络模块、用户界面模块等&lt;/li&gt;
&lt;li&gt;每个模块都可以放在一个线程里&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分析：子进程 VS 线程
&lt;ul&gt;
&lt;li&gt;优先使用&lt;strong&gt;线程&lt;/strong&gt;，除非需要新的资源分配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-nodejs进程控制&#34;&gt;3 Node.js进程控制&lt;/h1&gt;
&lt;h2 id=&#34;31-child_process模块&#34;&gt;3.1 child_process模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;子进程的运行结果存储在系统缓存中（最大200kb）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待子进程运行结束后，主进程再用回调函数读取子进程的运行结果（error,stdout,stderr）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; child_process = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; {exec} = child_process

exec(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;, (error, stdout, stderr)=&amp;gt;{
	console.log(error) &lt;span style=&#34;color:#228b22&#34;&gt;// null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	console.log(stdout) &lt;span style=&#34;color:#228b22&#34;&gt;// 标准输出
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	console.log(stderr) &lt;span style=&#34;color:#228b22&#34;&gt;// 错误内容
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-api&#34;&gt;3.2 API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API-exec&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;exec(cmd, options, fn)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;execute的缩写，用于执行bash命令&lt;/li&gt;
&lt;li&gt;同步版本：execSync，不用回调，直接const result = execSync&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回流（不用回调，可以监听stdout流的data事件）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; child_process = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; {exec} = child_process

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; child = exec(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ls -l&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 监听stdout的data事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;child.stdout.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, (chunk) =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;得到了一次数据&amp;#39;&lt;/span&gt;)
	console.log(chunk)
})
&lt;span style=&#34;color:#228b22&#34;&gt;// 监听stderr
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;child.stderr.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以使其Promise化（util.promisify）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; util = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;util&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; child_process = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { exec } = child_process

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; exec2 = util.promisify(exec)

exec2(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ls -l&amp;#39;&lt;/span&gt;).then(data =&amp;gt; {
	console.log(data.stdout)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;options常用选项（exec第二个参数，execFile第三个参数）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cwd：执行命令的路径&lt;/li&gt;
&lt;li&gt;env：环境变量&lt;/li&gt;
&lt;li&gt;shell：用什么命令行程序执行&lt;/li&gt;
&lt;li&gt;maxBuffer：最大缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;exec(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;, {
	cwd : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;C:\\&amp;#39;&lt;/span&gt;,
	env : {NODE_ENV : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;development&amp;#39;&lt;/span&gt;},
	maxBuffer : &lt;span style=&#34;color:#b452cd&#34;&gt;1024&lt;/span&gt;*&lt;span style=&#34;color:#b452cd&#34;&gt;2024&lt;/span&gt;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在cmd被注入的风险&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 当接受用户输入时，以&amp;#39;&amp;amp;&amp;amp;&amp;#39;开头，接着输入一条危险指令
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; userInput = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;. &amp;amp;&amp;amp; rm -rf /&amp;#39;&lt;/span&gt;
exec2(&lt;span style=&#34;color:#cd5555&#34;&gt;`ls &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;userInput&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;).then(data)...
&lt;span style=&#34;color:#228b22&#34;&gt;// 那么命令行就会执行&amp;#39;ls&amp;#39;命令和&amp;#39;rm -rf /&amp;#39;命令
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;推荐使用&lt;code&gt;execFile&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;执行特定的程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行的参数要用数组形式传入，无法注入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步版本：execFileSync&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { execFile } = child_process

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; userInput = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;. &amp;amp;&amp;amp; pwd&amp;#39;&lt;/span&gt;
execFile(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-la&amp;#39;&lt;/span&gt;, userInput], (error, stdout) =&amp;gt; {
    console.log(error)
    console.log(stdout)
})
&lt;span style=&#34;color:#228b22&#34;&gt;// 结果会报错，不会将&amp;#39;&amp;amp;&amp;amp;&amp;#39;作为连接号解析
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持流&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; child = execFile(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;, [userInput])
child.stdout.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, chunk =&amp;gt; {
    console.log(chunk)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API-spawn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法与execFile方法类似&lt;/li&gt;
&lt;li&gt;区别在于没有回调函数，只能通过流事件获取结果&lt;/li&gt;
&lt;li&gt;没有最大200kb的限制（因为是流）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; child = spawn(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;], { cwd : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;C:\\&amp;#39;&lt;/span&gt; })
child.stdout.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, chunk =&amp;gt; {
    console.log(chunk.toString())
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能用spawn就不要用execFile&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API-fork&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fork&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个子进程，执行Node脚本&lt;/li&gt;
&lt;li&gt;fork(&#39;./child.js&#39;)相当于执行spawn(&amp;lsquo;node&amp;rsquo;,[&#39;./child.js&#39;])&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;能用fork，就别用其他的了&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会多出一个message事件，用于父子通信&lt;/li&gt;
&lt;li&gt;会多出一个send方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// n.js主进程
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; n = child_process.fork(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./child.js&amp;#39;&lt;/span&gt;)
n.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, m =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;PARENT got message:&amp;#39;&lt;/span&gt;, m)
})
n.send({ hello: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt; })&lt;span style=&#34;color:#228b22&#34;&gt;// 父进程给子进程传值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// child.js子进程
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;process.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, m =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;CHILD got message:&amp;#39;&lt;/span&gt;, m)
})
process.send({ foo: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; })&lt;span style=&#34;color:#228b22&#34;&gt;// 子进程给父进程传值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-nodejs线程&#34;&gt;4 Node.js线程&lt;/h1&gt;
&lt;p&gt;太新了 官方文档建议用子进程。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/worker_threads.html#worker_threads_worker_threads&#34;&gt;https://nodejs.org/api/worker_threads.html#worker_threads_worker_threads&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/ - </description>
        </item>
    
    
    
        <item>
        <title>Node技术架构</title>
        <link>https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</link>
        <pubDate>Thu, 29 Jul 2021 20:54:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/ -&lt;h1 id=&#34;1-nodejs概述&#34;&gt;1 Node.js概述&lt;/h1&gt;
&lt;h2 id=&#34;11-nodejs不是什么&#34;&gt;1.1 Node.js不是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不是web框架&lt;code&gt;（Flask，Spring）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不是编程语言&lt;code&gt;（Python，PHP）&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-nodejs是什么&#34;&gt;1.2 Node.js是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是一个&lt;strong&gt;平台&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;将&lt;strong&gt;多种技术组合&lt;/strong&gt;起来&lt;/li&gt;
&lt;li&gt;让&lt;strong&gt;JavaScript&lt;/strong&gt;也能调用&lt;strong&gt;系统接口&lt;/strong&gt;，开发后端应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node.js搭建技术
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;V8&lt;/code&gt;引擎&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libuv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C/C++&lt;/code&gt;实现的&lt;code&gt;c-ares&lt;/code&gt;（解析dns域名）、&lt;code&gt;http-parser&lt;/code&gt;（解析http）、&lt;code&gt;OpenSSL&lt;/code&gt;（加密解密）、&lt;code&gt;zlib&lt;/code&gt;（数据压缩）等库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-nodejs技术架构&#34;&gt;2 Node.js技术架构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;./node1.png&#34; alt=&#34;image-20210730103247379&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yjhjstz/deep-into-node&#34;&gt;https://github.com/yjhjstz/deep-into-node&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;21-nodejs-bindings&#34;&gt;2.1 Node.js bindings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js用&lt;strong&gt;C++&lt;strong&gt;对http_parser进行&lt;/strong&gt;封装&lt;/strong&gt;，使它符合某些要求（统一数据类型等），封装的文件叫做&lt;code&gt;http_parser_bindings.cpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用Node.js提供的编译工具将其&lt;strong&gt;编译&lt;/strong&gt;为.node文件&lt;/li&gt;
&lt;li&gt;JS代码可以直接require这个.node文件&lt;/li&gt;
&lt;li&gt;这样JS就能调用C++库，中间的&lt;strong&gt;桥梁&lt;/strong&gt;就是binding&lt;/li&gt;
&lt;li&gt;由于Node.js提供了很多binding，所以加个s&lt;/li&gt;
&lt;li&gt;这就是bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS与C++交互&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://nodejs.cn/api/addons.html#addons_function_arguments&#34;&gt;http://nodejs.cn/api/addons.html#addons_function_arguments&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++调用JS回调&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://nodejs.cn/api/addons.html#addons_callbacks&#34;&gt;http://nodejs.cn/api/addons.html#addons_callbacks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-libuv&#34;&gt;2.2 libuv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个系统上的异步I/O（系统与外界（硬盘文件、打印机、网络请求）交互）都不一样&lt;/li&gt;
&lt;li&gt;比如FreeBSD系统上有kqueue、Linux上有epoll、Windows上有IOCP&lt;/li&gt;
&lt;li&gt;Ryan为了一个&lt;strong&gt;跨平台的异步I/O库&lt;/strong&gt;，开始写libuv&lt;/li&gt;
&lt;li&gt;libuv会根据系统自动选择合适的方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以用于TCP（建立HTTP服务器）/UDP（qq聊天）/DNS（网址对应的ip）/文件（读写）等的异步操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-v8&#34;&gt;2.3 V8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;功能
&lt;ul&gt;
&lt;li&gt;将JS源代码变成本地代码（机器代码）并执行&lt;/li&gt;
&lt;li&gt;维护调用栈，确保JS函数的执行顺序&lt;/li&gt;
&lt;li&gt;内存管理，为所有对象分配内存&lt;/li&gt;
&lt;li&gt;垃圾回收，重复利用无用的内存&lt;/li&gt;
&lt;li&gt;实现JS的标准库（数组的方法等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意
&lt;ul&gt;
&lt;li&gt;V8不提供DOM API（浏览器提供）&lt;/li&gt;
&lt;li&gt;V8执行JS是单线程的&lt;/li&gt;
&lt;li&gt;可以开启两个线程分别执行JS&lt;/li&gt;
&lt;li&gt;V8本身是包含多个线程的，如垃圾回收为单独线程&lt;/li&gt;
&lt;li&gt;自带event loop，但Node.js基于libuv自己做了一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24-event-loop&#34;&gt;2.4 Event Loop&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是Event&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件分为内部与外部&lt;/li&gt;
&lt;li&gt;计时器到期了（内部事件）&lt;/li&gt;
&lt;li&gt;文件可以读取了、读取出错了（外部事件）&lt;/li&gt;
&lt;li&gt;socket（HTTP消息）有内容了，关闭了（外部事件）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么是Loop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loop就是循环，由于&lt;strong&gt;事件是分优先级&lt;/strong&gt;的，所以处理起来也是分先后的&lt;/li&gt;
&lt;li&gt;所以Node.js需要按顺序轮询每种事件&lt;/li&gt;
&lt;li&gt;这种轮询往往都是循环的，1&amp;ndash;&amp;gt;2&amp;ndash;&amp;gt;3&amp;ndash;&amp;gt;1&amp;ndash;&amp;gt;2&amp;ndash;&amp;gt;3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event Loop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统可以触发事件，JS可以处理事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Event Loop就是对事件处理顺序的管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序示意图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./node2.png&#34; alt=&#34;image-20210730110930457&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903582538399752&#34;&gt;https://juejin.cn/post/6844903582538399752&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重点阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**&lt;code&gt;timers&lt;/code&gt;**检查计时器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;poll&lt;/code&gt;轮询&lt;/strong&gt;，检查系统事件&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;check&lt;/code&gt;**检查&lt;code&gt;setImmediate&lt;/code&gt;回调&lt;/li&gt;
&lt;li&gt;其他阶段用的较少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大部分时间，Node.js都停在&lt;code&gt;poll&lt;/code&gt;轮询阶段&lt;/li&gt;
&lt;li&gt;大部分事件都在poll阶段被处理，如文件、网络请求&lt;/li&gt;
&lt;li&gt;poll阶段是有停留时间限制的，不同系统停留时间不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setTimeout(f1, 0)和setImmediate(f2)哪个先执行？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于大部分时间js都停留在poll阶段，之后进入check阶段，从而执行setImmediate；之后进入timers阶段，才会执行setTimeout&lt;/li&gt;
&lt;li&gt;只有当Node.js最开始运行时，会首先进入timers阶段执行setTimeout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;25-总结&#34;&gt;2.5 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;libuv&lt;/code&gt;进行异步I/O操作&lt;/li&gt;
&lt;li&gt;基于libuv，Node.js用&lt;code&gt;Event Loop&lt;/code&gt;管理事件处理顺序&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;C/C++库&lt;/code&gt;高效处理DNS/HTTP&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;bindings&lt;/code&gt;让JS能和C/C++沟通（require）&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;V8&lt;/code&gt;运行JS&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;Node.js标准库&lt;/code&gt;简化JS代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;26-nodejs工作流程&#34;&gt;2.6 Node.js工作流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./node3.png&#34; alt=&#34;image-20210730131938322&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;27-nodejs-api&#34;&gt;2.7 Node.js API&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./node4.png&#34; alt=&#34;image-20210730133449418&#34;&gt;&lt;/p&gt;
- https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/ - </description>
        </item>
    
    
    
        <item>
        <title>Umi-Request配置</title>
        <link>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Fri, 09 Jul 2021 16:47:33 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/ -&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;utils/request.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { extend } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;umi-request&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { notification } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;antd&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; codeMessage = {
  &lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务器成功返回请求的数据。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;201&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;新建或修改数据成功。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;202&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;一个请求已经进入后台排队（异步任务）。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;204&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;删除数据成功。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;400&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;发出的请求有错误，服务器没有进行新建或修改数据的操作。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;401&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;用户没有权限（令牌、用户名、密码错误）。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;403&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;用户得到授权，但是访问是被禁止的。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;发出的请求针对的是不存在的记录，服务器没有进行操作。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;406&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;请求的格式不可得。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;410&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;请求的资源被永久删除，且不会再得到的。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;422&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;当创建一个对象时，发生一个验证错误。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;500&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务器发生错误，请检查服务器。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;502&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;网关错误。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;503&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务不可用，服务器暂时过载或维护。&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#b452cd&#34;&gt;504&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;网关超时。&amp;#39;&lt;/span&gt;,
};
&lt;span style=&#34;color:#228b22&#34;&gt;/** 异常处理程序 */&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; errorHandler = (error) =&amp;gt; {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { response } = error;

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (response &amp;amp;&amp;amp; response.status) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; errorText = codeMessage[response.status] || response.statusText;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { status, url } = response;
    notification.error({
      message: &lt;span style=&#34;color:#cd5555&#34;&gt;`请求错误 &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;status&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;url&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;,
      description: errorText,
    });
  } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!response) {
    notification.error({
      description: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;您的网络发生异常，无法连接服务器&amp;#39;&lt;/span&gt;,
      message: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;网络异常&amp;#39;&lt;/span&gt;,
    });
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; response;
};
&lt;span style=&#34;color:#228b22&#34;&gt;/** 配置request请求时的默认参数 */&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; request = extend({
  prefix:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/api&amp;#39;&lt;/span&gt;,
  errorHandler,
  &lt;span style=&#34;color:#228b22&#34;&gt;// 默认错误处理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  credentials: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;include&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;// 默认请求是否带上cookie
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;});
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; request;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;config/proxy.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; {
  dev: {
    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/api&amp;#39;&lt;/span&gt;: {
      target: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://192.168.95.29:18888&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#228b22&#34;&gt;// baseURL
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      changeOrigin: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;,
      pathRewrite: {
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;^/api&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
      },
    },
  },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;request
    .get(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/equip/get-all/&amp;#39;&lt;/span&gt;)
    .then(response =&amp;gt; {
      setDataSource(response.content)
      console.log(response.content)
    })
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(error =&amp;gt; {
      console.log(error)
    })	

request
    .put(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/equip/change/&amp;#39;&lt;/span&gt;, {
    data: saveData,
})
    .then(response =&amp;gt; {
    console.log(response)
})
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(error =&amp;gt; {
    console.log(error)
})

request
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;`/equip/delete/&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;key&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;)
    .then(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; (response) {
    console.log(response)
})
    .&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; (error) {
    console.log(error)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/ - </description>
        </item>
    
    
    
        <item>
        <title>NodeStream模块</title>
        <link>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Thu, 08 Jul 2021 14:07:04 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/ -&lt;h1 id=&#34;1三个示例引入stream&#34;&gt;1.三个示例引入Stream&lt;/h1&gt;
&lt;h2 id=&#34;11-创建流&#34;&gt;1.1 创建流&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入fs模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fs = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 利用fs创建流
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; stream = fs.createWriteStream(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./big_file.txt&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;// 写数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;100000&lt;/span&gt;; i++) {
    stream.write(&lt;span style=&#34;color:#cd5555&#34;&gt;`这是第&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;行内容，我们需要很多很多内容\n`&lt;/span&gt;)
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 关闭流
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;stream.end()
console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;done&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;//命令行执行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;node &lt;span style=&#34;color:#b452cd&#34;&gt;1.&lt;/span&gt;js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流程：打开流，多次往里面塞内容，关闭流&lt;/li&gt;
&lt;li&gt;看起来就是可以多次写，没什么大不了的&lt;/li&gt;
&lt;li&gt;最终得到一个100M左右的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stream是水流，但默认没有水&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stream.write可以让水流中有水（数据）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次写入的数据片段叫做chunk（块）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产生数据的一端叫做source&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收数据的一端叫做sink&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./stream1.png&#34; alt=&#34;image-20210803164712797&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;12-浏览器直接读取文件&#34;&gt;1.2 浏览器直接读取文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入文件模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fs = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 引入http模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; http = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;// 开启服务器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request, response) =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 读取文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    fs.readFile(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./big_file.txt&amp;#39;&lt;/span&gt;, (error, data) =&amp;gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
        response.end(data)
        console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;done&amp;#39;&lt;/span&gt;)
    })
})
&lt;span style=&#34;color:#228b22&#34;&gt;// 开启监听端口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;分析
&lt;ul&gt;
&lt;li&gt;用任务管理器看Node.js内存占用，相对比较高&lt;/li&gt;
&lt;li&gt;如果多人同时访问服务器中的此文件，内存占用就爆炸了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-stream读取文件&#34;&gt;1.3 Stream读取文件&lt;/h2&gt;
&lt;p&gt;用Stream改写第二个例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; http = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fs = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request, response) =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 利用流读取文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; stream = fs.createReadStream(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./big_file.txt&amp;#39;&lt;/span&gt;)
    stream.pipe(response)
})
server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;占用内存较低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个流可以用一个管道相连&lt;/li&gt;
&lt;li&gt;stream1的末尾连接上stream2的开端&lt;/li&gt;
&lt;li&gt;只要stream1有数据，就会流到stream2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;stream1.pipe(stream2)
&lt;span style=&#34;color:#228b22&#34;&gt;// 可读的流.pipe（可写的流）
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链式操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;a.pipe(b).pipe(c)
&lt;span style=&#34;color:#228b22&#34;&gt;// 等价于
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;a.pipe(b)
b.pipe(c)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;./stream2.png&#34; alt=&#34;image-20210803164747769&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管道实际上是事件的封装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// stream1一有数据就塞给stream2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;stream1.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, chunk =&amp;gt; {
	stream2.write(chunk)
})
&lt;span style=&#34;color:#228b22&#34;&gt;// stream1停了，就停掉stream2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;stream1.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, () =&amp;gt; {
	stream2.end()
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果需要自定义的方式去使用流的话，那么事件监听是个不错的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14-总结&#34;&gt;1.4 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;流（stream）&lt;/code&gt;是一种&lt;strong&gt;在 Node.js 中处理流式数据的抽象接口&lt;/strong&gt;。 stream 模块提供了一些基础的 API，用于构建实现了流接口的对象。&lt;/li&gt;
&lt;li&gt;Node.js 提供了多种流对象。 例如，发送到 HTTP 服务器的请求和 process.stdout 都是流的实例。&lt;/li&gt;
&lt;li&gt;优势：
&lt;ul&gt;
&lt;li&gt;非阻塞式的数据处理方式可提升效率&lt;/li&gt;
&lt;li&gt;chunk数据分块可节省内存&lt;/li&gt;
&lt;li&gt;管道可提升扩展性，方便组合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-stream对象的原型链&#34;&gt;2 Stream对象的原型链&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log(createReafStream(path))&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;自身属性：由&lt;code&gt;fs.ReadStream&lt;/code&gt;构造&lt;/li&gt;
&lt;li&gt;原型：&lt;code&gt;stream.Readable.prototype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二级原型：&lt;code&gt;stream.Stream.prototype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;三级原型：&lt;code&gt;events.EventEmitter.prototype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;四级原型：&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stream对象都继承了&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-支持的事件和方法&#34;&gt;3 支持的事件和方法&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;./stream3.png&#34; alt=&#34;image-20210803164814707&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt;事件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;stream.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, chunk =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;读取了一次数据&amp;#39;&lt;/span&gt;)
	console.log(chunk)&lt;span style=&#34;color:#228b22&#34;&gt;// 每次读取的数据片段（Buffer二进制）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;事件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;stream.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, () =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;数据读完了&amp;#39;&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;error事件：文件丢失，文件权限问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**&lt;code&gt;drain&lt;/code&gt;**事件：之前拥堵的水流现在已经干涸了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当写的速度远远小于读的速度时，数据在管道中会出现拥堵的现象&lt;/li&gt;
&lt;li&gt;面试常考&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cork()&lt;/code&gt;：强制把所有写入的数据都缓冲到内存中，用到再学&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-stream分类&#34;&gt;4 Stream分类&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Readable&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Writable&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Duplex&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可读可写（双向）默认情况下，读和写是两条互相独立的通道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Transform&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可读可写（变化）例如babel，写es6，读到es5，流相当于转换器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;./stream4.png&#34; alt=&#34;image-20210803171028687&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-readable和writable的特点&#34;&gt;5 Readable和Writable的特点&lt;/h1&gt;
&lt;h2 id=&#34;51-readable-stream&#34;&gt;5.1 Readable Stream&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静止态paused和流动态flowing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认处于paused态&lt;/li&gt;
&lt;li&gt;添加data事件监听（或pipe），就变为flowing态&lt;/li&gt;
&lt;li&gt;删除data事件监听（或pipe），就变为paused态&lt;/li&gt;
&lt;li&gt;pause()可以将流变为paused&lt;/li&gt;
&lt;li&gt;resume()可以将它变为flowing&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;stream.pipe(reponse)
stream.pause()&lt;span style=&#34;color:#228b22&#34;&gt;// 静止态
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;setTimeOut(() =&amp;gt; {
	stream.resume()&lt;span style=&#34;color:#228b22&#34;&gt;// 3s后恢复为流动态
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}, &lt;span style=&#34;color:#b452cd&#34;&gt;3000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;52-writable-stream&#34;&gt;5.2 Writable Stream&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;drain流干了事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表示可以加点水了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们调用stream.write(chunk)的时候，可能会得到false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;false的意思就是写的太频繁了，数据积压了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个时候我们就不能再write了，要监听drain&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等drain事件触发了，我们才能继续write&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/stream.html#stream_event_drain&#34;&gt;https://nodejs.org/api/stream.html#stream_event_drain&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fs = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; writeOneMillionTimes(writer, data) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;1000000&lt;/span&gt;
    write()

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; write() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; ok = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//默认可以写
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt; {
            i--
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i === &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 最后一次写
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                writer.write(data)
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 如果i不为0，则说明还继续写
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#228b22&#34;&gt;// 向writer中写数据的同时，把值给ok，进入下一次判断
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                ok = writer.write(data)
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (ok === &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;) {
                    console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;不能再写了&amp;#39;&lt;/span&gt;)
                }
            }
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ok)

        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果ok不为true（写不进去值了）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 就监听writer的drain事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            writer.once(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;drain&amp;#39;&lt;/span&gt;, () =&amp;gt; {
                console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;干涸了，可以写了&amp;#39;&lt;/span&gt;)
                &lt;span style=&#34;color:#228b22&#34;&gt;// 如果drain事件触发了，则继续写
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                write()
            })
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; writer = fs.createWriteStream(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./big_file.txt&amp;#39;&lt;/span&gt;)

writeOneMillionTimes(writer, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;finish事件
&lt;ul&gt;
&lt;li&gt;调用stream.end()之后，触发finish事件&lt;/li&gt;
&lt;li&gt;缓冲区数据都已经传给底层系统之后，触发finish事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-创建流&#34;&gt;6 创建流&lt;/h1&gt;
&lt;h2 id=&#34;61-创建writable-stream&#34;&gt;6.1 创建Writable Stream&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Writable } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; outStream = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Writable({
    write(chunk, encoding, callback) {
        console.log(chunk.toString())
        callback()
    }
})

&lt;span style=&#34;color:#228b22&#34;&gt;// process.stdin是一个用户输入stream
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;process.stdin.pipe(outStream)
&lt;span style=&#34;color:#228b22&#34;&gt;// 用监听事件改写
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// process.stdin.on(&amp;#39;data&amp;#39;, chunk =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     outStream.write(chunk)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// })
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;62-创建readable-stream&#34;&gt;6.2 创建Readable Stream&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Readable } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; inStream = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Readable()

inStream.push(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ABCDEFGH&amp;#34;&lt;/span&gt;)
inStream.push(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;IJKLMNOP&amp;#39;&lt;/span&gt;)
inStream.push(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;// 等同于inStream.pipe(process.stdout)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;inStream.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, chunk =&amp;gt; {
    process.stdout.write(chunk)
    console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;写了一次数据&amp;#39;&lt;/span&gt;)
})

&lt;span style=&#34;color:#228b22&#34;&gt;// 这个流是先推再读 不管读没读 都推进去了 不推荐 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Readable } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; inStream = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Readable({
    read(size) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;char&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;String&lt;/span&gt;.fromCharCode(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.currentCharCode++)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.push(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;char&lt;/span&gt;)
        console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;`推了&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.currentCharCode &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;90&lt;/span&gt;) {&lt;span style=&#34;color:#228b22&#34;&gt;// Z
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.push(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
        }
    }
})

inStream.currentCharCode = &lt;span style=&#34;color:#b452cd&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// A
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
inStream.pipe(process.stdout)&lt;span style=&#34;color:#228b22&#34;&gt;// d
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;63-创建duplex流&#34;&gt;6.3 创建duplex流&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Duplex } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stream&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; inoutStream = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Duplex({
	write(chunk, encoding, callback) {
		console.log(chunk.toString());
		callback();
	},
	read(size) {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.push(&lt;span style=&#34;color:#658b00&#34;&gt;String&lt;/span&gt;.fromCharCode(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.currentCharCode++));
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.currentCharCode &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;90&lt;/span&gt;) {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.push(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
		}
	}
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;64-创建transfrom流&#34;&gt;6.4 创建transfrom流&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Transform } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stream&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; upperCaseTr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Transform({
	transform(chunk, encoding, callback) {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.push(chunk.toString().toUpperCase());
		callback();
	}
});
&lt;span style=&#34;color:#228b22&#34;&gt;// 将用户输入的字符传到transform流中进行大写处理，再打印输出出来
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;process.stdin.pipe(upperCaseTr).pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内置的transform流（压缩文件）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fs = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fs&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; zlib = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; file = process.argv[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;];&lt;span style=&#34;color:#228b22&#34;&gt;// 获取用户传的第二个参数（路径）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
fs.createReadStream(file)
	&lt;span style=&#34;color:#228b22&#34;&gt;// 每读一点数据，就传给Gzip压缩
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.pipe(zlib.createGzip())
	&lt;span style=&#34;color:#228b22&#34;&gt;// 没完成一次chunk的传输，就打印输出一个&amp;#39;.&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, () =&amp;gt; process.stdout.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;))
	&lt;span style=&#34;color:#228b22&#34;&gt;// 将数据保存在以.gz结尾的文件中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.pipe(fs.createWriteStream(file + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.gz&amp;#34;&lt;/span&gt;))
	&lt;span style=&#34;color:#228b22&#34;&gt;// 传输完成，输出&amp;#39;Done&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;finish&amp;#34;&lt;/span&gt;, () =&amp;gt; console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Done&amp;#34;&lt;/span&gt;));

&lt;span style=&#34;color:#228b22&#34;&gt;// node gzip.js ./big_file.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单独封装transform流&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fs = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fs&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; zlib = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; file = process.argv[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { Transform } = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stream&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; reportProgress = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Transform({
	transform(chunk, encoding, callback) {
      process.stdout.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// this.push(chunk)是一样的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 因为callback总是会运行，所以将chunk写到callback第二个参数，继续传输
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      callback(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, chunk);&lt;span style=&#34;color:#228b22&#34;&gt;// 第一个参数表示当出错的时候传null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	}
});
fs.createReadStream(file)
	.pipe(zlib.createGzip())
	&lt;span style=&#34;color:#228b22&#34;&gt;// 说明，我们可以对数据进行无限次的处理，只需用pipe连接一个transform流即可
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.pipe(reportProgress)
	.pipe(fs.createWriteStream(file + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.gz&amp;#34;&lt;/span&gt;))
	.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;finish&amp;#34;&lt;/span&gt;, () =&amp;gt; console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Done&amp;#34;&lt;/span&gt;));

&lt;span style=&#34;color:#228b22&#34;&gt;// node gzip.js ./big_file.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加密并压缩&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入node自带的crypto加密模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; crypto = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;crypto&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// ..
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;fs.createReadStream(file)
	&lt;span style=&#34;color:#228b22&#34;&gt;// 使用crypto对文件使用aes192方式加密
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.pipe(crypto.createCipher(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;aes192&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;))
	&lt;span style=&#34;color:#228b22&#34;&gt;// 注意应先加密再压缩
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.pipe(zlib.createGzip())
	.pipe(reportProgress)
	.pipe(fs.createWriteStream(file + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.gz&amp;#34;&lt;/span&gt;))
	.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;finish&amp;#34;&lt;/span&gt;, () =&amp;gt; console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Done&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;7-nodejs中的stream&#34;&gt;7 Node.js中的Stream&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;./stream5.png&#34; alt=&#34;image-20210803215605939&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;8-参考&#34;&gt;8 参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Node&amp;rsquo;s Stream&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://jscomplete.com/learn/node-beyond-basics/node-streams&#34;&gt;https://jscomplete.com/learn/node-beyond-basics/node-streams&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.js Stream 文档&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://nodejs.cn/api/stream.html&#34;&gt;http://nodejs.cn/api/stream.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面试&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.im/post/5b421b5ee51d45198651159b&#34;&gt;https://juejin.im/post/5b421b5ee51d45198651159b&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
    
        <item>
        <title>Object常用方法整理</title>
        <link>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
        <pubDate>Wed, 07 Jul 2021 17:30:59 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ -&lt;h1 id=&#34;objectassign&#34;&gt;Object.assign()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于将所有可枚举属性（属性能否被for…in查找遍历到）的值从一个或多个源对象复制到目标对象，返回目标对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign(target, ...sources)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;target&lt;/code&gt;目标对象；&lt;code&gt;source&lt;/code&gt;源对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖，后面的源对象的属性将类似地覆盖前面的源对象的属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只会拷贝源对象自身的并且可枚举的属性到目标对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了将属性定义（包括其可枚举性）复制到原型，应使用&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;和&lt;code&gt;Object.defineProperty()&lt;/code&gt;。深拷贝？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 复制一个对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; copy = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, obj);
console.log(copy); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1 }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 合并对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o1 = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o2 = { b: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o3 = { c: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; };

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign(o1, o2, o3);
console.log(obj); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: 2, c: 3 }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(o1);  &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: 2, c: 3 }, 注意目标对象自身也会改变。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 合并具有相同属性的对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o1 = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, b: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, c: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o2 = { b: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, c: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; o3 = { c: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; };

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, o1, o2, o3);
console.log(obj); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: 2, c: 3 }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 继承属性和不可枚举属性是不能拷贝的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({foo: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;}, { &lt;span style=&#34;color:#228b22&#34;&gt;// foo 是个继承属性。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    bar: {
        value: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// bar 是个不可枚举属性。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    },
    baz: {
        value: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,
        enumerable: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// baz 是个自身可枚举属性。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
});

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; copy = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, obj);
console.log(copy); &lt;span style=&#34;color:#228b22&#34;&gt;// { baz: 3 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深拷贝问题&lt;/p&gt;
&lt;p&gt;针对深拷贝，需要使用其他办法，因为 &lt;code&gt;Object.assign()&lt;/code&gt;拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; obj = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; , b: { c: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;}}; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; copy = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.assign({}, obj1); 
console.log(JSON.stringify(obj2)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 0, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 改变源对象属性值，拷贝的属性值不变
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;obj.a = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; 
console.log(JSON.stringify(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(JSON.stringify(copy)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 0, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 改变拷贝的属性值，也不会改变源对象的属性值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;copy.a = &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;; 
console.log(JSON.stringify(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: { c: 0}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(JSON.stringify(copy)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 2, b: { c: 0}}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 改变拷贝对象中的深层属性值，将会彻底改变该属性值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;copy.b.c = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;; 
console.log(JSON.stringify(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 1, b: { c: 3}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(JSON.stringify(copy)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 2, b: { c: 3}} 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// Deep Clone 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;obj = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; , b: { c: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;}}; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; depClone = JSON.parse(JSON.stringify(obj1)); 
obj.a = &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;; 
obj.b.c = &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;; 
console.log(JSON.stringify(depClone)); &lt;span style=&#34;color:#228b22&#34;&gt;// { a: 0, b: { c: 0}}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectis&#34;&gt;Object.is()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断两个值是否是相同的值，返回布尔值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(value1, value2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在以下情况下，返回&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个值均为&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;两个值都是由相同个字符按照相同顺序组成的字符串&lt;/li&gt;
&lt;li&gt;两个值都指向同一个对象&lt;/li&gt;
&lt;li&gt;两个值都是数字并且
&lt;ul&gt;
&lt;li&gt;都是正零&lt;code&gt;+0&lt;/code&gt;或负零&lt;code&gt;-0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;都是&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;都是除零和&lt;code&gt;NaN&lt;/code&gt;外的其它同一个数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与&lt;code&gt;==&lt;/code&gt;运算符的区别&lt;/p&gt;
&lt;p&gt;这种相等性判断逻辑和传统的 &lt;code&gt;==&lt;/code&gt;运算不同，&lt;code&gt;==&lt;/code&gt;运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 &lt;code&gt;&amp;quot;&amp;quot; == false&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的现象），但 &lt;code&gt;Object.is&lt;/code&gt; 不会做这种类型转换。&lt;code&gt;Object.is()&lt;/code&gt;比较严格。&lt;/p&gt;
&lt;p&gt;这与&lt;code&gt;===&lt;/code&gt;运算符的判定方式也不一样。&lt;code&gt;===&lt;/code&gt;运算符（和&lt;code&gt;==&lt;/code&gt;运算符）将数字值 &lt;code&gt;-0&lt;/code&gt; 和 &lt;code&gt;+0&lt;/code&gt; 视为相等，并认为 &lt;code&gt;Number.NaN&lt;/code&gt;不等于&lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;);     &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#658b00&#34;&gt;window&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;window&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;);     &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is([], []);           &lt;span style=&#34;color:#228b22&#34;&gt;// false 与两个对象同理 指向不同
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; foo = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; bar = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; };
&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(foo, foo);         &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(foo, bar);         &lt;span style=&#34;color:#228b22&#34;&gt;// false 指向不同
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);       &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 特例
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);            &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, +&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);            &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(-&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);           &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.is(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectprototypehasownproperty&#34;&gt;Object.prototype.hasOwnProperty()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断对象自身属性中是否具有指定属性（是否有指定的键）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;obj.hasOwnProperty(prop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;prop&lt;/code&gt;要检测的属性的&lt;code&gt;String&lt;/code&gt;字符串形式表示的名称，或者&lt;code&gt;Symbol&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有继承了&lt;code&gt;Object&lt;/code&gt;的对象都会继承到 &lt;code&gt;hasOwnProperty&lt;/code&gt; 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和&lt;code&gt;in&lt;/code&gt;运算符不同，该方法会忽略掉那些从原型链上继承到的属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即使属性的值是 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt;，只要属性存在，&lt;code&gt;hasOwnProperty&lt;/code&gt; 依旧会返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;o = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;();
o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;prop&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o.prop = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;;
o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;prop&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 对待自身属性和继承属性的区别：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;();
o.prop = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;;
o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;prop&amp;#39;&lt;/span&gt;);             &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;toString&amp;#39;&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;o.hasOwnProperty(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hasOwnProperty&amp;#39;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;// 返回 false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectkeys&#34;&gt;Object.keys()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用&lt;code&gt;for...in&lt;/code&gt;循环遍历该对象时返回的顺序一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个表示给定对象的所有可枚举属性的字符串数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对于简单的数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(arr)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// key的顺序随机的对象，会排序后返回
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; anObj = { &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(anObj)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;2&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;100&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// getFoo是一个不可枚举的属性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; myObj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({}, {
  getFoo: {
    value: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.foo; }
  } 
});
myObj.foo = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;// myObj = { foo: 1, getFoo: funtion }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.keys(myObj)); &lt;span style=&#34;color:#228b22&#34;&gt;// console: [&amp;#39;foo&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectgetownpropertynames&#34;&gt;Object.getOwnPropertyNames()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;与Object.keys()方法类似，但更强大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对于简单的数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;];
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(arr).sort()); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;length&amp;#34;] // 居然还有length...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;};
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj).sort()); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 使用Array.forEach输出属性名和属性值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj).forEach(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt;(val, idx, array) {
  console.log(val + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; -&amp;gt; &amp;#34;&lt;/span&gt; + obj[val]);
});
&lt;span style=&#34;color:#228b22&#34;&gt;// 输出
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 0 -&amp;gt; a
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 1 -&amp;gt; b
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 2 -&amp;gt; c
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;//不可枚举属性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; my_obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({}, {
  getFoo: {
    value: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.foo; },
    enumerable: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
  }
});
my_obj.foo = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;

console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(my_obj).sort()); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;foo&amp;#34;, &amp;#34;getFoo&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectvalues&#34;&gt;Object.values()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;会返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用&lt;code&gt;for...in&lt;/code&gt;循环的顺序相同（区别在于&lt;code&gt;for...in&lt;/code&gt;循环枚举原型链中的属性）。与&lt;code&gt;Object.keys()&lt;/code&gt;十分相似。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对于一般对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { foo: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;, baz: &lt;span style=&#34;color:#b452cd&#34;&gt;42&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;bar&amp;#39;, 42]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 对于类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 键顺序随机的类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 键的数字顺序决定返回值在数组中的顺序 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; an_obj = { &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; };
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(an_obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// getFoo是一个不可枚举属性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; my_obj = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create({}, { getFoo: { value: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.foo; } } });
my_obj.foo = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;;
console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(my_obj)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;bar&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 非对象作为参数将被强制转换为对象 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.values(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;f&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;o&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objectgetownpropertydescriptor&#34;&gt;Object.getOwnPropertyDescriptor()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法返回指定对象中的一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(obj, prop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;obj&lt;/code&gt;需要查找的目标对象；&lt;code&gt;prop&lt;/code&gt;目标对象内的属性名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Javascript 中， &lt;code&gt;属性&lt;/code&gt;由一个字符串类型的“名字”（name）和一个“属性描述符”（property descriptor）对象构成。一个属性描述符是一个记录，由下面属性当中的某些组成的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;：该属性的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writable&lt;/code&gt;：当且仅当属性的值可以被改变时为&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;：获取该属性的访问器函数（getter）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;：获取该属性的设置器函数（setter）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configurable&lt;/code&gt;：当且仅当指定对象的属性描述可以被改变或者属性可被删除时，为&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eunmerable&lt;/code&gt;：当且仅当指定对象的属性可以被枚举出时，为&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; o = { get foo() { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;17&lt;/span&gt;; } };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; d = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(o, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// d {
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   configurable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   enumerable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   get: /*the getter function*/,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   set: undefined
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// }
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; o = { bar: &lt;span style=&#34;color:#b452cd&#34;&gt;42&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; d = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(o, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// d {
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   configurable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   enumerable: true,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   value: 42,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//   writable: true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ - </description>
        </item>
    
    
    
        <item>
        <title>String常用方法整理</title>
        <link>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 05 Jul 2021 13:29:15 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ -&lt;h1 id=&#34;stringprototypematch&#34;&gt;String.prototype.match()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;根据传入的正则表达式的检索字符串并返回结果&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.match(regexp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypesearch&#34;&gt;String.prototype.search()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;根据传入的正则表达式寻找符合的字符位置&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.search(regexp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果匹配，则返回首次匹配项的索引；反之返回&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello World&amp;#39;&lt;/span&gt;
str.search(&lt;span style=&#34;color:#1c7e71&#34;&gt;/[A-Z]/g&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 6
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.search(&lt;span style=&#34;color:#1c7e71&#34;&gt;/[.]/g&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// -1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypechatat&#34;&gt;String.prototype.chatAt()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;从一个字符串中返回指定index的字符&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.chartAt(index)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若没有提供index，则默认使用0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt;
str.charAt(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;B&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeindexof&#34;&gt;String.prototype.indexOf()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询字符串对象中第一次出现指定值的索引&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str.indexOf(searchValue, fromIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;fromIndex&lt;/code&gt;可选，表示开始查找的位置，默认为0，若指定为负数，则等价于传入0；若大于&lt;code&gt;str.length&lt;/code&gt;，则必反回&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;indexOf&lt;/code&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若传入的字符串为空，返回值则取决于&lt;code&gt;fromIndex&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 9
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 11 (str.length)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 检测是否存在某字符串
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 6
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 使用indexOf统计一个字符串中某个字母出现的次数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Hello,my name is gsemir.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; count = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; pos = str.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(pos !== -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;){
	count ++
	pos = str.indexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, pos+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
}
console.log(count)&lt;span style=&#34;color:#228b22&#34;&gt;// 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypelastindexof&#34;&gt;String.prototype.lastIndexOf()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回指定值最后一次出现的索引，没找到返回&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.lastIndexOf(searchStr, fromIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;fromIndex&lt;/code&gt;可选，默认为无穷大，表示从&lt;code&gt;fromIndex&lt;/code&gt;的位置向左回向查找&lt;/p&gt;
&lt;p&gt;若&lt;code&gt;fromIndex&amp;lt;0&lt;/code&gt;，则等同于&lt;code&gt;fromIndex==0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此方法区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;.lastIndexOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 6 可以用这个获取字符串长度哦
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeconcat&#34;&gt;String.prototype.concat()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将字符串连接合并&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.concat(str2,str3,...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个新字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;HELLO&amp;#39;&lt;/span&gt;
str.concat(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// HELLO WORLD
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototyperepeat&#34;&gt;String.prototype.repeat()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指定次数复制字符串&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.repeat(count)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;.repeat(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abcabc&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeendswith&#34;&gt;String.prototype.endsWith()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判断字符串是否是以指定字符串结尾的&lt;/strong&gt;，&lt;strong&gt;返回&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.endsWith(searchStr, length)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;length&lt;/code&gt;可选，作为str的长度，默认值为&lt;code&gt;str.length&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
str.endsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.endsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.endsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;WORLD&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypestartswith&#34;&gt;String.prototype.startsWith()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判断字符串是否是以指定字符串开头的&lt;/strong&gt;，&lt;strong&gt;返回&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.startsWith(searchStr, position)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;position&lt;/code&gt;可选，开始搜索的位置，默认值为&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
str.startsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.startsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.startsWith(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;HELLO&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeincludes&#34;&gt;String.prototype.includes()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判断指定字符串是否包含在另一个字符串中&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.includes(searchStr, position)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;position&lt;/code&gt;可选，搜寻的起始索引，默认0&lt;/p&gt;
&lt;p&gt;区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello, my name is gsemir&amp;#39;&lt;/span&gt;
str.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;my&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;MY&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypevalueof&#34;&gt;String.prototype.valueOf()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回一个String对象的原始值，等同于&lt;code&gt;String.prototype.toString()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; x = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;)
x.valueOf()&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Hello World&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypetostring&#34;&gt;String.prototype.toString()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;万物皆可变成String，如果对象是字符串对象，则返回结果与&lt;code&gt;.valueOf()&lt;/code&gt;一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypesubstring&#34;&gt;String.prototype.subString()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;截取并返回字符串中的一部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.subString(startIndex, endIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;endIndex&lt;/code&gt;可选，默认为&lt;code&gt;str.length+1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;结果中不包含&lt;code&gt;endIndex&lt;/code&gt;处的字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若&lt;code&gt;startIndex&lt;/code&gt;大于&lt;code&gt;endIndex&lt;/code&gt;，则相当于两数调换&lt;/li&gt;
&lt;li&gt;若两数相等，返回空字符串&lt;/li&gt;
&lt;li&gt;若任一参数小于0，则被当作0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;
str.subString(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abc&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.subString(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abc&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.subString(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;abc&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypeslice&#34;&gt;String.prototype.slice()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提取字符串某一部分&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;str.slice(beginIndex,endIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;beginIndex&lt;/code&gt;若为&lt;code&gt;-3&lt;/code&gt;，则看作是&lt;code&gt;strLength - 3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;endIndex&lt;/code&gt;可选，若为空，则是为末尾；若为&lt;code&gt;-3&lt;/code&gt;，则看作是&lt;code&gt;strLength - 3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个从原字符串提取出来的新字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ABCDEFGHIJKLMNOP&amp;#39;&lt;/span&gt;
str.slice(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;EFGHIJKLMN&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.slice(&lt;span style=&#34;color:#b452cd&#34;&gt;33&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypereplace&#34;&gt;String.prototype.replace()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;内容过多&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypesplit&#34;&gt;String.prototype.split()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用指定的分割字符将一个String对象分割成子字符串数组&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ABCDEFGHIJKLMNOP&amp;#39;&lt;/span&gt;
str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;E&amp;#34;, &amp;#34;F&amp;#34;, &amp;#34;G&amp;#34;, &amp;#34;H&amp;#34;, &amp;#34;I&amp;#34;, &amp;#34;J&amp;#34;, &amp;#34;K&amp;#34;, &amp;#34;L&amp;#34;, &amp;#34;M&amp;#34;, &amp;#34;N&amp;#34;, &amp;#34;O&amp;#34;, &amp;#34;P&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;ABCDEFGHIJKLMNOP&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;str.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;ABCDE&amp;#34;, &amp;#34;GHIJKLMNOP&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringprototypetrim&#34;&gt;String.prototype.trim()&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除两端空白字符&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str.trim()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回一个两端去掉空白的新字符串，不影响原字符串本身&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; originStr = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; foo &amp;#39;&lt;/span&gt;
originStr.trim()&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#39;foo&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/ - </description>
        </item>
    
    
    
        <item>
        <title>数据库基础</title>
        <link>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Mon, 05 Jul 2021 08:57:20 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ -&lt;h1 id=&#34;1-第一二三范式&#34;&gt;1 第一二三范式&lt;/h1&gt;
&lt;h2 id=&#34;1-第一范式-1nf&#34;&gt;1 第一范式 1NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：字段不可再分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：存储体检者的双眼视力，应分为左眼视力和右眼视力两个字段&lt;/p&gt;
&lt;p&gt;即user表里应有&lt;code&gt;left_eye&lt;/code&gt;和&lt;code&gt;right_eye&lt;/code&gt;，而不能存为一个字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./sjk1.png&#34; alt=&#34;image-20210705105007465&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	这是一个学生选课表，没有违反第一范式，但是存在如下问题：&lt;/p&gt;
&lt;p&gt;​	数据冗余、创建系时插入异常、删除学生会导致系消失、学生转系时改动多处&lt;/p&gt;
&lt;p&gt;​	结论：第一范式不够强&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-第二范式-2nf&#34;&gt;2 第二范式 2NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在1NF的基础上，要有键（键可由多个字段组合）&lt;/li&gt;
&lt;li&gt;所有字段必须分别&lt;strong&gt;完全依赖&lt;/strong&gt;于键&lt;/li&gt;
&lt;li&gt;如果键是多个字段组合，则&lt;strong&gt;不允许部分依赖&lt;/strong&gt;于该键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖关系&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给出键，就能唯一确定字段的值&lt;/li&gt;
&lt;li&gt;如给出学号，就能唯一确定姓名，反之则不行&lt;/li&gt;
&lt;li&gt;则称姓名依赖于学号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不满足第二范式的地方&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上表的键为（学号、课名）&lt;/li&gt;
&lt;li&gt;但存在部份依赖：姓名依赖与学号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;改进&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选课表（&lt;strong&gt;学号&lt;/strong&gt;，&lt;strong&gt;课名&lt;/strong&gt;，分数）&lt;/li&gt;
&lt;li&gt;学生表（&lt;strong&gt;学号&lt;/strong&gt;，姓名，系名，系主任）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./sjk2.png&#34; alt=&#34;image-20210705105710705&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-第三范式-3nf&#34;&gt;3 第三范式 3NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个表里不能有两层依赖&lt;/li&gt;
&lt;li&gt;给出学号，就能确定系名——系名依赖于学号&lt;/li&gt;
&lt;li&gt;给出系名，就能确定系主任——系主任依赖与系名&lt;/li&gt;
&lt;li&gt;所以，系主任&lt;strong&gt;间接依赖&lt;/strong&gt;于学号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把系名和系主任单独建表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./sjk3.png&#34; alt=&#34;image-20210705110014247&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-bc范式&#34;&gt;4 BC范式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;键中的属性也不存在间接依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-设计表&#34;&gt;2 设计表&lt;/h1&gt;
&lt;h2 id=&#34;1-数据库设计经验&#34;&gt;1 数据库设计经验&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高内聚&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把相关字段放到一起，不相关的单独建表&lt;/li&gt;
&lt;li&gt;如果两个字段能够单独建表，那就单独建表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;低耦合&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个表之间有弱关系
&lt;ul&gt;
&lt;li&gt;一对一可放在一个表，也可两个表加外键&lt;/li&gt;
&lt;li&gt;一对多一般用外键&lt;/li&gt;
&lt;li&gt;多对多一般建中间表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-一对一&#34;&gt;2 一对一&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假设一个学生只能加入一个班级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把班级放在学生表中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学生id：1001，姓名：小明，班级id：4002&lt;/li&gt;
&lt;li&gt;班级id：4002，名称：入门1班&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以单独建立关联表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学生id：1001，姓名：小明&lt;/li&gt;
&lt;li&gt;学生班级关联表：id：2003，学生id：1001，班级id：4002&lt;/li&gt;
&lt;li&gt;班级id：4002，名称：入门1班&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-一对多&#34;&gt;3 一对多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;假设一个作者能写多本书&lt;/li&gt;
&lt;li&gt;可以把书放到作者表里
&lt;ul&gt;
&lt;li&gt;某些DBMS支持数组，可以存两个id到一个字段&lt;/li&gt;
&lt;li&gt;作者id：1001，姓名：大牛，books：[2001，2002]&lt;/li&gt;
&lt;li&gt;如果不支持数组，就不能这样做了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单独建立关系表（推荐）
&lt;ul&gt;
&lt;li&gt;作者id：1001，姓名：大牛&lt;/li&gt;
&lt;li&gt;出版图书表：：id：2001，作者id：1001，书id：4002，出版社id：xxx&lt;/li&gt;
&lt;li&gt;出版图书表：：id：2002，作者id：1001，书id：4003，出版社id：xxx&lt;/li&gt;
&lt;li&gt;书id：4002，名称：js入门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-多对多&#34;&gt;4 多对多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;假设一个学生可以加入多个班级，每个班级也能有多个学生&lt;/li&gt;
&lt;li&gt;把班级放到学生表中：DBMS支持数组的话可以，否则不可以&lt;/li&gt;
&lt;li&gt;单独建立关系表（推荐）：
&lt;ul&gt;
&lt;li&gt;学生id：1001，姓名：小明&lt;/li&gt;
&lt;li&gt;学生班级关系表：id：2001，学生id：1001，班级id：4002，有效期：xxx&lt;/li&gt;
&lt;li&gt;学生班级关系表：id：2002，学生id：1001，班级id：4003，有效期：xxx&lt;/li&gt;
&lt;li&gt;班级id：4002，名称：入门班&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-什么时候建关联表&#34;&gt;5 什么时候建关联表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当关联自身存在属性时
&lt;ul&gt;
&lt;li&gt;比如关联的有效期，有效期为一年&lt;/li&gt;
&lt;li&gt;比如关联的级别，店铺会员分为vip1-6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-join把表连接起来&#34;&gt;3 JOIN把表连接起来&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;连接表
&lt;ul&gt;
&lt;li&gt;inner join&lt;/li&gt;
&lt;li&gt;left join：会保留右边的null，以保证左边都显示&lt;/li&gt;
&lt;li&gt;right join：会保留左边的null，以保证右边都显示&lt;/li&gt;
&lt;li&gt;full outer join：保留两边的null，以保证两边都显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看图巧记&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/29234064&#34;&gt;图解 SQL 里的各种 JOIN - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./sjk4.png&#34; alt=&#34;image-20210706153805324&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A.PK&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A_PK,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B.PK&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B_PK,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;A.VALUE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A_VALUE,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B.VALUE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B_VALUE&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Table_AA&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INNER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;JOIN&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Table_BB&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;A.PK&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;B.PK&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;尝试&lt;/strong&gt;（以inner join为例）：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;用&lt;/span&gt;docker启动mysql&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，或者重新&lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;run一遍&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;start&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mysql1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;进入&lt;/span&gt;mysql&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;exec&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-it&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mysql1&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;mysql&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-u&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;root&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-p&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;123456&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建数据库&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;db1&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;character&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8mb4&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;collate&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8mb4_unicode_ci;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;databases&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;db1;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建表&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;users&lt;/span&gt;(id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;serial,name&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;text&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;staffs&lt;/span&gt;(id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;serial,name&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;text&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;orders&lt;/span&gt;(id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;serial,user_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bigint&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;,staff_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bigint&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;创建记录&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(name)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;XiaoMing&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;XiaoMing&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;staffs&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(name)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;XiaoHong&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;XiaoHong&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+----------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(user_id,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;staff_id,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+---------+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;user_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;staff_id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+---------+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----+---------+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;使用&lt;/span&gt;inner&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users.name&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;unname,orders.amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inner&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;orders&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users.id=orders.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;user&lt;/span&gt;.id;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;//&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;得到&lt;/span&gt;XiaoMing&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;uname&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amount&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;XiaoMing&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;+----------+--------+&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4-缓存字段&#34;&gt;4 缓存字段&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假设一个博客blog包含多个评论comments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何获取博客的评论数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;count&lt;/span&gt;(id)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;comments&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;blog_id=&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的办法是在blog表中添加&lt;code&gt;comment_count&lt;/code&gt;字段，每次添加comment则+1，每次删除comment则-1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样就可以快速获取博客的评论数，约定缓存字段均使用&lt;code&gt;_count&lt;/code&gt;结尾&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-事务&#34;&gt;5 事务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有些操作必须一次完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户评论之后，&lt;strong&gt;首先&lt;/strong&gt;要在comments表中新增记录，&lt;strong&gt;其次&lt;/strong&gt;在blogs表将对应的comment_count+1&lt;/li&gt;
&lt;li&gt;如果第一步执行了，第二步没有执行，那么数据就乱了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用事务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/mysql/mysql-transaction.html&#34;&gt;MySQL 事务 | 菜鸟教程 (runoob.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-mysql储存引擎&#34;&gt;6 MySQL储存引擎&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;engines;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;innoDB-默认，是事务型数据库的首选，支持事务，遵循ACID、支持行锁和外键；&lt;/li&gt;
&lt;li&gt;MyISAM-拥有较高的插入查询速度，但不支持事务&lt;/li&gt;
&lt;li&gt;Memory-内存中，快速访问数据&lt;/li&gt;
&lt;li&gt;Archive-只支持insert和select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;7-索引&#34;&gt;7 索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;unique&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;index1&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users(name(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;));&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;users;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/mysql/mysql-index.html&#34;&gt;MySQL 索引 | 菜鸟教程 (runoob.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用途&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高搜索效率&lt;/li&gt;
&lt;li&gt;where xxx &amp;gt; 100 那么我们可以创建xxx的索引&lt;/li&gt;
&lt;li&gt;where xxx &amp;gt; 100 and yyy &amp;gt; 200，可以创建xxx，yyy的索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ - </description>
        </item>
    
    
  </channel>
</rss> 