<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dva on GSemir Blog</title>
    <link>https://gsemir0418.github.io/tags/dva/</link>
    <description>Recent content in dva on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Sep 2021 16:12:05 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/tags/dva/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dva数据流</title>
      <link>https://gsemir0418.github.io/posts/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</link>
      <pubDate>Wed, 15 Sep 2021 16:12:05 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</guid>
      <description>1 初识Dva 1.1 定义 dva 首先是一个基于redux和redux-saga的数据流方案，然后为了简化开发体验，dva 还额外内置了react-router和fetch，所以也可以理解为一个轻量级的应用框架。
1.2 Dva数据流概念 数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 dispatch 发起一个 action，如果是同步行为会直接通过 Reducers 改变 State ，如果是异步行为（副作用）会先触发 Effects 然后流向 Reducers 最终改变 State，所以在 dva 中，数据流向非常清晰简明。
1.3 model层重要API  namespace  model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 . 的方式创建多层命名空间。
state  状态初始值
reducers  以 key/value 格式定义 reducer。用于处理同步操作，唯一可以修改 state 的地方。由 action 触发。格式为 (state, action) =&amp;gt; newState 或 [(state, action) =&amp;gt; newState, enhancer]。
effects  以 key/value 格式定义 effect。用于处理异步操作和业务逻辑，不直接修改 state。由 action 触发，可以触发 action，可以和服务器交互，可以获取全局 state 的数据等等。</description>
    </item>
    
  </channel>
</rss>
