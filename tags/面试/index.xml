<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on Even - A super concise theme for Hugo</title>
    <link>https://gsemir0418.github.io/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Apr 2022 14:39:41 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端面试TS</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95ts/</link>
      <pubDate>Fri, 22 Apr 2022 14:39:41 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95ts/</guid>
      <description>1 TS和JS的区别是什么 语法层面 TypeScript = JavaScript + Type （TS是JS的超集） 执行环境层面 浏览器、Node.js可以直接执行JS，但不能执行TS 编译层面 TS</description>
    </item>
    
    <item>
      <title>前端面试工程化</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Fri, 22 Apr 2022 12:20:21 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>1 常见loader和plugin有哪些，二者的区别是什么？ 常见loader babel-loader 把ES6+转义为ES5 ts-loader 把TS编译为JS，并提示类型错误 markdown-loader 把ma</description>
    </item>
    
    <item>
      <title>前端面试React</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95react/</link>
      <pubDate>Thu, 31 Mar 2022 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95react/</guid>
      <description>1 虚拟DOM的原理是什么 1.1 是什么 虚拟DOM就是虚拟节点。React用JS对象来模拟DOM节点，然后将其渲染成真实的DOM节点 1.2 怎么做 模拟（J</description>
    </item>
    
    <item>
      <title>前端面试JS基础</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95js%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 21 Mar 2022 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95js%E5%9F%BA%E7%A1%80/</guid>
      <description>1 JS的数据类型有哪些 8种 数字（number）、字符串（string）、布尔（boolean）、空（null）、未定义（undefined）</description>
    </item>
    
    <item>
      <title>前端面试DOM</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95dom/</link>
      <pubDate>Wed, 16 Mar 2022 14:39:41 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95dom/</guid>
      <description>1 请简述DOM事件模型（DOM Event） 每个事件都先经历从上到下（根元素=&amp;gt;最底层子节点）的捕获阶段，再经历从下到上（最底层子节点=</description>
    </item>
    
    <item>
      <title>前端面试HTTP</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95http/</link>
      <pubDate>Tue, 08 Mar 2022 09:57:38 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95http/</guid>
      <description>1 GET和POST的区别有哪些 1.1 幂等性 首先最根本的不同是语义上的不同，GET是读，POST是写，造成两者幂等性的不同 由于GET是读，POST</description>
    </item>
    
    <item>
      <title>前端面试CSS</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95css/</link>
      <pubDate>Mon, 07 Mar 2022 09:57:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95css/</guid>
      <description>1 BFC是什么 是什么：块级格式化上下文，通俗地讲就是“被隔离的区间”，BFC元素的子元素不会对外面的其他元素产生影响 怎么做： 触发条件： 浮动元</description>
    </item>
    
    <item>
      <title>前端面试HTML</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95html/</link>
      <pubDate>Mon, 07 Mar 2022 09:27:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95html/</guid>
      <description>1 讲讲HTML中的语义化标签 是什么：语义化标签是一种写HTML标签的方法论/方式 怎么做：实现方式是遇到标题就用h1到h6，遇到段落用p，遇到</description>
    </item>
    
    <item>
      <title>CookieFree与CDN</title>
      <link>https://gsemir0418.github.io/post/cookiefree%E4%B8%8Ecdn/</link>
      <pubDate>Sun, 23 Jan 2022 13:50:23 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/cookiefree%E4%B8%8Ecdn/</guid>
      <description>1 资源合并 在浏览器中，针对图标的解决方案按流行时间来排序：CSS Sprites、IconFont、SVG Symbols 1.1 CSS雪碧图 雪碧图的英文是CSS</description>
    </item>
    
    <item>
      <title>多路复用</title>
      <link>https://gsemir0418.github.io/post/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Sun, 23 Jan 2022 09:51:58 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>1 HTTP/2的帧 ​ HTTP/1.1的请求响应过程是基于字符串的，而HTTP/2的请求响应过程是基于帧的。 ​ HTTP/2引入了帧（Frame</description>
    </item>
    
    <item>
      <title>连接复用</title>
      <link>https://gsemir0418.github.io/post/%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Thu, 20 Jan 2022 14:46:29 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/</guid>
      <description>1 DNS预解析 假设index.html的部分代码为： 1 2 &amp;lt;script src=&amp;#34;http://a.com/1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;http://b.com/2.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 那么客户端会对a.com进行DNS的解析，拿到ip后请求1.js，然后再对b</description>
    </item>
    
    <item>
      <title>This</title>
      <link>https://gsemir0418.github.io/post/this/</link>
      <pubDate>Fri, 17 Dec 2021 16:10:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/this/</guid>
      <description>1 隐式this的确定规则 函数的简单调用，this表示window/global对象（严格模式为undefined） fn(1, 2) &amp;lt;=&amp;gt; fn.call(undefined, 1, 2) 通过对象调用方</description>
    </item>
    
    <item>
      <title>JavaScript函数</title>
      <link>https://gsemir0418.github.io/post/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 15 Dec 2021 20:40:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</guid>
      <description>1 函数和闭包 javascript中全部函数均有返回值 对象中的函数叫做方法 1.1 函数的环境 函数返回值的影响因素 函数调用时输入的参数 params 函数定义时的环</description>
    </item>
    
    <item>
      <title>async/await全解</title>
      <link>https://gsemir0418.github.io/post/asyncawait/</link>
      <pubDate>Wed, 15 Dec 2021 14:31:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/asyncawait/</guid>
      <description></description>
    </item>
    
    <item>
      <title>代码优化</title>
      <link>https://gsemir0418.github.io/post/%E4%BB%A3%E7%A0%81%E5%86%99%E6%B3%95%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 11 Nov 2021 16:23:10 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E4%BB%A3%E7%A0%81%E5%86%99%E6%B3%95%E4%BC%98%E5%8C%96/</guid>
      <description>1 CSS和JS的位置 考虑到HTML、CSS、JS三者存在互相堵塞的情况（详见“浏览器渲染原理”）： CSS建议放在head标签中： 由于CSS的</description>
    </item>
    
    <item>
      <title>缓存与内容协商</title>
      <link>https://gsemir0418.github.io/post/%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/</link>
      <pubDate>Thu, 11 Nov 2021 13:09:45 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/</guid>
      <description>缓存和内容协商又称强缓存（有效期内的缓存）和弱缓存（服务器和浏览器商量是否能缓存的方案） 1 HTTP缓存 例如我们访问百度，百度会发送html文</description>
    </item>
    
    <item>
      <title>浏览器渲染原理</title>
      <link>https://gsemir0418.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 11 Nov 2021 09:07:24 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</guid>
      <description>1 HTML、CSS和JS的加载过程 整体过程包括解析HTML（生成DOM树）、下载CSS、解析CSS（生成CSS树）、下载JS与执行JS五部分</description>
    </item>
    
    <item>
      <title>BFC</title>
      <link>https://gsemir0418.github.io/post/bfc/</link>
      <pubDate>Wed, 10 Nov 2021 19:45:19 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/bfc/</guid>
      <description>1 BFC 1.1 BFC是什么 常见定位方案 普通流：元素按照其在HTML中的先后位置至上而下布局，行内元素由左至右排列，占满一行后换行，块级元素占满整行。</description>
    </item>
    
    <item>
      <title>DNS、TCP与HTTP</title>
      <link>https://gsemir0418.github.io/post/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 02 Sep 2021 14:34:53 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9F%BA%E7%A1%80/</guid>
      <description>1 DNS与TCP 1.1 DNS与hosts DNS（Domain Name System）：域名系统 当我们在地址栏属于域名并访问时，会先在浏览器缓存中找对应域</description>
    </item>
    
  </channel>
</rss>
