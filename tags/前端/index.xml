<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on GSemir Blog</title>
    <link>https://gsemir0418.github.io/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Aug 2021 22:51:51 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>umi&#43;AntdPro实战总结</title>
      <link>https://gsemir0418.github.io/posts/antdpro&#43;umi%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 22 Aug 2021 22:51:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/antdpro&#43;umi%E5%AE%9E%E6%88%98/</guid>
      <description>项目总结</description>
    </item>
    
    <item>
      <title>useState原理</title>
      <link>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 07 Aug 2021 22:15:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</guid>
      <description>1 useState简单实现 1.1 示例  点击按钮，结果+1  import React from &amp;#34;react&amp;#34;; import ReactDOM from &amp;#34;react-dom&amp;#34;; const rootElement = document.getElementById(&amp;#34;root&amp;#34;); function App() { const [n, setN] = React.useState(0); return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{n}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setN(n + 1)}&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; ); } ReactDOM.render(&amp;lt;App /&amp;gt;, rootElement);  运行过程分析  首次render&amp;lt;App/&amp;gt;，调用App()方法，得到虚拟DOM，React会生成真实DOM 用户单击button，调用setN(n+1)，并再次render&amp;lt;App/&amp;gt;，调用App()方法，得到新的虚拟DOM，经过DOM Diff运算，React会更新真实DOM 每次调用App()，都会运行useState(0)   执行setN的时候会发生什么？n会变吗？App()会重新执行吗？  setN一定会修改某个数据x，而不是直接修改n，并将n+1存入x setN一定会触发&amp;lt;App/&amp;gt;重新渲染   每次重新执行App()时，都会执行useState(o)，那么n每次的值会有不同吗（即不为0）  每次n的值都会不同，说明useState肯定会从x读取n的最新值，而不是简单的初始化n为0   x  每个组件有自己的数据x，即state    1.</description>
    </item>
    
    <item>
      <title>JS专精</title>
      <link>https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 07 Aug 2021 20:40:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</guid>
      <description>1</description>
    </item>
    
    <item>
      <title>Umi-Request配置</title>
      <link>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 09 Jul 2021 16:47:33 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</guid>
      <description>utils/request.js
/** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request */ import { extend } from &amp;#39;umi-request&amp;#39;; import { notification } from &amp;#39;antd&amp;#39;; const codeMessage = { 200: &amp;#39;服务器成功返回请求的数据。&amp;#39;, 201: &amp;#39;新建或修改数据成功。&amp;#39;, 202: &amp;#39;一个请求已经进入后台排队（异步任务）。&amp;#39;, 204: &amp;#39;删除数据成功。&amp;#39;, 400: &amp;#39;发出的请求有错误，服务器没有进行新建或修改数据的操作。&amp;#39;, 401: &amp;#39;用户没有权限（令牌、用户名、密码错误）。&amp;#39;, 403: &amp;#39;用户得到授权，但是访问是被禁止的。&amp;#39;, 404: &amp;#39;发出的请求针对的是不存在的记录，服务器没有进行操作。&amp;#39;, 406: &amp;#39;请求的格式不可得。&amp;#39;, 410: &amp;#39;请求的资源被永久删除，且不会再得到的。&amp;#39;, 422: &amp;#39;当创建一个对象时，发生一个验证错误。&amp;#39;, 500: &amp;#39;服务器发生错误，请检查服务器。&amp;#39;, 502: &amp;#39;网关错误。&amp;#39;, 503: &amp;#39;服务不可用，服务器暂时过载或维护。&amp;#39;, 504: &amp;#39;网关超时。&amp;#39;, }; /** 异常处理程序 */ const errorHandler = (error) =&amp;gt; { const { response } = error; if (response &amp;amp;&amp;amp; response.</description>
    </item>
    
    <item>
      <title>Object常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 07 Jul 2021 17:30:59 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>Object.assign()   用于将所有可枚举属性（属性能否被for…in查找遍历到）的值从一个或多个源对象复制到目标对象，返回目标对象
  语法：
Object.assign(target, ...sources) target目标对象；source源对象
  如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖，后面的源对象的属性将类似地覆盖前面的源对象的属性。
  只会拷贝源对象自身的并且可枚举的属性到目标对象。
  为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty()。深拷贝？
  示例：
// 复制一个对象 const obj = { a: 1 }; const copy = Object.assign({}, obj); console.log(copy); // { a: 1 }  // 合并对象 const o1 = { a: 1 }; const o2 = { b: 2 }; const o3 = { c: 3 }; const obj = Object.assign(o1, o2, o3); console.</description>
    </item>
    
    <item>
      <title>String常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 05 Jul 2021 13:29:15 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>String.prototype.match()   根据传入的正则表达式的检索字符串并返回结果
  语法：
str.match(regexp)   例子
   String.prototype.search()   根据传入的正则表达式寻找符合的字符位置
  语法
str.search(regexp)   如果匹配，则返回首次匹配项的索引；反之返回-1
  例子：
const str = &amp;#39;hello World&amp;#39; str.search(/[A-Z]/g)// 6 str.search(/[.]/g)// -1   String.prototype.chatAt()   从一个字符串中返回指定index的字符
  语法
str.chartAt(index) 若没有提供index，则默认使用0
  例子
const str = &amp;#39;ABCD&amp;#39; str.charAt(1)// &amp;#34;B&amp;#34;   String.prototype.indexOf()   查询字符串对象中第一次出现指定值的索引
  语法：
str.indexOf(searchValue, fromIndex) fromIndex可选，表示开始查找的位置，默认为0，若指定为负数，则等价于传入0；若大于str.length，则必反回-1
indexOf区分大小写</description>
    </item>
    
    <item>
      <title>Array常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/array/</link>
      <pubDate>Mon, 28 Jun 2021 09:30:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/array/</guid>
      <description>Array.prototype.map() 1.关键词：遍历
2.是否修改原数组：false
3.返回值：
newArray[]，回调函数的结果组成了新数组的每一个元素。
4.语法：
var new_array = arr.map((currentValue, index, array) =&amp;gt; { // callback })  currentValue：callback数组中正在处理的当前元素； index：可选，callback数组中正在处理的当前元素的索引； array：可选，map方法调用的数组，几乎不用  5.描述
map 方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。
因为map生成一个新数组，当你不打算使用返回的新数组却使用map是违背设计初衷的，请用forEach或者for-of替代。
callback 函数会被自动传入三个参数：数组元素，元素索引，原数组本身。
6.示例
// 求数组中每个元素的平方根 const arr = [4, 9, 16] const newArr = arr.map(Math.sqrt)// [2, 3, 4]  // 使用map重新格式化数组中的对象 const arr = [ { key:1, value:10 }, { key:2, value:20 } ] const newArr = arr.</description>
    </item>
    
    <item>
      <title>React入门</title>
      <link>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 25 Jun 2021 23:11:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</guid>
      <description>1.React是什么 用于构建用户界面的JS库（操作DOM呈现页面）
是一个将数据渲染为HTML视图的开源的JavaScript库
 官网：https://react.docschina.org/
 2.谁开发的 Facebook
3.为什么要学   原生JS操作DOM繁琐、效率低（DOM-API操作UI）
  使用js直接操作DOM，浏览器会进行大量的重绘重排
  原生js没有组件化的编码方案，代码复用率低
模块化是针对js的，可以把js拆分成独立的功能模块，方便复用。但是html结构和css样式，包括字体图片音频视频等，复用率低。
  4.React的特点   用组件化模式、声明式编码，提高开发效率及组件复用率
之前使用的是命令式编码，面向过程。比如我想喝一杯水，需要命令别人先站起来，再走到水杯旁，把我帮我拿过来等等的步骤；但是声明式编码只需我说嗓子干了，自动就会帮我把水拿过来。
  在React Native中可以使用React语法进行移动端开发。
React Native可以使得前端开发人员使用最熟悉的js来编写安卓和ios应用。
  使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互
  ​	虚拟DOM发生改变后会对比之前的虚拟DOM，从而减少真实DOM的更新渲染过程
5. React基本使用 5.1 js库引入（注意引入顺序） 1.react.development.js：react核心库
2.react-dom.development.js：提供操作DOM的react扩展库
3.babel.min.js：解析JSX语法代码转为js代码的库
5.2 虚拟DOM的创建 5.2.1 关于虚拟DOM （1）本质上是object类型的一般对象
（2）虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是react内部在用，无需真实DOM上那么多属性
（3）虚拟DOM最终会被React转化为真实DOM，呈现在页面上
5.2.2 创建的两种方式 （1）纯js方式
const VDOM = React.createElement(&amp;#39;标签名&amp;#39;,{标签属性},&amp;#39;标签内容&amp;#39;) const VDOM = React.createElement(&amp;#39;h1&amp;#39;,{id:&amp;#39;title&amp;#39;},&amp;#39;React.createElement(&amp;#39;span&amp;#39;,{},&amp;#39;HELLO REACT!&amp;#39;)&amp;#39;) ​	可以看到，若遇标签嵌套情况，利用纯js来写非常复杂。
（2）JSX方式
​	是react 定义的一种类似于 XML 的 JS 扩展语法: JS + XML。本质是React.</description>
    </item>
    
    <item>
      <title>初识Hooks</title>
      <link>https://gsemir0418.github.io/posts/reacthooks/</link>
      <pubDate>Fri, 25 Jun 2021 23:07:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/reacthooks/</guid>
      <description>1 Hook简介 1.1 基本概念 Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使⽤ state 以及其他的 React 特性。
1.2 React Hooks优势   函数组件不能使⽤state，⼀般只⽤于⼀些简单⽆交互的组件，⽤作信息展示，即我们上⾯说的傻⽠组件使⽤，如果需要交互更改状态等复杂逻辑时就需要使⽤class组件了
React Hooks让我们更好的拥抱函数式编程，让函数式组件也能使⽤state功能，因为函数式组件⽐class组件更简洁好⽤，因为React Hooks的出现，相信未来我们会更多的使⽤函数式组件
  副作⽤问题
我们⼀般称数据获取、订阅、定时执⾏任务、⼿动修改ReactDOM这些⾏为都可以称为副作⽤由于React Hooks的出现，我们可以使⽤useEffect来处理组件副作⽤问题，所以我们的函数式组件也能进⾏副作⽤逻辑的处理了
  有状态的逻辑重⽤组件
  复杂的状态管理
之前我们使⽤redux、dva、mobx第三⽅状态管理器来进⾏复杂的状态管理
现在我们可以使⽤useReducer、useContext配合使⽤实现复杂状态管理，不⽤再依赖第三⽅状态管理器
  开发效率和质量问题
函数式组件⽐class组件简洁，开发的体验更好，效率更⾼同时应⽤的性能也更好
   2 useState 2.1 定义 useState：组件状态管理钩⼦，使函数组件能够使⽤state
2.2 基本使用 const [state,setState]=useState(initState)  state是要设置的状态 setState是更新state的⽅法，只是⼀个⽅法名，可以随意更改 initState是初始的state，可以是随意的数据类型，也可以是回调函数，但是函数必须是有返回值  2.3 实际应用 import React, { useState } from &amp;#39;react&amp;#39; export default function UseS() { const [count, setState] = useState(0) return ( &amp;lt;div&amp;gt; &amp;lt;div&amp;gt;你点击了{count}次&amp;lt;/div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setState(count + 1)}&amp;gt;点 击&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ) }  3 useEffect 3.</description>
    </item>
    
    <item>
      <title>React组件生命周期</title>
      <link>https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Fri, 25 Jun 2021 11:09:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>1 生命周期的理解 1.1 引出生命周期  需求：
 让指定的文本做显示* */* 隐藏的渐变动画 从完全可见，到彻底消失，耗时2S 点击“不活了”按钮从界面中卸载组件   源码及笔记如下：
class Life extends React.Component { //只要页面发生更新，则说明是状态在驱动  state = { opacity: 0.5 } death = () =&amp;gt; { ReactDOM.unmountComponentAtNode(document.getElementById(&amp;#39;test&amp;#39;)) } //和render一样 是由React帮忙调用的 因此不用写成箭头函数的形式  //执行时机：组件挂载到页面后  componentDidMount() { //起个名字 挂到实例自身 方便清除时用  this.timer = setInterval(() =&amp;gt; { //获取状态值  let opacity = this.state.opacity //每次-0.1  opacity -= 0.1 if (opacity &amp;lt;= 0) opacity = 1 //设置新的透明度  this.</description>
    </item>
    
    <item>
      <title>React Hooks全解</title>
      <link>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</link>
      <pubDate>Tue, 01 Jun 2021 17:02:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</guid>
      <description>1.useState 使用状态 const [n, setN] = React.useState(0) const [user, setUser] = React.useState({name:&amp;#39;F&amp;#39;}) 注意事项1：不可局部更新 const [user, setUser] = useState({name:&amp;#39;Jack&amp;#39;,age:18}) setState({ name:&amp;#39;Sam&amp;#39; })   结果得到的是{name:&amp;lsquo;Sam&amp;rsquo;}，age属性消失了
  （可以在之前加上&amp;hellip;user，表示复制user的全部属性到这个新对象中）
  说明对于state不能部分setState，因为setState不会帮我们合并属性
  实际上React中所有hooks都不能自动合并属性，需要我们自己去操作
  注意事项2：地址要变 setState(obj)如果obj地址不变，那么React就认为数据没有变化
const [user, setUser] = useState({name:&amp;#39;Jack&amp;#39;,age:18}) user.name = &amp;#39;Sam&amp;#39; setState(user)  表面上我们先改变了user对象的name属性（实际上也确实改变了），再将user对象setState进去，setState之后的user对象并没有改变。 对于React来说，对象还是user（地址没变），因此React不认为user改变了，依然加载的是原来的user。 上一个例子，是在setState中创建了一个新对象，因此React会直接加载新的对象（这也反映了setState并不会直接修改state，而是生成一个新的state）  useState接受函数 const [state, setState] = useState(() =&amp;gt; { return initState }) 该函数返回初始state，且只执行一次，节约反复更新渲染组件时js引擎的解析时间（首次渲染时会解析，再次更新组件时js就不会解析这个匿名函数了）
setState接受函数 const [n, setN] = useState(0) setN(n + 1) setN(n + 1) 虽然运行了两次setN，但运行结果为1，并不是预想中的2，原因同样是由于setN并不会改变n的值，n始终为0</description>
    </item>
    
    <item>
      <title>可视化大屏技术</title>
      <link>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 28 May 2021 09:30:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</guid>
      <description>1 背景和意义 数据可视化即把相对复杂、抽象的数据通过可视化的方式以人们更易理解的形式展示出来的一系列手段，旨在更形象地表达数据内在的信息和规律，促进数据信息的传播和应用。在当前Web前端可视化技术的支持下，数据可视化除了“可视”，还有可交流、可互动的特点。数据可视化的本质是数据空间到图形空间的映射。是抽象数据的具象表达。
大屏数据可视化是以大屏为主要展示载体的数据可视化设计。基于大屏展示“大面积、炫酷动效、丰富色彩”等主要特征，通过关键信息大屏共享的方式可方便企业团队讨论与决策，因此大屏也常应用与数据分析监测领域。目前大屏数据可视化主要分为信息展示、数据分析及监控预警三大类。
随着大数据的发展，可视化大屏在各个行业的应用越来越广泛，尤其是在政府、商业、金融、制造等行业的业务场景中。例如，可视化大屏作为传递信息的有效手段，在城市智能运营中心、应急指挥中心、公安监控中心、电力调度中心、金融交易大厅等部门和机构中发挥着重要作用；同时它具有日常监测、分析判断、应急指挥、展示汇报等多种功能，在提高科学管理方面也发挥着重要作用。
2 技术原理 数据可视化展示大屏主要基于React框架、ECharts可视化图表库、CSS布局与适配以及特效制作等Web前端可视化开发技术。
2.1 React框架 React是一个声明式，高效且灵活的用于构建用户界面的JavaScript库。使用React可以将一些简短、独立的代码片段组合成复杂的UI界面，这些代码片段被称作“组件”。数据可视化展示大屏中的每个展示模块均可封装为独立的组件，方便复用与后期维护。
2.2 大屏适配公式 可视化大屏设计稿的比例通常为16:9，为了保证其在不同分辨率及屏幕比例上的展示效果，在开发时需运用大屏适配算法对大屏尺寸信息进行换算。
公式1.1为大屏尺寸适配公式，其中Wp为页面有效宽度，Hp为页面有效高度。
2.3 元素适配公式 锁定好大屏尺寸后，需要利用到CSS3中新增的rem单位结合适配公式，对大屏内部各元素的尺寸针对不同比例的屏幕进行适配。
Rem（Root em）是CSS3新增的一个相对单位，使用rem为元素设定相对尺寸时，相对的只是HTML根元素。通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。公式1.2为内部元素尺寸适配公式。
2.4 ECharts可视化图表库 ECharts是一个使用JavaScript实现的开源可视化库，涵盖各行业图表，满足各种需求。其主要特点如下：
 丰富的可视化类型：提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap、旭日图，多维数据可视化的平行坐标，还有用于BI的漏斗图，仪表盘，并且支持图与图之间的混搭。 多种数据格式无需转换直接使用：内置的dataset属性（4.0+）支持直接传入包括二维表，key-value等多种格式的数据源，此外还支持输入TypedArray格式的数据。 千万数据的前端展现：通过增量渲染技术（4.0+），配合各种细致的优化，ECharts能够展现千万级的数据量。 移动端优化：针对移动端交互做了细致的优化，例如移动端小屏上适于用手指在坐标系中进行缩放、平移。PC端也可以用鼠标在图中进行缩放（用鼠标滚轮）、平移等。 多渲染方案，跨平台使用：支持以Canvas、SVG（4.0+）、VML的形式渲染图表。 深度的交互式数据探索：提供了图例、视觉映射、数据区域缩放、tooltip、数据刷选等开箱即用的交互组件，可以对数据进行多维度数据筛取、视图缩放、展示细节等交互操作。 多维数据的支持以及丰富的视觉编码手段：对于传统的散点图等，传入的数据也可以是多个维度的。 动态数据：数据的改变驱动图表展现的改变。 绚丽的特效：针对线数据，点数据等地理数据的可视化提供了吸引眼球的特效。 通过GL实现更多更强大绚丽的三维可视化：在VR，大屏场景里实现三维的可视化效果。  3 技术实现方案 3.1 大屏设计流程   根据业务场景抽取关键指标
关键指标是一些概括性词语，是对一组或者一系列数据的统称。一般情况下，一个指标在大屏上独占一块区域。以supAPS为例，这里的关键指标有：原料库存、计划实际对比、产品库存与库存成本等。确定关键指标后，根据业务需求拟定各个指标展示的优先级（主、次、辅）。
  选定可视化图表类型
同一个指标的数据，从不同维度分析就有不同结果。当确定好各项指标的分析维度后，事实上图表类型也就基本确定了。如库存成本选用柱状图的形式，装置加工选用表格的形式，计划实际对比选择折线图的形式等。
  页面布局
图表类型和屏幕尺寸确立后，接下来要对设计稿进行页面布局的划分。核心业务指标安排在中间位置、占较大面积；其余的指标按优先级依次在核心指标周围展开。一般把有关联的指标让其相邻或靠近，把图表类型相近的指标放一起，这样能减少观者认知上的负担并提高信息传递的效率。
  页面开发
在定义好分析指标、确定页面布局后，进行前端样式的开发工作，将数据接入到前端并呈现出来。
  整体细节调优与测试
  页面开发完成后，将真实页面投放到大屏进行的测试与优化。主要分为两部分：
1）视觉方面的测试：关键视觉元素、字体字号、页面动效、图形图表等是否按预期显示、有无变形、错位等情况。
2）性能与数据方面的测试：图形图表动画是否流畅、数据加载、刷新有无异常；页面长时间展示是否存在奔溃、卡死等情况；后台控制系统能否正常切换前端页面显示。
  3.2 大屏适配 基于大屏适配公式，计算页面尺寸。
const clientWidth = document.</description>
    </item>
    
    <item>
      <title>React基础</title>
      <link>https://gsemir0418.github.io/posts/react%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 29 Apr 2021 23:11:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/react%E5%9F%BA%E7%A1%80/</guid>
      <description>1 React定义组件 1.1 函数式组件  函数式组件适用于简单组件的定义，其首字母需大写，且虚拟DOM元素必须有结束标签 函数组件中的this指向为window，但babel编译后默认开启了严格模式，因此结果为undefined 返回的虚拟DOM元素只能有一个根元素 渲染函数式组件的过程：  React解析组件标签，找到了Demo组件 发现组件式使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM。随后呈现在页面中    function Demo(){ console.log(this);//undefined 	return &amp;lt;h1&amp;gt;函数式组件，适用于简单组件的定义&amp;lt;/h1&amp;gt; } ReactDOM.render(&amp;lt;Demo/&amp;gt;,document.getElementById(&amp;#39;test&amp;#39;)) 1.2 类式组件   继承React.Component类，组件名首字母必须大写，且虚拟DOM元素必须有结束标签
  必须有render()方法，且render方法必须有返回值，返回的虚拟DOM元素只能有一个根元素
  渲染类式组件的过程
1.React 内部会创建组件实例对象
2.调用 render()得到虚拟 DOM, 并解析为真实 DOM
3.插入到指定的页面元素内部
  class MyComponent extends React.Component{ render(){ //render放在MyComponent的原型对象（React.Component）上，供实例使用 	//render中的this指向MyComponent实例对象（组件实例对象） 	console.log(&amp;#39;render方法中的this指向：&amp;#39;,this); return &amp;lt;h1&amp;gt;类式组件，适用于复杂组件的定义&amp;lt;/h1&amp;gt; } } ReactDOM.render(&amp;lt;MyComponent/&amp;gt;,document.getElementById(&amp;#39;test&amp;#39;))  2 组件实例三大属性 2.1 state 2.1.1 state基本使用 state 是组件对象最重要的属性，值是对象(可以包含多个 key-value 的组合)</description>
    </item>
    
  </channel>
</rss>
