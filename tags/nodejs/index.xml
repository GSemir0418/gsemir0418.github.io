<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on GSemir Blog</title>
    <link>https://gsemir0418.github.io/tags/nodejs/</link>
    <description>Recent content in nodejs on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Aug 2021 17:33:55 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node进程与线程</title>
      <link>https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Fri, 06 Aug 2021 17:33:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>1 进程 1.1 进程 Process  场景  notepad.exe是一个程序，不是进程 双击notepad.exe时，操作系统会开启一个进程   定义  进程是程序的执行实例 程序在CPU上执行时的活动叫做进程   特点  一个进程可以创建另一个进程（父进程和子进程）例如Chrome浏览器的网页和插件 通过任务管理器可以看到进程    1.2 了解CPU   特点：
 一个单核CPU，在一个时刻，只能做一件事情 如何让用户同时看电影、听音乐、写代码呢 答案是在不同进程中快速切换（CPU频率） 以渣男交多个女朋友举例    多程序并发执行时
 多个程序在宏观上并行，微观上串行 每个进程会出现执行-暂停-执行的规律 多个进程之前会出现抢资源（如打印机队列）的现象    进程的两个状态：运行态与非运行态
  进程队列示意
  1.3 阻塞   等待执行的进程中
 都是非运行态 一些（A）在等待CPU资源 另一些（B）在等待I/O完成（如文件读取） 如果这时把CPU资源分配给B进程，B还是在等I/O（不占用CPU） B进程就是阻塞进程 因此，分派程序只会把CPU分配给非阻塞进程 比如和女朋友排队买饭，但她中途去厕所了，那么如果排到你们了就会让你去后面重新排队    进程的三个状态：运行，就绪，阻塞
  2 线程 2.</description>
    </item>
    
    <item>
      <title>Node技术架构</title>
      <link>https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 29 Jul 2021 20:54:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</guid>
      <description>1 Node.js概述 1.1 Node.js不是什么  不是web框架（Flask，Spring） 不是编程语言（Python，PHP）  1.2 Node.js是什么  是一个平台  将多种技术组合起来 让JavaScript也能调用系统接口，开发后端应用   Node.js搭建技术  V8引擎 libuv C/C++实现的c-ares（解析dns域名）、http-parser（解析http）、OpenSSL（加密解密）、zlib（数据压缩）等库    2 Node.js技术架构  https://github.com/yjhjstz/deep-into-node
 2.1 Node.js bindings   背景
 Node.js用C++对http_parser进行封装，使它符合某些要求（统一数据类型等），封装的文件叫做http_parser_bindings.cpp 用Node.js提供的编译工具将其编译为.node文件 JS代码可以直接require这个.node文件 这样JS就能调用C++库，中间的桥梁就是binding 由于Node.js提供了很多binding，所以加个s 这就是bindings    JS与C++交互
 http://nodejs.cn/api/addons.html#addons_function_arguments
   C++调用JS回调
 http://nodejs.cn/api/addons.html#addons_callbacks
   2.2 libuv   背景
 每个系统上的异步I/O（系统与外界（硬盘文件、打印机、网络请求）交互）都不一样 比如FreeBSD系统上有kqueue、Linux上有epoll、Windows上有IOCP Ryan为了一个跨平台的异步I/O库，开始写libuv libuv会根据系统自动选择合适的方案    功能</description>
    </item>
    
    <item>
      <title>NodeStream模块</title>
      <link>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Thu, 08 Jul 2021 14:07:04 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</guid>
      <description>1.三个示例引入Stream 1.1 创建流 // 引入fs模块 const fs = require(&amp;#39;fs&amp;#39;) // 利用fs创建流 const stream = fs.createWriteStream(&amp;#39;./big_file.txt&amp;#39;) // 写数据 for (let i = 0; i &amp;lt; 100000; i++) { stream.write(`这是第${i}行内容，我们需要很多很多内容\n`) } // 关闭流 stream.end() console.log(&amp;#39;done&amp;#39;) //命令行执行 node 1.js   分析
 流程：打开流，多次往里面塞内容，关闭流 看起来就是可以多次写，没什么大不了的 最终得到一个100M左右的文件    Stream是水流，但默认没有水
  stream.write可以让水流中有水（数据）
  每次写入的数据片段叫做chunk（块）
  产生数据的一端叫做source
  接收数据的一端叫做sink
  1.2 浏览器直接读取文件 // 引入文件模块 const fs = require(&amp;#39;fs&amp;#39;) // 引入http模块 const http = require(&amp;#39;http&amp;#39;) // 开启服务器 const server = http.</description>
    </item>
    
    <item>
      <title>数据库基础</title>
      <link>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 05 Jul 2021 08:57:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
      <description>1 第一二三范式 1 第一范式 1NF   定义：字段不可再分
  举例：存储体检者的双眼视力，应分为左眼视力和右眼视力两个字段
即user表里应有left_eye和right_eye，而不能存为一个字段
  缺点：
​	这是一个学生选课表，没有违反第一范式，但是存在如下问题：
​	数据冗余、创建系时插入异常、删除学生会导致系消失、学生转系时改动多处
​	结论：第一范式不够强
  2 第二范式 2NF   定义：
 在1NF的基础上，要有键（键可由多个字段组合） 所有字段必须分别完全依赖于键 如果键是多个字段组合，则不允许部分依赖于该键    依赖关系：
 给出键，就能唯一确定字段的值 如给出学号，就能唯一确定姓名，反之则不行 则称姓名依赖于学号    不满足第二范式的地方：
 上表的键为（学号、课名） 但存在部份依赖：姓名依赖与学号    改进：
 选课表（学号，课名，分数） 学生表（学号，姓名，系名，系主任）    3 第三范式 3NF   定义：
 一个表里不能有两层依赖 给出学号，就能确定系名——系名依赖于学号 给出系名，就能确定系主任——系主任依赖与系名 所以，系主任间接依赖于学号    解决办法：</description>
    </item>
    
    <item>
      <title>Sequelize ORM</title>
      <link>https://gsemir0418.github.io/posts/sequelize.js/</link>
      <pubDate>Fri, 02 Jul 2021 11:01:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/sequelize.js/</guid>
      <description>1 MySQL数据类型 MySQL支持的数据类型比较少，主要有五种类型：
 数字类型 字符串类型 时间和日期类型 JSON类型 其他特殊类型   id 可以指定类型为serial序列，时间格式最好使用ISO 8601格式，即2021-07-02T11:01:55+08:00
 2 Sequelize使用  官方文档：   sequelize.org/master/manual/getting-started.html
  安装：  yarn add sequelizeyarn add mysql2 使用：  // 引入 const { Sequelize, Model, DataTypes } = require(&amp;#39;sequelize&amp;#39;) // 创建sequelize连接 const sequelize = new Sequelize(&amp;#39;gsq&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;12345&amp;#39;, { host: &amp;#39;localhost&amp;#39;, dialect: &amp;#39;mysql&amp;#39;, }) // 创建User模型 class User extends Model { } // 初始化User表 User.</description>
    </item>
    
    <item>
      <title>Node.js连接数据库</title>
      <link>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Fri, 02 Jul 2021 09:24:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>1 安装mysql依赖包 yarn add mysql2 创建mysql连接 创建连接前，确保容器是开启状态。新建test.js文件。
 引入mysql模块  const mysql = require(&amp;#39;mysql&amp;#39;)  创建连接  const connection = mysql.createConnection({ host: &amp;#39;localhost&amp;#39;, // 老版本的docker需要填ip  user: &amp;#39;root&amp;#39;, password: &amp;#39;12345&amp;#39; }) connection.connect();  创建数据库  // 创建数据库 connection.query(&amp;#39;CREATE DATABASE IF NOT EXISTS gsq DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_unicode_520_ci;&amp;#39;, (error, results, fields) =&amp;gt; { if (error) throw error; console.log(results) }) 创建名为gsq的数据库（数据库不存在的情况下），并指定默认字符集为utf8mb4(mysql对于utf-8字符集支持不佳)
 创建数据表  // 选择数据库 connection.query(&amp;#39;use gsq;&amp;#39;) // 创建表 connection.</description>
    </item>
    
    <item>
      <title>Docker安装MySQL</title>
      <link>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</link>
      <pubDate>Fri, 02 Jul 2021 08:36:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</guid>
      <description>1 win10安装Docker  https://hub.docker.com/
 注册登录并下载安装Docker Desktop。
 启用Hyper-V  右键Windows按钮并选择“应用和功能”，选择相关设置中的“程序和功能”，选择“启用或关闭Windows功能”，选择Hyper-V，单机确定。
 启用CPU的虚拟化  进入BIOS界面，找到Virtualization Technology选项，将disabled改为enabled。
 更新WSL2  如果出现WSL 2 installation is incomplete的报错，则需要更新WSL 2。
 https://aka.ms/wsl2kernel
 根据文档下载最新包，安装重启即可。
2 Docker安装MySQL docker run --name mysql1 -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:8.0.25 其中name是容器的名字；-e是环境变量，配置的MYSQL_ROOT_PASSWORD是mysql密码；-p是端口映射，左侧是本机端口号，右侧是虚拟机端口号；-d表示程序持续运行；最后指定mysql的版本号为8.0.25。
安装完成后，在docker desktop中可以发现mysql1的容器已开启，或者在命令行输入docker ps查看全部在运行的容器。
3 Docker常用命令 docker ps 查看容器运行状态
docker start mysql1 启动mysql1容器
docker kill mysql1 关闭容器mysql1
docker container run mysql1 开启刚刚关掉的容器
docker rm mysql1 删除容器，必要时可加-f选项
docker run xxx 启动新容器</description>
    </item>
    
    <item>
      <title>NodeHTTP模块</title>
      <link>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 30 Jun 2021 09:55:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</guid>
      <description>0 准备工作 1 ts-node-dev  当文件更新时自动重启node 避免每次改完代码都要重新运行的麻烦 可以用TS开发Node.js程序，且会自动重启 不宜在生产环境使用，但非常适合用来学习  安装
npm -g i ts-node-dev要用npm安装 ，用yarn安装的话使用时会报错。。无法识别“ts-node-dev”命令，不知道为什么。
2 VSCode配置 配置自动保存与保存后自动格式化：
ctrl shift p打开首选项：打开设置(ui)，AutoSave修改为onFocusChange，搜索format，勾选Format On Save开启保存后自动格式化。
3 curl  GET请求：curl -v url POST请求：curl -v -d “name=gsq&amp;quot; url 设置请求头：-H &#39;Content-Type:application/json&#39; 设置动词：-X PUT JSON请求：curl -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;bob&amp;quot;}&#39; -H &#39;Content-Type:application/json&#39; url 后面会用到curl来构造请求  1 创建项目  初始化项目：  yarn init -y 安装@types/node声明文件  yarn add --dev @types/node 新建index.ts  // 引入http模块 import * as http from &amp;#39;http&amp;#39; // 用http创建server const server = http.</description>
    </item>
    
    <item>
      <title>调试Nodejs</title>
      <link>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</link>
      <pubDate>Wed, 30 Jun 2021 09:40:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</guid>
      <description>1 VSCode调试Node.js 在launch.json中添加配置
{ // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;, &amp;#34;configurations&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;pwa-node&amp;#34;, &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;,// 会用node来启动 &amp;#34;name&amp;#34;: &amp;#34;cli add task&amp;#34;, &amp;#34;skipFiles&amp;#34;: [ &amp;#34;&amp;lt;node_internals&amp;gt;/**&amp;#34; ], &amp;#34;program&amp;#34;: &amp;#34;${workspaceFolder}\\cli.js&amp;#34;,// 入口文件 &amp;#34;args&amp;#34;: [&amp;#34;add&amp;#34;,&amp;#34;task&amp;#34;,&amp;#34;200&amp;#34;]// 参数 } ] } 点击启动即可在调试控制台查看运行情况
2 命令行结合Chrome调试Node.js 命令行中输入
node --inspect-brk cli add task2 打开浏览器，F12检查页面，几秒钟后上方会出现node图标，点进去即可对node程序进行调试了。</description>
    </item>
    
    <item>
      <title>单元测试之文件模块</title>
      <link>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 29 Jun 2021 08:43:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>安装jest
yarn add -dev jest在package.json中添加test命令
&amp;#34;scripts&amp;#34;:{ &amp;#34;test&amp;#34;:&amp;#34;jest&amp;#34; } 新建__tests__文件夹，单元测试文件一般命名为xx.unit.js或者xx.spec.js，下面是测试示例，测试db中的read和write是否为方法：
const db = require(&amp;#39;../db.js&amp;#39;) describe(&amp;#39;db&amp;#39;, () =&amp;gt; { it(&amp;#39;read is a function&amp;#39;, () =&amp;gt; { expect(db.read instanceof Function).toBe(true) }) it(&amp;#39;write is a function&amp;#39;, () =&amp;gt; { expect(db.write instanceof Function).toBe(true) }) }) 运行
yarn test一般单元测试为白盒测试，知道代码是怎么编写的
单元测试不应该与外界打交道，不能操作硬盘、网络等
单元测试的对象是函数
功能测试的对象是模块
集成测试的对象是系统
在__test__同级目录下创建__mocks__，新建fs.js，在test文件开头就要写
jest.mock(&#39;&#39;)未完待续。。。 </description>
    </item>
    
    <item>
      <title>Node文件模块</title>
      <link>https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 25 Jun 2021 14:40:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>1 待办事项命令行程序需求   功能：
  可以列出所有的todo；
  新增、编辑、删除todo；
  修改todo状态为已完成/未完成
    命令
t t add 任务名 t clear   2 创建命令行项目  空文件夹下，执行：  yarn init -y -y表示跳过交互式对话（确定版本等信息），根据默认值生成package.json
 创建index.js，引入commanderjs库，添加add和clear子命令：  const program = require(&amp;#39;commander&amp;#39;); program .option(&amp;#39;-x,--xxx&amp;#39;, &amp;#39;desc of x&amp;#39;)// x选项 即在node index命令后输入的选项 program .command(&amp;#39;add&amp;#39;)// 子命令 	.description(&amp;#39;add a task&amp;#39;)// 子命令描述 	.action((...args) =&amp;gt; { //拿到用户输入的所有字符串参数  const words = args.slice(0,-1).join(&amp;#39; &amp;#39;)// 由于最后一个参数默认是command对象，因此需要对参数进行预处理 	}) program .</description>
    </item>
    
  </channel>
</rss>
