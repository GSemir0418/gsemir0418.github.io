<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>可视化大屏 on GSemir Blog</title>
    <link>https://gsemir0418.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F/</link>
    <description>Recent content in 可视化大屏 on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 May 2021 21:27:51 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可视化大屏实战</title>
      <link>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 09 May 2021 21:27:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E5%AE%9E%E6%88%98/</guid>
      <description>1.如何找素材 1.1 著名的设计网站
Dribbble（搜索关键字：big screen）
 https://dribbble.com
 站酷（关键字：大屏）
 https://www.zcool.com.cn
 2.如何适配屏幕 1.整体的屏幕适配
如果大屏很宽，就左右居中；屏幕很高，就上下居中。
其中Wp为页面有效宽度，Hp为页面有效高度
页面左右居中，上下居中，四周留白即可
然后在head里用JS设置1rem=Wp/100
2.每个div的适配
每个div是要适配页面的，因此只能用rem而不是px
举例：假设某div在设计稿中长100px，设计稿宽度1920px
​	则该div在页面中长为100/1920*100rem
可以在scss中写一个px()函数来计算100px对应的rem
3.为什么要学   原生JS操作DOM繁琐、效率低（DOM-API操作UI）
  使用js直接操作DOM，浏览器会进行大量的重绘重排
  原生js没有组件化的编码方案，代码复用率低
模块化是针对js的，可以把js拆分成独立的功能模块，方便复用。但是html结构和css样式，包括字体图片音频视频等，复用率低。
  4.React的特点   用组件化模式、声明式编码，提高开发效率及组件复用率
之前使用的是命令式编码，面向过程。比如我想喝一杯水，需要命令别人先站起来，再走到水杯旁，把我帮我拿过来等等的步骤；但是声明式编码只需我说嗓子干了，自动就会帮我把水拿过来。
  在React Native中可以使用React语法进行移动端开发。
React Native可以使得前端开发人员使用最熟悉的js来编写安卓和ios应用。
  使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互
  ​	虚拟DOM发生改变后会对比之前的虚拟DOM，从而减少真实DOM的更新渲染过程</description>
    </item>
    
  </channel>
</rss>
