<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React Hooks on GSemir Blog</title>
    <link>https://gsemir0418.github.io/categories/react-hooks/</link>
    <description>Recent content in React Hooks on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Aug 2021 22:15:51 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/categories/react-hooks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UseState原理</title>
      <link>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 07 Aug 2021 22:15:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</guid>
      <description>1 useState简单实现 1.1 示例  点击按钮，结果+1  import React from &amp;#34;react&amp;#34;; import ReactDOM from &amp;#34;react-dom&amp;#34;; const rootElement = document.getElementById(&amp;#34;root&amp;#34;); function App() { const [n, setN] = React.useState(0); return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{n}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setN(n + 1)}&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; ); } ReactDOM.render(&amp;lt;App /&amp;gt;, rootElement);  运行过程分析  首次render&amp;lt;App/&amp;gt;，调用App()方法，得到虚拟DOM，React会生成真实DOM 用户单击button，调用setN(n+1)，并再次render&amp;lt;App/&amp;gt;，调用App()方法，得到新的虚拟DOM，经过DOM Diff运算，React会更新真实DOM 每次调用App()，都会运行useState(0)   执行setN的时候会发生什么？n会变吗？App()会重新执行吗？  setN一定会修改某个数据x，而不是直接修改n，并将n+1存入x setN一定会触发&amp;lt;App/&amp;gt;重新渲染   每次重新执行App()时，都会执行useState(o)，那么n每次的值会有不同吗（即不为0）  每次n的值都会不同，说明useState肯定会从x读取n的最新值，而不是简单的初始化n为0   x  每个组件有自己的数据x，即state    1.</description>
    </item>
    
    <item>
      <title>React Hooks全解</title>
      <link>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</link>
      <pubDate>Tue, 01 Jun 2021 17:02:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</guid>
      <description>1.useState 使用状态 const [n, setN] = React.useState(0) const [user, setUser] = React.useState({name:&amp;#39;F&amp;#39;}) 注意事项1：不可局部更新 const [user, setUser] = useState({name:&amp;#39;Jack&amp;#39;,age:18}) setState({ name:&amp;#39;Sam&amp;#39; })   结果得到的是{name:&amp;lsquo;Sam&amp;rsquo;}，age属性消失了
  （可以在之前加上&amp;hellip;user，表示复制user的全部属性到这个新对象中）
  说明对于state不能部分setState，因为setState不会帮我们合并属性
  实际上React中所有hooks都不能自动合并属性，需要我们自己去操作
  注意事项2：地址要变 setState(obj)如果obj地址不变，那么React就认为数据没有变化
const [user, setUser] = useState({name:&amp;#39;Jack&amp;#39;,age:18}) user.name = &amp;#39;Sam&amp;#39; setState(user)  表面上我们先改变了user对象的name属性（实际上也确实改变了），再将user对象setState进去，setState之后的user对象并没有改变。 对于React来说，对象还是user（地址没变），因此React不认为user改变了，依然加载的是原来的user。 上一个例子，是在setState中创建了一个新对象，因此React会直接加载新的对象（这也反映了setState并不会直接修改state，而是生成一个新的state）  useState接受函数 const [state, setState] = useState(() =&amp;gt; { return initState }) 该函数返回初始state，且只执行一次，节约反复更新渲染组件时js引擎的解析时间（首次渲染时会解析，再次更新组件时js就不会解析这个匿名函数了）
setState接受函数 const [n, setN] = useState(0) setN(n + 1) setN(n + 1) 虽然运行了两次setN，但运行结果为1，并不是预想中的2，原因同样是由于setN并不会改变n的值，n始终为0</description>
    </item>
    
  </channel>
</rss>
