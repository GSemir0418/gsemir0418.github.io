<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试题 on Even - A super concise theme for Hugo</title>
    <link>https://gsemir0418.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <description>Recent content in 面试题 on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Aug 2022 16:54:46 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>requestAnimationFrame</title>
      <link>https://gsemir0418.github.io/post/requestanimationframe/</link>
      <pubDate>Thu, 11 Aug 2022 16:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/requestanimationframe/</guid>
      <description>需求： 使用setInterval实现div从左往右移动 1 2 3 4 5 6 7 8 9 10 11 const box = document.querySelectorAll(&amp;#34;.box&amp;#34;)[0]; let left = 0; function boxMoving() { if (left &amp;gt; 200) { clearInterval(timer); } else { left++; box.style.left = left + &amp;#34;px&amp;#34;; } } let timer = setInterval(boxMoving,</description>
    </item>
    
    <item>
      <title>useReducer与useContext实践</title>
      <link>https://gsemir0418.github.io/post/usereducer%E4%B8%8Eusecontext/</link>
      <pubDate>Thu, 11 Aug 2022 13:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/usereducer%E4%B8%8Eusecontext/</guid>
      <description>思路： 父组件：直接引入并使用ctx.Provider，为子组件提供useReducer返回的[state, dispatch]两个属性 子组件：</description>
    </item>
    
    <item>
      <title>受控组件与非受控组件</title>
      <link>https://gsemir0418.github.io/post/%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 11 Aug 2022 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { useState, useRef } from &amp;#34;react&amp;#34;; export default function App() { const [value, setValue] = useState(&amp;#34;&amp;#34;); const inputRef = useRef(null); const handleOnChange = (e) =&amp;gt; { setValue(e.target.value); }; const handleOnSubmit = (e) =&amp;gt; { e.preventDefault(); conso</description>
    </item>
    
    <item>
      <title>JSX的本质是什么</title>
      <link>https://gsemir0418.github.io/post/jsx%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Aug 2022 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/jsx%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>JSX 简介 – React (reactjs.org) 官网写的非常清楚： 概念： JSX，是一个 JavaScript 的语法扩展，我们利用JSX这个语法糖来更好地描述 UI 和数据的交互形式。 React元素渲染机</description>
    </item>
    
    <item>
      <title>setState究竟是同步还是异步</title>
      <link>https://gsemir0418.github.io/post/setstate%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%90%8C%E6%AD%A5%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5/</link>
      <pubDate>Wed, 10 Aug 2022 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/setstate%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%90%8C%E6%AD%A5%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5/</guid>
      <description>setState传函数 答案：react</description>
    </item>
    
    <item>
      <title>手写Promise.all</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99promise.all/</link>
      <pubDate>Wed, 20 Jul 2022 09:19:07 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99promise.all/</guid>
      <description>1 要点 知道要在Promise上写而不是在原型上写 知道 all 的参数（Promise的数组）和返回值（新Promise对象） 知道用数组来记录结果 知道</description>
    </item>
    
    <item>
      <title>手写发布订阅</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
      <pubDate>Tue, 29 Mar 2022 09:58:50 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
      <description>发布订阅是一种设计模式，所谓设计模式就是写代码的套路 发布订阅模式主要包含三个API，分别是on、emit/trigger、off 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>手写AJAX</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99ajax/</link>
      <pubDate>Tue, 29 Mar 2022 09:19:07 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99ajax/</guid>
      <description>1 创建对象 1 var xhr = new XMLHttpRequest() 2 写url 1 xhr.open(&amp;#39;GET&amp;#39;, &amp;#39;/xxx&amp;#39;) 3 监听onreadystatechange事件 xhr对象的readyState属性取值包括0~4，0表</description>
    </item>
    
    <item>
      <title>手写数组去重</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Mon, 28 Mar 2022 17:46:37 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</guid>
      <description>1 Set 1 2 3 const uniq = (arr) =&amp;gt; Array.from(new Set(arr)) // or const uniq = (arr) =&amp;gt; [...new Set(arr)] 2 计数排序 1 2 3 4 5 6 7 8 9 10 11 const uniq = (arr) =&amp;gt; { if(!arr.length) return [] const map = {} for(let i = 0; i &amp;lt;= arr.length; i++) { if(!arr[i] || map[arr[i]]) continue // 利用对象中k</description>
    </item>
    
    <item>
      <title>手写防抖与节流</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</link>
      <pubDate>Mon, 28 Mar 2022 10:48:18 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</guid>
      <description>0 区别与联系 相同：在不影响客户体验的前提下，将频繁的回调函数，进行次数缩减，避免大量计算导致的页面卡顿 不同：防抖是将多次执行变为最后一次执行</description>
    </item>
    
    <item>
      <title>手写Promise</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Tue, 14 Dec 2021 09:59:48 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99promise/</guid>
      <description>0 手写前 该技术解决什么问题-why 回调地狱，比如node读写文件 该技术是怎么解决它的-how Promise的构造函数接收一个参数：函数，并且</description>
    </item>
    
    <item>
      <title>手写bind</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99bind/</link>
      <pubDate>Tue, 23 Nov 2021 16:15:44 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99bind/</guid>
      <description>1 简版bind bind是Function.prototype上的方法 1 Function.prototype.bind2 = () =&amp;gt; {} 接收的第一个参数是新的this，返回一个新函数 1 2 3 Function.prototype.bind2 = (newThis) =&amp;gt;</description>
    </item>
    
    <item>
      <title>手写深拷贝</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Tue, 23 Nov 2021 16:15:44 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
      <description>1 什么是深拷贝 b是a的一份拷贝，且b中没有对a中对象的引用 2 JSON序列化与反序列化 const b = JSON.parse(JSON.stringify(a)) 最简单，但存在如下缺点 不支持函数，会直接忽略函数</description>
    </item>
    
    <item>
      <title>BFC</title>
      <link>https://gsemir0418.github.io/post/bfc/</link>
      <pubDate>Wed, 10 Nov 2021 19:45:19 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/bfc/</guid>
      <description>1 BFC 1.1 BFC是什么 常见定位方案 普通流：元素按照其在HTML中的先后位置至上而下布局，行内元素由左至右排列，占满一行后换行，块级元素占满整行。</description>
    </item>
    
    <item>
      <title>前端面试Vue2</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95vue2/</link>
      <pubDate>Wed, 21 Jul 2021 12:20:21 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95vue2/</guid>
      <description>1 Vue2的生命周期钩子有哪些？数据请求放在哪个钩子？ 共11个 create（before+ed）*2 由于SSR会调用create，这种情况下</description>
    </item>
    
    <item>
      <title>前端面试Vue3</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95vue3/</link>
      <pubDate>Wed, 21 Jul 2021 12:20:21 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95vue3/</guid>
      <description>1 Vue3为什么使用Proxy 弥补 Object.defineProperty 的两个不足 动态创建的 data 属性需要用 Vue.set 来赋值，Vue 3 用了 Proxy 就不需要了 基于性能考虑，Vue 2 篡改了数组的 7 个</description>
    </item>
    
    <item>
      <title>前端面试TS</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95ts/</link>
      <pubDate>Thu, 22 Apr 2021 14:39:41 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95ts/</guid>
      <description>1 TS和JS的区别是什么 语法层面 TypeScript = JavaScript + Type （TS是JS的超集） 执行环境层面 浏览器、Node.js可以直接执行JS，但不能执行TS 编译层面 TS</description>
    </item>
    
    <item>
      <title>前端面试工程化</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Thu, 22 Apr 2021 12:20:21 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>1 常见loader和plugin有哪些，二者的区别是什么？ 常见loader babel-loader 把ES6+转义为ES5 ts-loader 把TS编译为JS，并提示类型错误 markdown-loader 把ma</description>
    </item>
    
    <item>
      <title>前端面试React</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95react/</link>
      <pubDate>Wed, 31 Mar 2021 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95react/</guid>
      <description>1 虚拟DOM的原理是什么 1.1 是什么 虚拟DOM就是虚拟节点。React用JS对象来模拟DOM节点，然后将其渲染成真实的DOM节点 1.2 怎么做 模拟（J</description>
    </item>
    
    <item>
      <title>前端面试JS基础</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95js%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 21 Mar 2021 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95js%E5%9F%BA%E7%A1%80/</guid>
      <description>1 JS的数据类型有哪些 8种 数字（number）、字符串（string）、布尔（boolean）、空（null）、未定义（undefined）</description>
    </item>
    
    <item>
      <title>前端面试DOM</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95dom/</link>
      <pubDate>Tue, 16 Mar 2021 14:39:41 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95dom/</guid>
      <description>1 请简述DOM事件模型（DOM Event） 每个事件都先经历从上到下（根元素=&amp;gt;最底层子节点）的捕获阶段，再经历从下到上（最底层子节点=</description>
    </item>
    
    <item>
      <title>前端面试HTTP</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95http/</link>
      <pubDate>Mon, 08 Mar 2021 09:57:38 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95http/</guid>
      <description>1 GET和POST的区别有哪些 1.1 幂等性 首先最根本的不同是语义上的不同，GET是读，POST是写，造成两者幂等性的不同 由于GET是读，POST</description>
    </item>
    
    <item>
      <title>前端面试CSS</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95css/</link>
      <pubDate>Sun, 07 Mar 2021 09:57:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95css/</guid>
      <description>1 BFC是什么 是什么：块级格式化上下文，通俗地讲就是“被隔离的区间”，BFC元素的子元素不会对外面的其他元素产生影响 怎么做： 触发条件： 浮动元</description>
    </item>
    
    <item>
      <title>前端面试手写</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%99/</link>
      <pubDate>Sun, 07 Mar 2021 09:57:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%99/</guid>
      <description>1 实现sleep函数 要求： 1 2 3 4 5 (async () =&amp;gt; { console.log(&amp;#39;hello&amp;#39;) await sleep(2000) console.log(&amp;#39;world&amp;#39;) })() 题解 1 const sleep = (ms) =&amp;gt; new Promise((resolve)=&amp;gt;setTimeout(resolve, ms)) 2 实现&#39;Hello World!&#39;.reverse() 1 String.prototype.reverse = function reverse() { return this.split(&amp;#39;&amp;#39;).reverse().join(&amp;#39;&amp;#39;)} 3 事件代理、监听、DOM自定</description>
    </item>
    
    <item>
      <title>前端面试HTML</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95html/</link>
      <pubDate>Sun, 07 Mar 2021 09:27:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95html/</guid>
      <description>1 讲讲HTML中的语义化标签 是什么：语义化标签是一种写HTML标签的方法论/方式 怎么做：实现方式是遇到标题就用h1到h6，遇到段落用p，遇到</description>
    </item>
    
  </channel>
</rss>
