<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目实战总结 on GSemir Blog</title>
    <link>https://gsemir0418.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 项目实战总结 on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Sep 2021 16:12:05 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dva数据流</title>
      <link>https://gsemir0418.github.io/posts/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</link>
      <pubDate>Wed, 15 Sep 2021 16:12:05 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</guid>
      <description>1 初识Dva 1.1 定义 dva 首先是一个基于redux和redux-saga的数据流方案，然后为了简化开发体验，dva 还额外内置了react-router和fetch，所以也可以理解为一个轻量级的应用框架。
1.2 Dva数据流概念 数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 dispatch 发起一个 action，如果是同步行为会直接通过 Reducers 改变 State ，如果是异步行为（副作用）会先触发 Effects 然后流向 Reducers 最终改变 State，所以在 dva 中，数据流向非常清晰简明。
1.3 model层重要API  namespace  model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 . 的方式创建多层命名空间。
state  状态初始值
reducers  以 key/value 格式定义 reducer。用于处理同步操作，唯一可以修改 state 的地方。由 action 触发。格式为 (state, action) =&amp;gt; newState 或 [(state, action) =&amp;gt; newState, enhancer]。
effects  以 key/value 格式定义 effect。用于处理异步操作和业务逻辑，不直接修改 state。由 action 触发，可以触发 action，可以和服务器交互，可以获取全局 state 的数据等等。</description>
    </item>
    
    <item>
      <title>Lodash常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 02 Sep 2021 16:53:09 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>0 准备  下载：  yarn add lodash / npm i lodash  Node.js引入：  const _ = require(&amp;#39;lodash&amp;#39;) 1 对象 1.1 移除对象上的一些属性-omit   把数据提交给接口，很多情况下，都要移除只在前端用，但接口不需要的属性。
  API：
  _.omit(object, [props])   参数说明：
object (Object): 来源对象。
[props] (...(string|string[])): 要被忽略的属性。（注：单独指定或指定在数组中。）
  示例：
  const obj = { name:&amp;#39;gsq&amp;#39;, age:19, gender:&amp;#39;male&amp;#39;, hobbies:&amp;#39;play&amp;#39; } _.omit(obj,[&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]) // { gender:&amp;#39;male&amp;#39;, hobbies:&amp;#39;play&amp;#39; } 1.2 选择对象上的一些属性-pick   选择对象上的一些属性和移除属性操作相反。
  API：</description>
    </item>
    
    <item>
      <title>umi&#43;AntdPro实战总结</title>
      <link>https://gsemir0418.github.io/posts/antdpro&#43;umi%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 22 Aug 2021 22:51:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/antdpro&#43;umi%E5%AE%9E%E6%88%98/</guid>
      <description>项目主体开发临近尾声，顺利进入了测试阶段。为期三个月的开发期间，使我对react，特别是hooks的理解以及umi框架的理解大大提升。在此将umi与antdPro框架在使用过程中遇到的问题与解决方案整理如下。
1 Ant Design Pro 1.1 全局样式 全局的样式（包括覆盖原生antd的css）可以写到global.less中，记得属性后加!important
打包后样式失效时，可以尝试关闭config.js中的按需加载（dynamicImport），但可能对平台首页加载速度有一定影响
1.2 Pro表单项onChange事件无效 使用表单项组件时onChange事件失效
在表单项的fieldProps属性中定义onChange事件即可，fieldProps即Pro组件对应的原生antd属性。
1.3 ProComponents 1.3.1 ProTable   字段找不到
进行列配置时，对应字段可能在对象深层，在配置dataIndex时可以用数组的形式，例如
dataIndex:[&#39;data&#39;, &#39;placeNumber&#39;, &#39;method&#39;] 那么ProTable就会将行数据的data.placeNumber.method值呈现在表格中了
  可编辑表格编辑状态默认值
EditableProTable的columns配置中的valueEnum是用来转换字符串类型的枚举（配合valueType:&#39;select&#39;替代render），对于非字符串字段（如数值或布尔类型），则会出现编辑状态的默认值为空或为实际value的bug。
 可以使用renderFormItem配置此字段的Select选择框，利用ref全局变量存储选项值，通过onSave读取ref值，对接保存或新增借口即可。
// 修改后的status const status = useRef(null) ... { title: &amp;#39;装置状态&amp;#39;, dataIndex: &amp;#39;status&amp;#39;, // 功能同render  valueType: &amp;#39;select&amp;#39;, valueEnum: { 0: { text: &amp;#39;停工&amp;#39;, status: &amp;#39;Error&amp;#39;, }, 1: { text: &amp;#39;正常&amp;#39;, status: &amp;#39;Success&amp;#39;, }, }, renderFormItem: u =&amp;gt; [ &amp;lt;Select key=&amp;#39;statusSelect&amp;#39; // 配置初始值 defaultValue={u.</description>
    </item>
    
  </channel>
</rss>
