<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on GSemir Blog</title>
    <link>https://gsemir0418.github.io/posts/</link>
    <description>Recent content in Posts on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Sep 2021 13:47:24 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Express全解</title>
      <link>https://gsemir0418.github.io/posts/express%E5%85%A8%E8%A7%A3/</link>
      <pubDate>Mon, 27 Sep 2021 13:47:24 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/express%E5%85%A8%E8%A7%A3/</guid>
      <description>0 REST.Client插件 用于在vscode中构造请求
新建以.http为后缀的文件：
@url=http://localhost:8080	--- @用于定义变量，{{}}使用此变量 ###	--- 以###作为请求分割符号 get {{url}}/users --- 注意空格 ### post {{url}} Content-Type: application/json --- 请求头与消息体直接有空行 { &amp;quot;username&amp;quot;: &amp;quot;gsq&amp;quot;, &amp;quot;age&amp;quot;: 19 } 1 express.xxx 共7个api，主要是一些内置的中间件，例如用来自动处理不同类型的请求体数据
1.1 express.json() 以监听消息体中数据流data事件的方式，拿到全部的json数据并自动解析成对象，放到request.body中
const express = require(&amp;#39;express&amp;#39;) const app = express() // 尝试将此中间件注释后，观察控制台打印内容 app.use(express.json()) app.use((req,res,next)=&amp;gt;{ console.log(req.body) res.send(&amp;#39;aaa&amp;#39;) next() }) app.listen(8080,()=&amp;gt;{ console.log(&amp;#39;listening 8080...&amp;#39;) }) 1.2 express.static() 指定静态资源路径，用户请求的静态数据首先从指定路径寻找，优先级高于其他中间件
... // 指定静态资源目录，如果在xxx目录中找到了就发送给浏览器，如果没有就next() app.use(express.static(&amp;#39;xxx&amp;#39;)) app.use((req,res,next)=&amp;gt;{ res.send(&amp;#39;aaa&amp;#39;) next() }) ... // 在.http文件中，构造请求静态资源 get {{url}}/index.html 1.3 express.</description>
    </item>
    
    <item>
      <title>Dva数据流</title>
      <link>https://gsemir0418.github.io/posts/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</link>
      <pubDate>Wed, 15 Sep 2021 16:12:05 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</guid>
      <description>1 初识Dva 1.1 定义 dva 首先是一个基于redux和redux-saga的数据流方案，然后为了简化开发体验，dva 还额外内置了react-router和fetch，所以也可以理解为一个轻量级的应用框架。
1.2 Dva数据流概念 数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 dispatch 发起一个 action，如果是同步行为会直接通过 Reducers 改变 State ，如果是异步行为（副作用）会先触发 Effects 然后流向 Reducers 最终改变 State，所以在 dva 中，数据流向非常清晰简明。
1.3 model层重要API  namespace  model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 . 的方式创建多层命名空间。
state  状态初始值
reducers  以 key/value 格式定义 reducer。用于处理同步操作，唯一可以修改 state 的地方。由 action 触发。格式为 (state, action) =&amp;gt; newState 或 [(state, action) =&amp;gt; newState, enhancer]。
effects  以 key/value 格式定义 effect。用于处理异步操作和业务逻辑，不直接修改 state。由 action 触发，可以触发 action，可以和服务器交互，可以获取全局 state 的数据等等。</description>
    </item>
    
    <item>
      <title>Lodash常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 02 Sep 2021 16:53:09 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>0 准备  下载：  yarn add lodash / npm i lodash  Node.js引入：  const _ = require(&amp;#39;lodash&amp;#39;) 1 对象 1.1 移除对象上的一些属性-omit   把数据提交给接口，很多情况下，都要移除只在前端用，但接口不需要的属性。
  API：
  _.omit(object, [props])   参数说明：
object (Object): 来源对象。
[props] (...(string|string[])): 要被忽略的属性。（注：单独指定或指定在数组中。）
  示例：
  const obj = { name:&amp;#39;gsq&amp;#39;, age:19, gender:&amp;#39;male&amp;#39;, hobbies:&amp;#39;play&amp;#39; } _.omit(obj,[&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]) // { gender:&amp;#39;male&amp;#39;, hobbies:&amp;#39;play&amp;#39; } 1.2 选择对象上的一些属性-pick   选择对象上的一些属性和移除属性操作相反。
  API：</description>
    </item>
    
    <item>
      <title>Web性能优化-基础</title>
      <link>https://gsemir0418.github.io/posts/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 02 Sep 2021 14:34:53 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9F%BA%E7%A1%80/</guid>
      <description>1 DNS与TCP 1.1 DNS与hosts DNS（Domain Name System）：域名系统，每个域名对应一个ip
hosts相当于手动给操作系统添加ip缓存
1.2 三次握手 TCP（Transmission Control Protocol）：传输控制协议
建立TCP连接过程的三次握手，x、y一般从0开始
  A能发
  B能收，B能发
  A能收（为什么一定需要第三次）
  关闭TCP连接过程的四次挥手，x、y一般不为0
 A：我请求结束了 B：我知道你请求结束了 B：我响应结束了 A：我知道你响应结束了  为什么B不能一起发送呢：因为第二次和第三次中间，服务端可能夹杂其他响应数据（B可能还没说完）
不一定是客户端发起FIN，服务端也可以发起FIN
2 HTTP（超文本传输协议） 2.1 HTTP请求          请求行 动词(GET、POST、PUT、DELETE..) URL HTTP/1.1(HTTP版本号)   请求头 Accept：text/html 期望接受数据的格式Host：baidu.com 用户请求的域名或ipConnection：keep-aliveContent-Type：application/json 请求体格式&amp;hellip;   回车换行 \r\n   请求体 {&amp;ldquo;name&amp;rdquo; : &amp;ldquo;gsq&amp;rdquo;}    2.</description>
    </item>
    
    <item>
      <title>umi&#43;AntdPro实战总结</title>
      <link>https://gsemir0418.github.io/posts/antdpro&#43;umi%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 22 Aug 2021 22:51:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/antdpro&#43;umi%E5%AE%9E%E6%88%98/</guid>
      <description>项目主体开发临近尾声，顺利进入了测试阶段。为期三个月的开发期间，使我对react，特别是hooks的理解以及umi框架的理解大大提升。在此将umi与antdPro框架在使用过程中遇到的问题与解决方案整理如下。
1 Ant Design Pro 1.1 全局样式 全局的样式（包括覆盖原生antd的css）可以写到global.less中，记得属性后加!important
打包后样式失效时，可以尝试关闭config.js中的按需加载（dynamicImport），但可能对平台首页加载速度有一定影响
1.2 Pro表单项onChange事件无效 使用表单项组件时onChange事件失效
在表单项的fieldProps属性中定义onChange事件即可，fieldProps即Pro组件对应的原生antd属性。
1.3 ProComponents 1.3.1 ProTable   字段找不到
进行列配置时，对应字段可能在对象深层，在配置dataIndex时可以用数组的形式，例如
dataIndex:[&#39;data&#39;, &#39;placeNumber&#39;, &#39;method&#39;] 那么ProTable就会将行数据的data.placeNumber.method值呈现在表格中了
  可编辑表格编辑状态默认值
EditableProTable的columns配置中的valueEnum是用来转换字符串类型的枚举（配合valueType:&#39;select&#39;替代render），对于非字符串字段（如数值或布尔类型），则会出现编辑状态的默认值为空或为实际value的bug。
 可以使用renderFormItem配置此字段的Select选择框，利用ref全局变量存储选项值，通过onSave读取ref值，对接保存或新增借口即可。
// 修改后的status const status = useRef(null) ... { title: &amp;#39;装置状态&amp;#39;, dataIndex: &amp;#39;status&amp;#39;, // 功能同render  valueType: &amp;#39;select&amp;#39;, valueEnum: { 0: { text: &amp;#39;停工&amp;#39;, status: &amp;#39;Error&amp;#39;, }, 1: { text: &amp;#39;正常&amp;#39;, status: &amp;#39;Success&amp;#39;, }, }, renderFormItem: u =&amp;gt; [ &amp;lt;Select key=&amp;#39;statusSelect&amp;#39; // 配置初始值 defaultValue={u.</description>
    </item>
    
    <item>
      <title>Express核心</title>
      <link>https://gsemir0418.github.io/posts/express%E6%A0%B8%E5%BF%83/</link>
      <pubDate>Sun, 22 Aug 2021 21:09:57 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/express%E6%A0%B8%E5%BF%83/</guid>
      <description>1 HTTP协议 1.1 curl基本用法   curl -s -v 网址
 -s 是 silent，用于隐藏进度条 -v 是 verbose，用于打印全部header * 开头的是注释 &amp;gt; 开头的是HTTP请求 &amp;lt; 开头的是HTTP响应    举例
curl -s -v http://www.baidu.com  如果得到301和 Location，表示永久重定向，于是重新请求（可以使用 -L自动重定向）  curl -s -o nul -v https://www.baidu.com * TCP_NODELAY set * Connected to www.baidu.com (180.101.49.12) port 80 (#0) &amp;gt; GET / HTTP/1.1 &amp;gt; Host: www.baidu.com &amp;gt; User-Agent: curl/7.64.1 &amp;gt; Accept: */* &amp;gt; &amp;lt; HTTP/1.1 200 OK &amp;lt; Accept-Ranges: bytes &amp;lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform &amp;lt; Connection: keep-alive &amp;lt; Content-Length: 2381 &amp;lt; Content-Type: text/html &amp;lt; Date: Sun, 22 Aug 2021 13:22:47 GMT &amp;lt; Etag: &amp;#34;588604c8-94d&amp;#34; &amp;lt; Last-Modified: Mon, 23 Jan 2017 13:27:36 GMT &amp;lt; Pragma: no-cache &amp;lt; Server: bfe/1.</description>
    </item>
    
    <item>
      <title>Git相关</title>
      <link>https://gsemir0418.github.io/posts/git/</link>
      <pubDate>Sun, 15 Aug 2021 22:02:28 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/git/</guid>
      <description>0 初始化配置 0.1 全局配置 安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址
git config --global user.name &amp;quot;gsemir0418&amp;quot; git config --global user.email &amp;quot;845217811@qq.com&amp;quot; // 查看全局配置 git config --list 0.2 配置SSH公匙 0.2.1 本地创建ssh key 打开终端，输入如下指令
ssh-keygen -t rsa -C &amp;quot;845217811@qq.com&amp;quot; 直接点回车，说明会在默认文件id_rsa上生成ssh key
然后系统要求输入密码，直接回车表示不设密码；重复密码是也可以直接回车，表示不设密码。
创建成功后，在终端输入如下指令，便可看到几个文件：
ls ~/.ssh id_rsa id_rsa.pub known_hosts vscode或vim打开id_rsa.pub，复制全部内容备用。
0.2.2 git账户设置ssh 进入github主页，进入Account Settings，左边选择SSH Keys，Add SSH Key,
title建议填写计算机名称，粘贴刚刚复制的key。确定后配置完成了
0.2.3 验证 输入以下指令验证配置是否成功：
ssh -T git@github.com 如果配置过密码，输入密码后，看到如下指令，则表示配置成功
You’ve successfully authenticated, but GitHub does not provide shell access 0.3 修改之前的http仓库为ssh // 查看当前远程仓库路径 git remote -v // 修改为ssh路径 git remote set-url origin [新路径] 0.</description>
    </item>
    
    <item>
      <title>UseState原理</title>
      <link>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 07 Aug 2021 22:15:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/usestate%E5%8E%9F%E7%90%86/</guid>
      <description>1 useState简单实现 1.1 示例  点击按钮，结果+1  import React from &amp;#34;react&amp;#34;; import ReactDOM from &amp;#34;react-dom&amp;#34;; const rootElement = document.getElementById(&amp;#34;root&amp;#34;); function App() { const [n, setN] = React.useState(0); return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{n}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setN(n + 1)}&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; ); } ReactDOM.render(&amp;lt;App /&amp;gt;, rootElement);  运行过程分析  首次render&amp;lt;App/&amp;gt;，调用App()方法，得到虚拟DOM，React会生成真实DOM 用户单击button，调用setN(n+1)，并再次render&amp;lt;App/&amp;gt;，调用App()方法，得到新的虚拟DOM，经过DOM Diff运算，React会更新真实DOM 每次调用App()，都会运行useState(0)   执行setN的时候会发生什么？n会变吗？App()会重新执行吗？  setN一定会修改某个数据x，而不是直接修改n，并将n+1存入x setN一定会触发&amp;lt;App/&amp;gt;重新渲染   每次重新执行App()时，都会执行useState(o)，那么n每次的值会有不同吗（即不为0）  每次n的值都会不同，说明useState肯定会从x读取n的最新值，而不是简单的初始化n为0   x  每个组件有自己的数据x，即state    1.</description>
    </item>
    
    <item>
      <title>JS专精-函数</title>
      <link>https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 07 Aug 2021 20:40:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</guid>
      <description>1</description>
    </item>
    
    <item>
      <title>Node进程与线程</title>
      <link>https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Fri, 06 Aug 2021 17:33:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>1 进程 1.1 进程 Process  场景  notepad.exe是一个程序，不是进程 双击notepad.exe时，操作系统会开启一个进程   定义  进程是程序的执行实例 程序在CPU上执行时的活动叫做进程   特点  一个进程可以创建另一个进程（父进程和子进程）例如Chrome浏览器的网页和插件 通过任务管理器可以看到进程    1.2 了解CPU   特点：
 一个单核CPU，在一个时刻，只能做一件事情 如何让用户同时看电影、听音乐、写代码呢 答案是在不同进程中快速切换（CPU频率） 以渣男交多个女朋友举例    多程序并发执行时
 多个程序在宏观上并行，微观上串行 每个进程会出现执行-暂停-执行的规律 多个进程之前会出现抢资源（如打印机队列）的现象    进程的两个状态：运行态与非运行态
  进程队列示意
  1.3 阻塞   等待执行的进程中
 都是非运行态 一些（A）在等待CPU资源 另一些（B）在等待I/O完成（如文件读取） 如果这时把CPU资源分配给B进程，B还是在等I/O（不占用CPU） B进程就是阻塞进程 因此，分派程序只会把CPU分配给非阻塞进程 比如和女朋友排队买饭，但她中途去厕所了，那么如果排到你们了就会让你去后面重新排队    进程的三个状态：运行，就绪，阻塞
  2 线程 2.</description>
    </item>
    
    <item>
      <title>Node技术架构</title>
      <link>https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 29 Jul 2021 20:54:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</guid>
      <description>1 Node.js概述 1.1 Node.js不是什么  不是web框架（Flask，Spring） 不是编程语言（Python，PHP）  1.2 Node.js是什么  是一个平台  将多种技术组合起来 让JavaScript也能调用系统接口，开发后端应用   Node.js搭建技术  V8引擎 libuv C/C++实现的c-ares（解析dns域名）、http-parser（解析http）、OpenSSL（加密解密）、zlib（数据压缩）等库    2 Node.js技术架构  https://github.com/yjhjstz/deep-into-node
 2.1 Node.js bindings   背景
 Node.js用C++对http_parser进行封装，使它符合某些要求（统一数据类型等），封装的文件叫做http_parser_bindings.cpp 用Node.js提供的编译工具将其编译为.node文件 JS代码可以直接require这个.node文件 这样JS就能调用C++库，中间的桥梁就是binding 由于Node.js提供了很多binding，所以加个s 这就是bindings    JS与C++交互
 http://nodejs.cn/api/addons.html#addons_function_arguments
   C++调用JS回调
 http://nodejs.cn/api/addons.html#addons_callbacks
   2.2 libuv   背景
 每个系统上的异步I/O（系统与外界（硬盘文件、打印机、网络请求）交互）都不一样 比如FreeBSD系统上有kqueue、Linux上有epoll、Windows上有IOCP Ryan为了一个跨平台的异步I/O库，开始写libuv libuv会根据系统自动选择合适的方案    功能</description>
    </item>
    
    <item>
      <title>Umi-Request配置</title>
      <link>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 09 Jul 2021 16:47:33 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/umi-request%E9%85%8D%E7%BD%AE/</guid>
      <description>utils/request.js
/** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request */ import { extend } from &amp;#39;umi-request&amp;#39;; import { notification } from &amp;#39;antd&amp;#39;; const codeMessage = { 200: &amp;#39;服务器成功返回请求的数据。&amp;#39;, 201: &amp;#39;新建或修改数据成功。&amp;#39;, 202: &amp;#39;一个请求已经进入后台排队（异步任务）。&amp;#39;, 204: &amp;#39;删除数据成功。&amp;#39;, 400: &amp;#39;发出的请求有错误，服务器没有进行新建或修改数据的操作。&amp;#39;, 401: &amp;#39;用户没有权限（令牌、用户名、密码错误）。&amp;#39;, 403: &amp;#39;用户得到授权，但是访问是被禁止的。&amp;#39;, 404: &amp;#39;发出的请求针对的是不存在的记录，服务器没有进行操作。&amp;#39;, 406: &amp;#39;请求的格式不可得。&amp;#39;, 410: &amp;#39;请求的资源被永久删除，且不会再得到的。&amp;#39;, 422: &amp;#39;当创建一个对象时，发生一个验证错误。&amp;#39;, 500: &amp;#39;服务器发生错误，请检查服务器。&amp;#39;, 502: &amp;#39;网关错误。&amp;#39;, 503: &amp;#39;服务不可用，服务器暂时过载或维护。&amp;#39;, 504: &amp;#39;网关超时。&amp;#39;, }; /** 异常处理程序 */ const errorHandler = (error) =&amp;gt; { const { response } = error; if (response &amp;amp;&amp;amp; response.</description>
    </item>
    
    <item>
      <title>NodeStream模块</title>
      <link>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Thu, 08 Jul 2021 14:07:04 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/nodejsstream%E6%A8%A1%E5%9D%97/</guid>
      <description>1.三个示例引入Stream 1.1 创建流 // 引入fs模块 const fs = require(&amp;#39;fs&amp;#39;) // 利用fs创建流 const stream = fs.createWriteStream(&amp;#39;./big_file.txt&amp;#39;) // 写数据 for (let i = 0; i &amp;lt; 100000; i++) { stream.write(`这是第${i}行内容，我们需要很多很多内容\n`) } // 关闭流 stream.end() console.log(&amp;#39;done&amp;#39;) //命令行执行 node 1.js   分析
 流程：打开流，多次往里面塞内容，关闭流 看起来就是可以多次写，没什么大不了的 最终得到一个100M左右的文件    Stream是水流，但默认没有水
  stream.write可以让水流中有水（数据）
  每次写入的数据片段叫做chunk（块）
  产生数据的一端叫做source
  接收数据的一端叫做sink
  1.2 浏览器直接读取文件 // 引入文件模块 const fs = require(&amp;#39;fs&amp;#39;) // 引入http模块 const http = require(&amp;#39;http&amp;#39;) // 开启服务器 const server = http.</description>
    </item>
    
    <item>
      <title>Object常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 07 Jul 2021 17:30:59 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>Object.assign()   用于将所有可枚举属性（属性能否被for…in查找遍历到）的值从一个或多个源对象复制到目标对象，返回目标对象
  语法：
Object.assign(target, ...sources) target目标对象；source源对象
  如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖，后面的源对象的属性将类似地覆盖前面的源对象的属性。
  只会拷贝源对象自身的并且可枚举的属性到目标对象。
  为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty()。深拷贝？
  示例：
// 复制一个对象 const obj = { a: 1 }; const copy = Object.assign({}, obj); console.log(copy); // { a: 1 }  // 合并对象 const o1 = { a: 1 }; const o2 = { b: 2 }; const o3 = { c: 3 }; const obj = Object.assign(o1, o2, o3); console.</description>
    </item>
    
    <item>
      <title>String常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 05 Jul 2021 13:29:15 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>String.prototype.match()   根据传入的正则表达式的检索字符串并返回结果
  语法：
str.match(regexp)   例子
   String.prototype.search()   根据传入的正则表达式寻找符合的字符位置
  语法
str.search(regexp)   如果匹配，则返回首次匹配项的索引；反之返回-1
  例子：
const str = &amp;#39;hello World&amp;#39; str.search(/[A-Z]/g)// 6 str.search(/[.]/g)// -1   String.prototype.chatAt()   从一个字符串中返回指定index的字符
  语法
str.chartAt(index) 若没有提供index，则默认使用0
  例子
const str = &amp;#39;ABCD&amp;#39; str.charAt(1)// &amp;#34;B&amp;#34;   String.prototype.indexOf()   查询字符串对象中第一次出现指定值的索引
  语法：
str.indexOf(searchValue, fromIndex) fromIndex可选，表示开始查找的位置，默认为0，若指定为负数，则等价于传入0；若大于str.length，则必反回-1
indexOf区分大小写</description>
    </item>
    
    <item>
      <title>数据库基础</title>
      <link>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 05 Jul 2021 08:57:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
      <description>1 第一二三范式 1 第一范式 1NF   定义：字段不可再分
  举例：存储体检者的双眼视力，应分为左眼视力和右眼视力两个字段
即user表里应有left_eye和right_eye，而不能存为一个字段
  缺点：
​	这是一个学生选课表，没有违反第一范式，但是存在如下问题：
​	数据冗余、创建系时插入异常、删除学生会导致系消失、学生转系时改动多处
​	结论：第一范式不够强
  2 第二范式 2NF   定义：
 在1NF的基础上，要有键（键可由多个字段组合） 所有字段必须分别完全依赖于键 如果键是多个字段组合，则不允许部分依赖于该键    依赖关系：
 给出键，就能唯一确定字段的值 如给出学号，就能唯一确定姓名，反之则不行 则称姓名依赖于学号    不满足第二范式的地方：
 上表的键为（学号、课名） 但存在部份依赖：姓名依赖与学号    改进：
 选课表（学号，课名，分数） 学生表（学号，姓名，系名，系主任）    3 第三范式 3NF   定义：
 一个表里不能有两层依赖 给出学号，就能确定系名——系名依赖于学号 给出系名，就能确定系主任——系主任依赖与系名 所以，系主任间接依赖于学号    解决办法：</description>
    </item>
    
    <item>
      <title>Sequelize ORM</title>
      <link>https://gsemir0418.github.io/posts/sequelize.js/</link>
      <pubDate>Fri, 02 Jul 2021 11:01:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/sequelize.js/</guid>
      <description>1 MySQL数据类型 MySQL支持的数据类型比较少，主要有五种类型：
 数字类型 字符串类型 时间和日期类型 JSON类型 其他特殊类型   id 可以指定类型为serial序列，时间格式最好使用ISO 8601格式，即2021-07-02T11:01:55+08:00
 2 Sequelize使用  官方文档：   sequelize.org/master/manual/getting-started.html
  安装：  yarn add sequelize yarn add mysql2  使用：  // 引入 const { Sequelize, Model, DataTypes } = require(&amp;#39;sequelize&amp;#39;) // 创建sequelize连接 const sequelize = new Sequelize(&amp;#39;gsq&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;12345&amp;#39;, { host: &amp;#39;localhost&amp;#39;, dialect: &amp;#39;mysql&amp;#39;, }) // 创建User模型 class User extends Model { } // 初始化User表 User.</description>
    </item>
    
    <item>
      <title>Node.js连接数据库</title>
      <link>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Fri, 02 Jul 2021 09:24:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>1 安装mysql依赖包 yarn add mysql 2 创建mysql连接 创建连接前，确保容器是开启状态。新建test.js文件。
 引入mysql模块  const mysql = require(&amp;#39;mysql&amp;#39;)  创建连接  const connection = mysql.createConnection({ host: &amp;#39;localhost&amp;#39;, // 老版本的docker需要填ip  user: &amp;#39;root&amp;#39;, password: &amp;#39;12345&amp;#39; }) connection.connect();  创建数据库  // 创建数据库 connection.query(&amp;#39;CREATE DATABASE IF NOT EXISTS gsq DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_unicode_520_ci;&amp;#39;, (error, results, fields) =&amp;gt; { if (error) throw error; console.log(results) }) 创建名为gsq的数据库（数据库不存在的情况下），并指定默认字符集为utf8mb4(mysql对于utf-8字符集支持不佳)
 创建数据表  // 选择数据库 connection.query(&amp;#39;use gsq;&amp;#39;) // 创建表 connection.</description>
    </item>
    
    <item>
      <title>Docker安装MySQL</title>
      <link>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</link>
      <pubDate>Fri, 02 Jul 2021 08:36:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/docker%E5%AE%89%E8%A3%85mysql/</guid>
      <description>1 win10安装Docker  https://hub.docker.com/
 注册登录并下载安装Docker Desktop。
 启用Hyper-V  右键Windows按钮并选择“应用和功能”，选择相关设置中的“程序和功能”，选择“启用或关闭Windows功能”，选择Hyper-V，单机确定。
 启用CPU的虚拟化  进入BIOS界面，找到Virtualization Technology选项，将disabled改为enabled。
 更新WSL2  如果出现WSL 2 installation is incomplete的报错，则需要更新WSL 2。
 https://aka.ms/wsl2kernel
 根据文档下载最新包，安装重启即可。
2 Docker安装MySQL docker run --name mysql1 -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:8.0.25 其中name是容器的名字；-e是环境变量，配置的MYSQL_ROOT_PASSWORD是mysql密码；-p是端口映射，左侧是本机端口号，右侧是虚拟机端口号；-d表示程序持续运行；最后指定mysql的版本号为8.0.25。
安装完成后，在docker desktop中可以发现mysql1的容器已开启，或者在命令行输入docker ps查看全部在运行的容器。
3 Docker常用命令 docker ps 查看容器运行状态
docker start mysql1 启动mysql1容器
docker kill mysql1 关闭容器mysql1
docker container run mysql1 开启刚刚关掉的容器
docker rm mysql1 删除容器，必要时可加-f选项
docker run xxx 启动新容器</description>
    </item>
    
    <item>
      <title>杂七杂八</title>
      <link>https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</link>
      <pubDate>Wed, 30 Jun 2021 16:25:00 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</guid>
      <description>改变数组中对象的属性名称
blog.csdn.net/weixin_43709908/article/details/105581923
Replace 替换全部字符
blog.csdn.net/qq_40138785/article/details/81457849</description>
    </item>
    
    <item>
      <title>NodeHTTP模块</title>
      <link>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 30 Jun 2021 09:55:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</guid>
      <description>0 准备工作 1 ts-node-dev  当文件更新时自动重启node 避免每次改完代码都要重新运行的麻烦 可以用TS开发Node.js程序，且会自动重启 不宜在生产环境使用，但非常适合用来学习  安装
npm -g i ts-node-dev 要用npm安装 ，用yarn安装的话使用时会报错。。无法识别“ts-node-dev”命令，不知道为什么。
2 VSCode配置 配置自动保存与保存后自动格式化：
ctrl shift p打开首选项：打开设置(ui)，AutoSave修改为onFocusChange，搜索format，勾选Format On Save开启保存后自动格式化。
3 curl  GET请求：curl -v url POST请求：curl -v -d “name=gsq&amp;quot; url 设置请求头：-H &#39;Content-Type:application/json&#39; 设置动词：-X PUT JSON请求：curl -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;bob&amp;quot;}&#39; -H &#39;Content-Type:application/json&#39; url 后面会用到curl来构造请求  1 创建项目  初始化项目：  yarn init -y  安装@types/node声明文件  yarn add --dev @types/node  新建index.ts  // 引入http模块 import * as http from &amp;#39;http&amp;#39; // 用http创建server const server = http.</description>
    </item>
    
    <item>
      <title>调试Nodejs</title>
      <link>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</link>
      <pubDate>Wed, 30 Jun 2021 09:40:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</guid>
      <description>1 VSCode调试Node.js 在launch.json中添加配置
{ // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;, &amp;#34;configurations&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;pwa-node&amp;#34;, &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;,// 会用node来启动 &amp;#34;name&amp;#34;: &amp;#34;cli add task&amp;#34;, &amp;#34;skipFiles&amp;#34;: [ &amp;#34;&amp;lt;node_internals&amp;gt;/**&amp;#34; ], &amp;#34;program&amp;#34;: &amp;#34;${workspaceFolder}\\cli.js&amp;#34;,// 入口文件 &amp;#34;args&amp;#34;: [&amp;#34;add&amp;#34;,&amp;#34;task&amp;#34;,&amp;#34;200&amp;#34;]// 参数 } ] } 点击启动即可在调试控制台查看运行情况
2 命令行结合Chrome调试Node.js 命令行中输入
node --inspect-brk cli add task2 打开浏览器，F12检查页面，几秒钟后上方会出现node图标，点进去即可对node程序进行调试了。</description>
    </item>
    
    <item>
      <title>单元测试之文件模块</title>
      <link>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 29 Jun 2021 08:43:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>安装jest
yarn add -dev jest 在package.json中添加test命令
&amp;#34;scripts&amp;#34;:{ &amp;#34;test&amp;#34;:&amp;#34;jest&amp;#34; } 新建__tests__文件夹，单元测试文件一般命名为xx.unit.js或者xx.spec.js，下面是测试示例，测试db中的read和write是否为方法：
const db = require(&amp;#39;../db.js&amp;#39;) describe(&amp;#39;db&amp;#39;, () =&amp;gt; { it(&amp;#39;read is a function&amp;#39;, () =&amp;gt; { expect(db.read instanceof Function).toBe(true) }) it(&amp;#39;write is a function&amp;#39;, () =&amp;gt; { expect(db.write instanceof Function).toBe(true) }) }) 运行
yarn test 一般单元测试为白盒测试，知道代码是怎么编写的
单元测试不应该与外界打交道，不能操作硬盘、网络等
单元测试的对象是函数
功能测试的对象是模块
集成测试的对象是系统
在__test__同级目录下创建__mocks__，新建fs.js，在test文件开头就要写
jest.mock(&#39;&#39;) 未完待续。。。 </description>
    </item>
    
    <item>
      <title>Array常用方法整理</title>
      <link>https://gsemir0418.github.io/posts/array/</link>
      <pubDate>Mon, 28 Jun 2021 09:30:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/array/</guid>
      <description>Array.prototype.map() 1.关键词：遍历
2.是否修改原数组：false
3.返回值：
newArray[]，回调函数的结果组成了新数组的每一个元素。
4.语法：
var new_array = arr.map((currentValue, index, array) =&amp;gt; { // callback })  currentValue：callback数组中正在处理的当前元素； index：可选，callback数组中正在处理的当前元素的索引； array：可选，map方法调用的数组，几乎不用  5.描述
map 方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。
因为map生成一个新数组，当你不打算使用返回的新数组却使用map是违背设计初衷的，请用forEach或者for-of替代。
callback 函数会被自动传入三个参数：数组元素，元素索引，原数组本身。
6.示例
// 求数组中每个元素的平方根 const arr = [4, 9, 16] const newArr = arr.map(Math.sqrt)// [2, 3, 4]  // 使用map重新格式化数组中的对象 const arr = [ { key:1, value:10 }, { key:2, value:20 } ] const newArr = arr.</description>
    </item>
    
    <item>
      <title>React入门</title>
      <link>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 25 Jun 2021 23:11:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</guid>
      <description>1.React是什么 用于构建用户界面的JS库（操作DOM呈现页面）
是一个将数据渲染为HTML视图的开源的JavaScript库
 官网：https://react.docschina.org/
 2.谁开发的 Facebook
3.为什么要学   原生JS操作DOM繁琐、效率低（DOM-API操作UI）
  使用js直接操作DOM，浏览器会进行大量的重绘重排
  原生js没有组件化的编码方案，代码复用率低
模块化是针对js的，可以把js拆分成独立的功能模块，方便复用。但是html结构和css样式，包括字体图片音频视频等，复用率低。
  4.React的特点   用组件化模式、声明式编码，提高开发效率及组件复用率
之前使用的是命令式编码，面向过程。比如我想喝一杯水，需要命令别人先站起来，再走到水杯旁，把我帮我拿过来等等的步骤；但是声明式编码只需我说嗓子干了，自动就会帮我把水拿过来。
  在React Native中可以使用React语法进行移动端开发。
React Native可以使得前端开发人员使用最熟悉的js来编写安卓和ios应用。
  使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互
  ​	虚拟DOM发生改变后会对比之前的虚拟DOM，从而减少真实DOM的更新渲染过程
5. React基本使用 5.1 js库引入（注意引入顺序） 1.react.development.js：react核心库
2.react-dom.development.js：提供操作DOM的react扩展库
3.babel.min.js：解析JSX语法代码转为js代码的库
5.2 虚拟DOM的创建 5.2.1 关于虚拟DOM （1）本质上是object类型的一般对象
（2）虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是react内部在用，无需真实DOM上那么多属性
（3）虚拟DOM最终会被React转化为真实DOM，呈现在页面上
5.2.2 创建的两种方式 （1）纯js方式
const VDOM = React.createElement(&amp;#39;标签名&amp;#39;,{标签属性},&amp;#39;标签内容&amp;#39;) const VDOM = React.createElement(&amp;#39;h1&amp;#39;,{id:&amp;#39;title&amp;#39;},&amp;#39;React.createElement(&amp;#39;span&amp;#39;,{},&amp;#39;HELLO REACT!&amp;#39;)&amp;#39;) ​	可以看到，若遇标签嵌套情况，利用纯js来写非常复杂。
（2）JSX方式
​	是react 定义的一种类似于 XML 的 JS 扩展语法: JS + XML。本质是React.</description>
    </item>
    
    <item>
      <title>初识Hooks</title>
      <link>https://gsemir0418.github.io/posts/reacthooks/</link>
      <pubDate>Fri, 25 Jun 2021 23:07:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/reacthooks/</guid>
      <description>1 Hook简介 1.1 基本概念 Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使⽤ state 以及其他的 React 特性。
1.2 React Hooks优势   函数组件不能使⽤state，⼀般只⽤于⼀些简单⽆交互的组件，⽤作信息展示，即我们上⾯说的傻⽠组件使⽤，如果需要交互更改状态等复杂逻辑时就需要使⽤class组件了
React Hooks让我们更好的拥抱函数式编程，让函数式组件也能使⽤state功能，因为函数式组件⽐class组件更简洁好⽤，因为React Hooks的出现，相信未来我们会更多的使⽤函数式组件
  副作⽤问题
我们⼀般称数据获取、订阅、定时执⾏任务、⼿动修改ReactDOM这些⾏为都可以称为副作⽤由于React Hooks的出现，我们可以使⽤useEffect来处理组件副作⽤问题，所以我们的函数式组件也能进⾏副作⽤逻辑的处理了
  有状态的逻辑重⽤组件
  复杂的状态管理
之前我们使⽤redux、dva、mobx第三⽅状态管理器来进⾏复杂的状态管理
现在我们可以使⽤useReducer、useContext配合使⽤实现复杂状态管理，不⽤再依赖第三⽅状态管理器
  开发效率和质量问题
函数式组件⽐class组件简洁，开发的体验更好，效率更⾼同时应⽤的性能也更好
   2 useState 2.1 定义 useState：组件状态管理钩⼦，使函数组件能够使⽤state
2.2 基本使用 const [state,setState]=useState(initState)  state是要设置的状态 setState是更新state的⽅法，只是⼀个⽅法名，可以随意更改 initState是初始的state，可以是随意的数据类型，也可以是回调函数，但是函数必须是有返回值  2.3 实际应用 import React, { useState } from &amp;#39;react&amp;#39; export default function UseS() { const [count, setState] = useState(0) return ( &amp;lt;div&amp;gt; &amp;lt;div&amp;gt;你点击了{count}次&amp;lt;/div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setState(count + 1)}&amp;gt;点 击&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ) }  3 useEffect 3.</description>
    </item>
    
    <item>
      <title>Node文件模块</title>
      <link>https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 25 Jun 2021 14:40:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>1 待办事项命令行程序需求   功能：
  可以列出所有的todo；
  新增、编辑、删除todo；
  修改todo状态为已完成/未完成
    命令
t t add 任务名 t clear   2 创建命令行项目  空文件夹下，执行：  yarn init -y -y表示跳过交互式对话（确定版本等信息），根据默认值生成package.json
 创建index.js，引入commanderjs库，添加add和clear子命令：  const program = require(&amp;#39;commander&amp;#39;); program .option(&amp;#39;-x,--xxx&amp;#39;, &amp;#39;desc of x&amp;#39;)// x选项 即在node index命令后输入的选项 program .command(&amp;#39;add&amp;#39;)// 子命令 	.description(&amp;#39;add a task&amp;#39;)// 子命令描述 	.action((...args) =&amp;gt; { //拿到用户输入的所有字符串参数  const words = args.slice(0,-1).join(&amp;#39; &amp;#39;)// 由于最后一个参数默认是command对象，因此需要对参数进行预处理 	}) program .</description>
    </item>
    
    <item>
      <title>React组件生命周期</title>
      <link>https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Fri, 25 Jun 2021 11:09:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>1 生命周期的理解 1.1 引出生命周期  需求：
 让指定的文本做显示* */* 隐藏的渐变动画 从完全可见，到彻底消失，耗时2S 点击“不活了”按钮从界面中卸载组件   源码及笔记如下：
class Life extends React.Component { //只要页面发生更新，则说明是状态在驱动  state = { opacity: 0.5 } death = () =&amp;gt; { ReactDOM.unmountComponentAtNode(document.getElementById(&amp;#39;test&amp;#39;)) } //和render一样 是由React帮忙调用的 因此不用写成箭头函数的形式  //执行时机：组件挂载到页面后  componentDidMount() { //起个名字 挂到实例自身 方便清除时用  this.timer = setInterval(() =&amp;gt; { //获取状态值  let opacity = this.state.opacity //每次-0.1  opacity -= 0.1 if (opacity &amp;lt;= 0) opacity = 1 //设置新的透明度  this.</description>
    </item>
    
    <item>
      <title>React Hooks全解</title>
      <link>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</link>
      <pubDate>Tue, 01 Jun 2021 17:02:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</guid>
      <description>1.useState 使用状态 const [n, setN] = React.useState(0) const [user, setUser] = React.useState({name:&amp;#39;F&amp;#39;}) 注意事项1：不可局部更新 const [user, setUser] = useState({name:&amp;#39;Jack&amp;#39;,age:18}) setState({ name:&amp;#39;Sam&amp;#39; })   结果得到的是{name:&amp;lsquo;Sam&amp;rsquo;}，age属性消失了
  （可以在之前加上&amp;hellip;user，表示复制user的全部属性到这个新对象中）
  说明对于state不能部分setState，因为setState不会帮我们合并属性
  实际上React中所有hooks都不能自动合并属性，需要我们自己去操作
  注意事项2：地址要变 setState(obj)如果obj地址不变，那么React就认为数据没有变化
const [user, setUser] = useState({name:&amp;#39;Jack&amp;#39;,age:18}) user.name = &amp;#39;Sam&amp;#39; setState(user)  表面上我们先改变了user对象的name属性（实际上也确实改变了），再将user对象setState进去，setState之后的user对象并没有改变。 对于React来说，对象还是user（地址没变），因此React不认为user改变了，依然加载的是原来的user。 上一个例子，是在setState中创建了一个新对象，因此React会直接加载新的对象（这也反映了setState并不会直接修改state，而是生成一个新的state）  useState接受函数 const [state, setState] = useState(() =&amp;gt; { return initState }) 该函数返回初始state，且只执行一次，节约反复更新渲染组件时js引擎的解析时间（首次渲染时会解析，再次更新组件时js就不会解析这个匿名函数了）
setState接受函数 const [n, setN] = useState(0) setN(n + 1) setN(n + 1) 虽然运行了两次setN，但运行结果为1，并不是预想中的2，原因同样是由于setN并不会改变n的值，n始终为0</description>
    </item>
    
    <item>
      <title>可视化大屏技术</title>
      <link>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 28 May 2021 09:30:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</guid>
      <description>1 背景和意义 数据可视化即把相对复杂、抽象的数据通过可视化的方式以人们更易理解的形式展示出来的一系列手段，旨在更形象地表达数据内在的信息和规律，促进数据信息的传播和应用。在当前Web前端可视化技术的支持下，数据可视化除了“可视”，还有可交流、可互动的特点。数据可视化的本质是数据空间到图形空间的映射。是抽象数据的具象表达。
大屏数据可视化是以大屏为主要展示载体的数据可视化设计。基于大屏展示“大面积、炫酷动效、丰富色彩”等主要特征，通过关键信息大屏共享的方式可方便企业团队讨论与决策，因此大屏也常应用与数据分析监测领域。目前大屏数据可视化主要分为信息展示、数据分析及监控预警三大类。
随着大数据的发展，可视化大屏在各个行业的应用越来越广泛，尤其是在政府、商业、金融、制造等行业的业务场景中。例如，可视化大屏作为传递信息的有效手段，在城市智能运营中心、应急指挥中心、公安监控中心、电力调度中心、金融交易大厅等部门和机构中发挥着重要作用；同时它具有日常监测、分析判断、应急指挥、展示汇报等多种功能，在提高科学管理方面也发挥着重要作用。
2 技术原理 数据可视化展示大屏主要基于React框架、ECharts可视化图表库、CSS布局与适配以及特效制作等Web前端可视化开发技术。
2.1 React框架 React是一个声明式，高效且灵活的用于构建用户界面的JavaScript库。使用React可以将一些简短、独立的代码片段组合成复杂的UI界面，这些代码片段被称作“组件”。数据可视化展示大屏中的每个展示模块均可封装为独立的组件，方便复用与后期维护。
2.2 大屏适配公式 可视化大屏设计稿的比例通常为16:9，为了保证其在不同分辨率及屏幕比例上的展示效果，在开发时需运用大屏适配算法对大屏尺寸信息进行换算。
公式1.1为大屏尺寸适配公式，其中Wp为页面有效宽度，Hp为页面有效高度。
2.3 元素适配公式 锁定好大屏尺寸后，需要利用到CSS3中新增的rem单位结合适配公式，对大屏内部各元素的尺寸针对不同比例的屏幕进行适配。
Rem（Root em）是CSS3新增的一个相对单位，使用rem为元素设定相对尺寸时，相对的只是HTML根元素。通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。公式1.2为内部元素尺寸适配公式。
2.4 ECharts可视化图表库 ECharts是一个使用JavaScript实现的开源可视化库，涵盖各行业图表，满足各种需求。其主要特点如下：
 丰富的可视化类型：提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap、旭日图，多维数据可视化的平行坐标，还有用于BI的漏斗图，仪表盘，并且支持图与图之间的混搭。 多种数据格式无需转换直接使用：内置的dataset属性（4.0+）支持直接传入包括二维表，key-value等多种格式的数据源，此外还支持输入TypedArray格式的数据。 千万数据的前端展现：通过增量渲染技术（4.0+），配合各种细致的优化，ECharts能够展现千万级的数据量。 移动端优化：针对移动端交互做了细致的优化，例如移动端小屏上适于用手指在坐标系中进行缩放、平移。PC端也可以用鼠标在图中进行缩放（用鼠标滚轮）、平移等。 多渲染方案，跨平台使用：支持以Canvas、SVG（4.0+）、VML的形式渲染图表。 深度的交互式数据探索：提供了图例、视觉映射、数据区域缩放、tooltip、数据刷选等开箱即用的交互组件，可以对数据进行多维度数据筛取、视图缩放、展示细节等交互操作。 多维数据的支持以及丰富的视觉编码手段：对于传统的散点图等，传入的数据也可以是多个维度的。 动态数据：数据的改变驱动图表展现的改变。 绚丽的特效：针对线数据，点数据等地理数据的可视化提供了吸引眼球的特效。 通过GL实现更多更强大绚丽的三维可视化：在VR，大屏场景里实现三维的可视化效果。  3 技术实现方案 3.1 大屏设计流程   根据业务场景抽取关键指标
关键指标是一些概括性词语，是对一组或者一系列数据的统称。一般情况下，一个指标在大屏上独占一块区域。以supAPS为例，这里的关键指标有：原料库存、计划实际对比、产品库存与库存成本等。确定关键指标后，根据业务需求拟定各个指标展示的优先级（主、次、辅）。
  选定可视化图表类型
同一个指标的数据，从不同维度分析就有不同结果。当确定好各项指标的分析维度后，事实上图表类型也就基本确定了。如库存成本选用柱状图的形式，装置加工选用表格的形式，计划实际对比选择折线图的形式等。
  页面布局
图表类型和屏幕尺寸确立后，接下来要对设计稿进行页面布局的划分。核心业务指标安排在中间位置、占较大面积；其余的指标按优先级依次在核心指标周围展开。一般把有关联的指标让其相邻或靠近，把图表类型相近的指标放一起，这样能减少观者认知上的负担并提高信息传递的效率。
  页面开发
在定义好分析指标、确定页面布局后，进行前端样式的开发工作，将数据接入到前端并呈现出来。
  整体细节调优与测试
  页面开发完成后，将真实页面投放到大屏进行的测试与优化。主要分为两部分：
1）视觉方面的测试：关键视觉元素、字体字号、页面动效、图形图表等是否按预期显示、有无变形、错位等情况。
2）性能与数据方面的测试：图形图表动画是否流畅、数据加载、刷新有无异常；页面长时间展示是否存在奔溃、卡死等情况；后台控制系统能否正常切换前端页面显示。
  3.2 大屏适配 基于大屏适配公式，计算页面尺寸。
const clientWidth = document.</description>
    </item>
    
    <item>
      <title>React基础</title>
      <link>https://gsemir0418.github.io/posts/react%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 29 Apr 2021 23:11:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/react%E5%9F%BA%E7%A1%80/</guid>
      <description>1 React定义组件 1.1 函数式组件  函数式组件适用于简单组件的定义，其首字母需大写，且虚拟DOM元素必须有结束标签 函数组件中的this指向为window，但babel编译后默认开启了严格模式，因此结果为undefined 返回的虚拟DOM元素只能有一个根元素 渲染函数式组件的过程：  React解析组件标签，找到了Demo组件 发现组件式使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM。随后呈现在页面中    function Demo(){ console.log(this);//undefined 	return &amp;lt;h1&amp;gt;函数式组件，适用于简单组件的定义&amp;lt;/h1&amp;gt; } ReactDOM.render(&amp;lt;Demo/&amp;gt;,document.getElementById(&amp;#39;test&amp;#39;)) 1.2 类式组件   继承React.Component类，组件名首字母必须大写，且虚拟DOM元素必须有结束标签
  必须有render()方法，且render方法必须有返回值，返回的虚拟DOM元素只能有一个根元素
  渲染类式组件的过程
1.React 内部会创建组件实例对象
2.调用 render()得到虚拟 DOM, 并解析为真实 DOM
3.插入到指定的页面元素内部
  class MyComponent extends React.Component{ render(){ //render放在MyComponent的原型对象（React.Component）上，供实例使用 	//render中的this指向MyComponent实例对象（组件实例对象） 	console.log(&amp;#39;render方法中的this指向：&amp;#39;,this); return &amp;lt;h1&amp;gt;类式组件，适用于复杂组件的定义&amp;lt;/h1&amp;gt; } } ReactDOM.render(&amp;lt;MyComponent/&amp;gt;,document.getElementById(&amp;#39;test&amp;#39;))  2 组件实例三大属性 2.1 state 2.1.1 state基本使用 state 是组件对象最重要的属性，值是对象(可以包含多个 key-value 的组合)</description>
    </item>
    
    <item>
      <title>展示平台说明文档</title>
      <link>https://gsemir0418.github.io/posts/%E5%B1%95%E7%A4%BA%E5%B9%B3%E5%8F%B0%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 08 Jan 2021 23:15:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/%E5%B1%95%E7%A4%BA%E5%B9%B3%E5%8F%B0%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</guid>
      <description>1. 模型展示页面 ​	模型展示页面是基于There.js库、模型和材质加载器以及控制器，实现模型在web端的简单展示。具体实现逻辑已写好，用户只需修改obj模型路径等简单操作即可实现模型展示demo。obj模型导出及注意事项见3dsMax技术文档。模板已发布到GitHub供读者学习参考：
 https://github.com/GSemir0418/TemplateProjects
 ​	下图为项目目录结构：
​	其中，js文件夹包含全部Javascript脚本文件，models文件夹用来存储obj模型，index.html是项目的主页。
​	js文件夹中，除index.js外，均是由Three.js为我们提供的模型加载器和控制器脚本文件。而页面的主要逻辑全部封装到了index.js中。
1.1 更改网页名称 ​	在index.html文件中，修改&amp;lt;title&amp;gt;标签内的内容即可：
&amp;lt;title&amp;gt;XXX村寨模型展示&amp;lt;/title&amp;gt; 1.2 修改模型路径 ​	首先将obj模型拷贝至models文件夹下。
​	在js/index.js文件中，修改15和16行的代码如下：
//模型路径 let mat1 = &#39;./models/testobj/lancuiting.mtl&#39;; let obj1 = &#39;./models/testobj/lancuiting.obj&#39;; ​	注意路径使用相对路径。
1.3 控制模型体积 ​	js/index.js文件中，修改51行代码中的参数即可，注意三个数字应保持一致：
model1.scale.set(1.4, 1.4, 1.4); 1.4 其他可配置选项 ​	如需修改灯光位置及强度，可以修改js/index.js文件中46和47行代码：
//括号中的2为强度 let dLight = new THREE.DirectionalLight(0xFFFFFF, 2); //光源的位置 dLight.position.set(500, 1000, 4000);  2. Turn.js翻页特效 ​	展示平台的第一个模块是少数民族建筑特征分析。针对大量的图文资料，传统的页面布局得不到很好的展示与交互效果。为提高用户体验，选择类似书本翻页的形式作为展示图文视频资料的方式。Turn.js是一个JavaScript库，利用HTML5的所有优点，可以使内容呈现起来像一本真正的书或杂志。
​	关于Turn.js的入门教程可以看siki学院的免费课程，也可以通过官网进行学习。
 siki学院：http://www.sikiedu.com/course/517/tasks
Turn.js官网：http://www.turnjs.com/
 ​	由于少数民族建筑资料篇幅较多，文章内容比较复杂，且Turn.js并没有为用户提供书页模板，全部样式都是用户在CSS中定义的。考虑到书页制作的便捷性与美观性，选择PPT来制作展示书籍的内容，再以加载图片的方式将内容加载到网页端，实现具有翻页效果的少数民族建筑特征分析资料展示模块。</description>
    </item>
    
    <item>
      <title>3dsMax技术文档</title>
      <link>https://gsemir0418.github.io/posts/3dmax%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 08 Jan 2021 16:41:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/3dmax%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</guid>
      <description>1. 3dsMax概述 ​	3dsMax是由AutoDesk公司开发的三维模型与动画制作渲染软件，它被广泛应用于多个领域，包括游戏设计、广告设计、建筑设计和影视制作等。其优点是具有强大的材质编辑和灯光处理功能，并且相关的学习资源非常丰富。在后期的模型渲染上功能强大，能够得到逼真的模型。同其他建模软件相比，3dsMax创建的模型面片数量较少，占用空间小，模型的处理速度也比较快。本课题正是应用其强大的模型兼容性以及材质编辑功能，作为单体建筑模型后期纹理映射和OBJ模型导出的重要软件。
 2. 3dsMax软件安装 ​	3dsMax软件发展至今，从最初的3D Studio MAX 1.0开始，其版本迭代更新二十余次，截至文章发布前，Autodesk公司已推出3dsMax 2021。考虑到兼容性、稳定性等问题，推荐安装3dsMax 2016之后的版本。
​	本章以3dsMax 2020软件安装为例，详细介绍软件安装的过程及注意事项。
2.1 解压缩安装包 ​	将安装包及注册机文件解压缩至目标文件夹，注意目标文件夹名称及路径应保证全英文。
​	为防止安装破解过程中出现未知错误，建议安装前关闭所有杀毒软件。
2.2 安装软件 ​	进入安装包文件夹，右键单击Setup.exe，选择以管理员身份运行；
​
在打开的窗口中选择安装（在此计算机安装）。
许可协议选择我接受，单击下一步。
设置安装路径后，点击安装即可。注意路径仍要保证全英文。
安装完成后，选择立即启动。
2.3 破解软件 ​	第一次进入软件后，选择enter a serial number输入序列号。
​	选择 I Agree我同意。
​	进入激活页面，选择Activate激活。
​	在Serial Number栏中填写序列号666-69696969，单击Next。
​	第一次会提醒”检测到无效的序列号“，此时选择重新输入，将序列号再次输入即可。
​	当进入到激活选项窗口，复制Request code请求码。右键单击安装包中的xf-adesk20.exe破解工具，选择以管理员身份运行。
​	将请求码复制到破解工具中的Request栏后，先单击Patch，再点击Generate，复制Activation栏中自动生成的激活码。
​	拿到激活码后，回到激活选项页面，选择I have an activation code from Autodesk，把激活码复制到输入框后，点击Next。
​	激活完成，选择Finish退出激活窗口。
​	至此，3dsMax 2020安装完成。
2.4 修改软件语言 ​	3dsMax软件支持简体中文，切换中文版本也很简单，点击开始，找到Autodesk文件夹，选择3dMax 2020 - simplified Chinese即可。</description>
    </item>
    
    <item>
      <title>Revit建模技术文档</title>
      <link>https://gsemir0418.github.io/posts/revit%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sun, 03 Jan 2021 16:41:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/revit%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</guid>
      <description>1. Revit概述 2.安装软件 3.点云数据导入 3.1 直接导入 3.2 Recap 4.构件族与模型搭建 4.1 建模流程概述 4.2 轴网布局 4.3 木框架搭建 4.4 屋顶 4.4.1 歇山式屋顶 4.4.2 悬山式屋顶 4.5 门板 4.6 其他构件 4.7 FBX模型导出 5.绘制施工图纸 </description>
    </item>
    
    <item>
      <title>StartBlog</title>
      <link>https://gsemir0418.github.io/posts/startblog/</link>
      <pubDate>Sun, 03 Jan 2021 16:41:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/posts/startblog/</guid>
      <description>Step1 安装hugo  下载链接：https://github.com/gohugoio/hugo/releases
 选择最新版本进行安装（建议安装hugo_extended版本）。
注意解压后需配置环境变量，可以使用version命令测试是否配置成功：
hugo version Step2 新建博客站点 使用命令行，输入如下命令新建博客站点：
hugo new site BLOGNAME Step3 下载并配置主题  主题下载链接：https://themes.gohugo.io/
 官网提供了许多主题供用户选择，按照主题下的安装配置说明进行主题的下载与配置。
这里以Diary主题为例，首先在博客的根目录下，使用终端进行git初始化：
git init 并执行：
git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary 主题会自动下载至根目录下的themes文件夹中。下载完成后，启动hugo本地服务并指定该主题：
hugo server -t diary --buildDrafts 可以通过访问localhost:1313进入本地部署的博客站点。可以看到，hugo已经为我们配置好了下载的主题。
Step4 新建博客 同样，在终端中执行：
hugo new post/文章名称.md 可以使用Typora来编辑文章，就像我现在这样。
Step5 部署到github 首先进入自己的github，新建一个repository，注意名称要使用小写昵称全名.github.io。
在终端执行：
hugo --theme=diary --baseUrl=&amp;quot;https://gsemir0418.github.io/&amp;quot; --buildDrafts 此时在根目录下，hugo为我们生成了一个public文件夹，我们只需利用github将此文件夹上传到库中即可。
在public文件夹下，进行git初始化。
git init git add . git commit -m &amp;quot;v0&amp;quot; 此时需要注册GitHub信息
git config --global user.email &amp;quot;you@example.com&amp;quot; git config --global user.</description>
    </item>
    
  </channel>
</rss>
