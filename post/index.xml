<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Even - A super concise theme for Hugo</title>
    <link>https://gsemir0418.github.io/post/</link>
    <description>Recent content in Posts on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Apr 2022 14:39:41 +0800</lastBuildDate><atom:link href="https://gsemir0418.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端面试TS</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95ts/</link>
      <pubDate>Fri, 22 Apr 2022 14:39:41 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95ts/</guid>
      <description>1 TS和JS的区别是什么 语法层面 TypeScript = JavaScript + Type （TS是JS的超集） 执行环境层面 浏览器、Node.js可以直接执行JS，但不能执行TS 编译层面 TS</description>
    </item>
    
    <item>
      <title>前端面试工程化</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Fri, 22 Apr 2022 12:20:21 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>1 常见loader和plugin有哪些，二者的区别是什么？ 常见loader babel-loader 把ES6+转义为ES5 ts-loader 把TS编译为JS，并提示类型错误 markdown-loader 把ma</description>
    </item>
    
    <item>
      <title>前端面试React</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95react/</link>
      <pubDate>Thu, 31 Mar 2022 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95react/</guid>
      <description>1 虚拟DOM的原理是什么 1.1 是什么 虚拟DOM就是虚拟节点。React用JS对象来模拟DOM节点，然后将其渲染成真实的DOM节点 1.2 怎么做 模拟（J</description>
    </item>
    
    <item>
      <title>手写发布订阅</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
      <pubDate>Tue, 29 Mar 2022 09:58:50 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
      <description>发布订阅是一种设计模式，所谓设计模式就是写代码的套路 发布订阅模式主要包含三个API，分别是on、emit/trigger、off 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>手写AJAX</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99ajax/</link>
      <pubDate>Tue, 29 Mar 2022 09:19:07 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99ajax/</guid>
      <description>1 创建对象 1 var xhr = new XMLHttpRequest() 2 写url 1 xhr.open(&amp;#39;GET&amp;#39;, &amp;#39;/xxx&amp;#39;) 3 监听onreadystatechange事件 xhr对象的readyState属性取值包括0~4，0表</description>
    </item>
    
    <item>
      <title>手写数组去重</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Mon, 28 Mar 2022 17:46:37 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</guid>
      <description>1 Set 1 2 3 const uniq = (arr) =&amp;gt; Array.from(new Set(arr)) // or const uniq = (arr) =&amp;gt; [...new Set(arr)] 2 计数排序 1 2 3 4 5 6 7 8 9 10 11 const uniq = (arr) =&amp;gt; { if(!arr.length) return [] const map = {} for(let i = 0; i &amp;lt;= arr.length; i++) { if(!arr[i] || map[arr[i]]) continue // 利用对象中k</description>
    </item>
    
    <item>
      <title>手写防抖与节流</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</link>
      <pubDate>Mon, 28 Mar 2022 10:48:18 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</guid>
      <description>0 区别与联系 相同：在不影响客户体验的前提下，将频繁的回调函数，进行次数缩减，避免大量计算导致的页面卡顿 不同：防抖是将多次执行变为最后一次执行</description>
    </item>
    
    <item>
      <title>前端面试JS基础</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95js%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 21 Mar 2022 09:54:46 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95js%E5%9F%BA%E7%A1%80/</guid>
      <description>1 JS的数据类型有哪些 8种 数字（number）、字符串（string）、布尔（boolean）、空（null）、未定义（undefined）</description>
    </item>
    
    <item>
      <title>前端面试DOM</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95dom/</link>
      <pubDate>Wed, 16 Mar 2022 14:39:41 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95dom/</guid>
      <description>1 请简述DOM事件模型（DOM Event） 每个事件都先经历从上到下（根元素=&amp;gt;最底层子节点）的捕获阶段，再经历从下到上（最底层子节点=</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://gsemir0418.github.io/post/leetcode/</link>
      <pubDate>Mon, 14 Mar 2022 13:09:52 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/leetcode/</guid>
      <description>1 两数之和 1.1 题目介绍 给定一个整数数组nums和一个整数目标值target，请你在该数组中找出和为目标值target的那两个整数，并返回它们的</description>
    </item>
    
    <item>
      <title>伪类和伪元素</title>
      <link>https://gsemir0418.github.io/post/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</link>
      <pubDate>Mon, 14 Mar 2022 08:40:24 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</guid>
      <description>1 伪类和伪元素 伪元素在CSS3之前就已经存在，只是没有伪元素的说法，都是归纳为伪类，所有很多人分不清楚伪类和伪元素。比如常用的:before</description>
    </item>
    
    <item>
      <title>前端面试HTTP</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95http/</link>
      <pubDate>Tue, 08 Mar 2022 09:57:38 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95http/</guid>
      <description>1 GET和POST的区别有哪些 1.1 幂等性 首先最根本的不同是语义上的不同，GET是读，POST是写，造成两者幂等性的不同 由于GET是读，POST</description>
    </item>
    
    <item>
      <title>前端面试CSS</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95css/</link>
      <pubDate>Mon, 07 Mar 2022 09:57:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95css/</guid>
      <description>1 BFC是什么 是什么：块级格式化上下文 怎么做： 触发条件： 浮动元素（元素的float非none） 绝对定位元素（元素的position为abso</description>
    </item>
    
    <item>
      <title>前端面试HTML</title>
      <link>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95html/</link>
      <pubDate>Mon, 07 Mar 2022 09:27:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95html/</guid>
      <description>1 讲讲HTML中的语义化标签 是什么：语义化标签是一种写HTML标签的方法论/方式 怎么做：实现方式是遇到标题就用h1到h6，遇到段落用p，遇到</description>
    </item>
    
    <item>
      <title>Nextjs项目部署到阿里云</title>
      <link>https://gsemir0418.github.io/post/nextjs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</link>
      <pubDate>Thu, 03 Mar 2022 09:05:41 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/nextjs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
      <description>1 Node应用Docker化 创建Dockerfile脚本文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 下载一个含有node12的操作系统FROMnode</description>
    </item>
    
    <item>
      <title>Nextjs博客系统</title>
      <link>https://gsemir0418.github.io/post/nextjs%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 12 Feb 2022 23:55:48 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/nextjs%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</guid>
      <description>1 数据库设计与搭建 1.1 需求分析 主要的表有users、posts、comments users(id/username/passwordDigest) posts(id/userId/title/content) comments(id/userId/postId/content) 1.2 创建表 创建并启动容器，清除之前的开发环境，创建数据库 1</description>
    </item>
    
    <item>
      <title>Webpack全解</title>
      <link>https://gsemir0418.github.io/post/webpack%E5%85%A8%E8%A7%A3/</link>
      <pubDate>Sun, 06 Feb 2022 15:15:48 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/webpack%E5%85%A8%E8%A7%A3/</guid>
      <description>1 AST、Babel和依赖 1.1 Babel原理 babel过程 parse：把代码变成AST traverse：遍历AST进行修改 generate：把</description>
    </item>
    
    <item>
      <title>CookieFree与CDN</title>
      <link>https://gsemir0418.github.io/post/cookiefree%E4%B8%8Ecdn/</link>
      <pubDate>Sun, 23 Jan 2022 13:50:23 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/cookiefree%E4%B8%8Ecdn/</guid>
      <description>1 资源合并 在浏览器中，针对图标的解决方案按流行时间来排序：CSS Sprites、IconFont、SVG Symbols 1.1 CSS雪碧图 雪碧图的英文是CSS</description>
    </item>
    
    <item>
      <title>多路复用</title>
      <link>https://gsemir0418.github.io/post/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Sun, 23 Jan 2022 09:51:58 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>1 HTTP/2的帧 ​ HTTP/1.1的请求响应过程是基于字符串的，而HTTP/2的请求响应过程是基于帧的。 ​ HTTP/2引入了帧（Frame</description>
    </item>
    
    <item>
      <title>连接复用</title>
      <link>https://gsemir0418.github.io/post/%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Thu, 20 Jan 2022 14:46:29 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/</guid>
      <description>1 DNS预解析 假设index.html的部分代码为： 1 2 &amp;lt;script src=&amp;#34;http://a.com/1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;http://b.com/2.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 那么客户端会对a.com进行DNS的解析，拿到ip后请求1.js，然后再对b</description>
    </item>
    
    <item>
      <title>Nextjs配置TypeORM</title>
      <link>https://gsemir0418.github.io/post/nextjs%E9%85%8D%E7%BD%AEtypeorm/</link>
      <pubDate>Tue, 11 Jan 2022 16:25:49 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/nextjs%E9%85%8D%E7%BD%AEtypeorm/</guid>
      <description>1 创建Next.js项目 1 yarn create next-app --typescript 按照提示填写项目名称后， 项目就搭建完成了，以下是项目文件结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 . ├── README.md</description>
    </item>
    
    <item>
      <title>Node包管理工具</title>
      <link>https://gsemir0418.github.io/post/node%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 28 Dec 2021 22:11:43 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/node%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>1 npm 5.4.2+版本的npm，在执行npm i命令后，会检查package.json与lock文件的异同，如果不同，会以package.jso</description>
    </item>
    
    <item>
      <title>TypeScript学习</title>
      <link>https://gsemir0418.github.io/post/typescript%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 24 Dec 2021 15:15:48 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/typescript%E5%AD%A6%E4%B9%A0/</guid>
      <description>1 安装与调试 全局安装ts编译工具typescript与调试工具ts-node，使node支持typescript 1 2 npm install -g typescript npm install -g ts-node 2 TS操</description>
    </item>
    
    <item>
      <title>This</title>
      <link>https://gsemir0418.github.io/post/this/</link>
      <pubDate>Fri, 17 Dec 2021 16:10:22 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/this/</guid>
      <description>1 隐式this的确定规则 函数的简单调用，this表示window/global对象（严格模式为undefined） fn(1, 2) &amp;lt;=&amp;gt; fn.call(undefined, 1, 2) 通过对象调用方</description>
    </item>
    
    <item>
      <title>JavaScript函数</title>
      <link>https://gsemir0418.github.io/post/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 15 Dec 2021 20:40:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/js%E4%B8%93%E7%B2%BE-%E5%87%BD%E6%95%B0/</guid>
      <description>1 函数和闭包 javascript中全部函数均有返回值 对象中的函数叫做方法 1.1 函数的环境 函数返回值的影响因素 函数调用时输入的参数 params 函数定义时的环</description>
    </item>
    
    <item>
      <title>async/await全解</title>
      <link>https://gsemir0418.github.io/post/asyncawait/</link>
      <pubDate>Wed, 15 Dec 2021 14:31:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/asyncawait/</guid>
      <description></description>
    </item>
    
    <item>
      <title>手写Promise</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Tue, 14 Dec 2021 09:59:48 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99promise/</guid>
      <description>0 手写前 该技术解决什么问题-why 回调地狱，比如node读写文件 该技术是怎么解决它的-how Promise的构造函数接收一个参数：函数，并且</description>
    </item>
    
    <item>
      <title>JS运算符</title>
      <link>https://gsemir0418.github.io/post/js%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Thu, 02 Dec 2021 14:17:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/js%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>1 逻辑运算符 1.1 基本用法 ||（或） 1 if(a || b){} a 或者 b 有一个为真，返回true。 &amp;amp;&amp;amp;（与） 1 if (a &amp;amp;&amp;amp; b) {} a 和 b 都为真，才会返回tru</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://gsemir0418.github.io/post/golang/</link>
      <pubDate>Mon, 29 Nov 2021 09:45:56 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/golang/</guid>
      <description>1 安装 https://golang.google.cn/dl/ 2 Golang语言特性 2.1 优势 极简单的部署方式 可直接变成成机器码 不依赖其他库 直接运行即可部署 静态类型语言 编译过程就可以检查出来隐藏的大</description>
    </item>
    
    <item>
      <title>手写深拷贝</title>
      <link>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Tue, 23 Nov 2021 16:15:44 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
      <description>1 什么是深拷贝 b是a的一份拷贝，b中没有对a中对象的引用 2 JSON序列化与反序列化 最简单，但存在如下缺点 不支持函数，会直接忽略函数属性 不支持</description>
    </item>
    
    <item>
      <title>fetch与axios</title>
      <link>https://gsemir0418.github.io/post/fetch%E4%B8%8Eaxios/</link>
      <pubDate>Tue, 23 Nov 2021 15:53:56 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/fetch%E4%B8%8Eaxios/</guid>
      <description>一句话总结：Ajax是异步请求的统称。axios和fetch都是利用promise封装实现的ajax。只不过fetch是浏览器亲生的，axi</description>
    </item>
    
    <item>
      <title>for..in和for..of</title>
      <link>https://gsemir0418.github.io/post/for..in%E5%92%8Cfor..of/</link>
      <pubDate>Tue, 23 Nov 2021 10:38:31 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/for..in%E5%92%8Cfor..of/</guid>
      <description>1 for&amp;hellip;in 1.1 概念 for...in语句以任意顺序遍历一个对象的除Symbol以外的可枚举属性。 1.2 语法 1 2 for (variable in object) statement variable 在每次迭代时，variable会</description>
    </item>
    
    <item>
      <title>代码优化</title>
      <link>https://gsemir0418.github.io/post/%E4%BB%A3%E7%A0%81%E5%86%99%E6%B3%95%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 11 Nov 2021 16:23:10 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E4%BB%A3%E7%A0%81%E5%86%99%E6%B3%95%E4%BC%98%E5%8C%96/</guid>
      <description>1 CSS和JS的位置 考虑到HTML、CSS、JS三者存在互相堵塞的情况（详见“浏览器渲染原理”）： CSS建议放在head标签中： 由于CSS的</description>
    </item>
    
    <item>
      <title>缓存与内容协商</title>
      <link>https://gsemir0418.github.io/post/%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/</link>
      <pubDate>Thu, 11 Nov 2021 13:09:45 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/</guid>
      <description>缓存和内容协商又称强缓存（有效期内的缓存）和弱缓存（服务器和浏览器商量是否能缓存的方案） 1 HTTP缓存 例如我们访问百度，百度会发送html文</description>
    </item>
    
    <item>
      <title>浏览器渲染原理</title>
      <link>https://gsemir0418.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 11 Nov 2021 09:07:24 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</guid>
      <description>1 HTML、CSS和JS的加载过程 整体过程包括解析HTML（生成DOM树）、下载CSS、解析CSS（生成CSS树）、下载JS与执行JS五部分</description>
    </item>
    
    <item>
      <title>BFC</title>
      <link>https://gsemir0418.github.io/post/bfc/</link>
      <pubDate>Wed, 10 Nov 2021 19:45:19 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/bfc/</guid>
      <description>1 BFC 1.1 BFC是什么 常见定位方案 普通流：元素按照其在HTML中的先后位置至上而下布局，行内元素由左至右排列，占满一行后换行，块级元素占满整行。</description>
    </item>
    
    <item>
      <title>Koa全解</title>
      <link>https://gsemir0418.github.io/post/koa%E5%85%A8%E8%A7%A3/</link>
      <pubDate>Mon, 01 Nov 2021 13:34:39 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/koa%E5%85%A8%E8%A7%A3/</guid>
      <description>1 Koa的基础使用 1.1 Koa简介 Koa是由Express开发团队打造的一种全新的Web框架。通过基于Promise、async/await的异</description>
    </item>
    
    <item>
      <title>Nextjs全解</title>
      <link>https://gsemir0418.github.io/post/nextjs%E5%85%A8%E8%A7%A3/</link>
      <pubDate>Sat, 23 Oct 2021 20:38:48 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/nextjs%E5%85%A8%E8%A7%A3/</guid>
      <description>0 准备 0.1 创建项目 利用yarn或npm创建 1 2 3 yarn create next-app // 或 npx create-next-app@latest 使用typescript： 1 yarn create next-app --typescript 根据提示输入文件名后，输入yarn dev启动</description>
    </item>
    
    <item>
      <title>CSS布局</title>
      <link>https://gsemir0418.github.io/post/css%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 20 Oct 2021 14:36:05 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/css%E5%B8%83%E5%B1%80/</guid>
      <description>1 flex弹性布局 Flex布局的目标是提供一种更有效的方式来布局、对齐和分配容器中子元素的空间，即使它们的大小是未知的或动态的。 flex布局</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>https://gsemir0418.github.io/post/vim/</link>
      <pubDate>Tue, 12 Oct 2021 10:31:38 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/vim/</guid>
      <description>0 初识vim 0.1 简介 在这个蔚蓝色的星球上，流传着两大神器的传说：Emacs是神的编辑器，而Vim是编辑器之神。 VIM , 全称 Vi Improved , Vi的增强版 。 Vi 在</description>
    </item>
    
    <item>
      <title>Express全解</title>
      <link>https://gsemir0418.github.io/post/express%E5%85%A8%E8%A7%A3/</link>
      <pubDate>Mon, 27 Sep 2021 13:47:24 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/express%E5%85%A8%E8%A7%A3/</guid>
      <description>0 REST.Client插件 用于在vscode中构造请求 新建以.http为后缀的文件： 1 2 3 4 5 6 7 8 9 10 11 @url=http://localhost:8080 --- @用于定义变量，{{}}使用</description>
    </item>
    
    <item>
      <title>Dva数据流</title>
      <link>https://gsemir0418.github.io/post/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</link>
      <pubDate>Wed, 15 Sep 2021 16:12:05 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/dva%E6%95%B0%E6%8D%AE%E6%B5%81/</guid>
      <description>1 初识Dva 1.1 定义 dva 首先是一个基于redux和redux-saga的数据流方案，然后为了简化开发体验，dva 还额外内置了react-rout</description>
    </item>
    
    <item>
      <title>Lodash常用方法整理</title>
      <link>https://gsemir0418.github.io/post/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 02 Sep 2021 16:53:09 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/lodash%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>0 准备 下载： 1 yarn add lodash / npm i lodash Node.js引入： 1 const _ = require(&amp;#39;lodash&amp;#39;) 1 对象 1.1 移除对象上的一些属性-omit 把数据提交给接口，很多情况下，都要移除只在前</description>
    </item>
    
    <item>
      <title>DNS、TCP与HTTP</title>
      <link>https://gsemir0418.github.io/post/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 02 Sep 2021 14:34:53 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9F%BA%E7%A1%80/</guid>
      <description>1 DNS与TCP 1.1 DNS与hosts DNS（Domain Name System）：域名系统 当我们在地址栏属于域名并访问时，会先在浏览器缓存中找对应域</description>
    </item>
    
    <item>
      <title>umi&#43;AntdPro实战总结</title>
      <link>https://gsemir0418.github.io/post/antdpro&#43;umi%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 22 Aug 2021 22:51:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/antdpro&#43;umi%E5%AE%9E%E6%88%98/</guid>
      <description>项目主体开发临近尾声，顺利进入了测试阶段。为期三个月的开发期间，使我对react，特别是hooks的理解以及umi框架的理解大大提升。在此将</description>
    </item>
    
    <item>
      <title>Express核心</title>
      <link>https://gsemir0418.github.io/post/express%E6%A0%B8%E5%BF%83/</link>
      <pubDate>Sun, 22 Aug 2021 21:09:57 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/express%E6%A0%B8%E5%BF%83/</guid>
      <description>1 HTTP协议 1.1 curl基本用法 curl -s -v 网址 -s 是 silent，用于隐藏进度条 -v 是 verbose，用于打印全部header * 开头的是注释 &amp;gt; 开头的</description>
    </item>
    
    <item>
      <title>Express留言板</title>
      <link>https://gsemir0418.github.io/post/express%E7%95%99%E8%A8%80%E6%9D%BF/</link>
      <pubDate>Sun, 22 Aug 2021 21:09:57 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/express%E7%95%99%E8%A8%80%E6%9D%BF/</guid>
      <description>项目源码地址：https://github.com/GSemir0418/express-board 1 ejs模板引擎 1.1 安装 1 yarn add ejs 1.2 设置应用</description>
    </item>
    
    <item>
      <title>Git相关</title>
      <link>https://gsemir0418.github.io/post/git/</link>
      <pubDate>Sun, 15 Aug 2021 22:02:28 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/git/</guid>
      <description>0 初始化配置 0.1 全局配置 安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址 1 2 3 4 git config --global user.name &amp;#34;gsemir0418&amp;#34; git config --global user.email &amp;#34;845217811@qq.com&amp;#34; // 查看全局配置 git config --list 0.2 配置SSH公</description>
    </item>
    
    <item>
      <title>UseState原理</title>
      <link>https://gsemir0418.github.io/post/usestate%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 07 Aug 2021 22:15:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/usestate%E5%8E%9F%E7%90%86/</guid>
      <description>1 useState简单实现 1.1 示例 点击按钮，结果+1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React from &amp;#34;react&amp;#34;; import ReactDOM from &amp;#34;react-dom&amp;#34;; const rootElement = document.getElementById(&amp;#34;root&amp;#34;); function App() { const [n, setN] = React.useState(0); return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{n}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;button onClick={()</description>
    </item>
    
    <item>
      <title>Node进程与线程</title>
      <link>https://gsemir0418.github.io/post/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Fri, 06 Aug 2021 17:33:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/node%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>1 进程 1.1 进程 Process 场景 notepad.exe是一个程序，不是进程 双击notepad.exe时，操作系统会开启一个进程 定义 进程是程序的执行实例 程序</description>
    </item>
    
    <item>
      <title>Node技术架构</title>
      <link>https://gsemir0418.github.io/post/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 29 Jul 2021 20:54:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/node%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</guid>
      <description>1 Node.js概述 1.1 Node.js不是什么 不是web框架（Flask，Spring） 不是编程语言（Python，PHP） 1.2 Node.js是</description>
    </item>
    
    <item>
      <title>Umi-Request配置</title>
      <link>https://gsemir0418.github.io/post/umi-request%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 09 Jul 2021 16:47:33 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/umi-request%E9%85%8D%E7%BD%AE/</guid>
      <description>utils/request.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 /** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request</description>
    </item>
    
    <item>
      <title>NodeStream模块</title>
      <link>https://gsemir0418.github.io/post/nodejsstream%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Thu, 08 Jul 2021 14:07:04 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/nodejsstream%E6%A8%A1%E5%9D%97/</guid>
      <description>1.三个示例引入Stream 1.1 创建流 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 引入fs模块 const fs = require(&amp;#39;fs&amp;#39;) // 利用fs创建流 const stream = fs.createWriteStream(&amp;#39;./big_file.txt&amp;#39;) // 写数据 for (let i = 0; i &amp;lt; 100000; i++) {</description>
    </item>
    
    <item>
      <title>Object常用方法整理</title>
      <link>https://gsemir0418.github.io/post/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 07 Jul 2021 17:30:59 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/object%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>Object.assign() 用于将所有可枚举属性（属性能否被for…in查找遍历到）的值从一个或多个源对象复制到目标对象，返回目标对象 语法： 1 Object.assign(target, ...sources) target目标对象</description>
    </item>
    
    <item>
      <title>String常用方法整理</title>
      <link>https://gsemir0418.github.io/post/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 05 Jul 2021 13:29:15 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>String.prototype.match() 根据传入的正则表达式的检索字符串并返回结果 语法： 1 str.match(regexp) 例子 1 String.prototype.search() 根据传入的正则表达式寻找符合的字符位置 语法 1 str.search(regexp) 如果匹配，则返回首次匹配项的索引</description>
    </item>
    
    <item>
      <title>数据库基础</title>
      <link>https://gsemir0418.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 05 Jul 2021 08:57:20 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
      <description>1 第一二三范式 1 第一范式 1NF 定义：字段不可再分 举例：存储体检者的双眼视力，应分为左眼视力和右眼视力两个字段 即user表里应有left_eye和</description>
    </item>
    
    <item>
      <title>Sequelize ORM（未完成）</title>
      <link>https://gsemir0418.github.io/post/sequelize.js/</link>
      <pubDate>Fri, 02 Jul 2021 11:01:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/sequelize.js/</guid>
      <description>1 ORM Object Relational Mapping，对象关系映射，通过实体对象的语法，完成对关系数据库的操作（几乎不编写SQL语句） ORM将数据库中的术语映射为面向对象</description>
    </item>
    
    <item>
      <title>Node.js连接数据库</title>
      <link>https://gsemir0418.github.io/post/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Fri, 02 Jul 2021 09:24:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/node.js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>1 安装mysql依赖包 1 yarn add mysql 2 创建mysql连接 创建连接前，确保容器是开启状态。新建test.js文件。 引入mysql模块 1 const mysql = require(&amp;#39;mysql&amp;#39;) 创建连</description>
    </item>
    
    <item>
      <title>Docker安装MySQL</title>
      <link>https://gsemir0418.github.io/post/docker%E5%AE%89%E8%A3%85mysql/</link>
      <pubDate>Fri, 02 Jul 2021 08:36:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/docker%E5%AE%89%E8%A3%85mysql/</guid>
      <description>1 win10安装Docker https://hub.docker.com/ 注册登录并下载安装Docker Desktop。 启用Hyper-V 右键Windows按钮并选择“应用和功能”，选</description>
    </item>
    
    <item>
      <title>杂七杂八</title>
      <link>https://gsemir0418.github.io/post/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</link>
      <pubDate>Wed, 30 Jun 2021 16:25:00 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</guid>
      <description>改变数组中对象的属性名称 blog.csdn.net/weixin_43709908/article/details/105581923 Replace 替换全部字符 blog.csdn.net/qq_40138785/article/details/81457849</description>
    </item>
    
    <item>
      <title>NodeHTTP模块</title>
      <link>https://gsemir0418.github.io/post/nodehttp%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 30 Jun 2021 09:55:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/nodehttp%E6%A8%A1%E5%9D%97/</guid>
      <description>0 准备工作 1 ts-node-dev 当文件更新时自动重启node 避免每次改完代码都要重新运行的麻烦 可以用TS开发Node.js程序，且会自动重启 不宜在生产环境使用</description>
    </item>
    
    <item>
      <title>调试Nodejs</title>
      <link>https://gsemir0418.github.io/post/%E8%B0%83%E8%AF%95nodejs/</link>
      <pubDate>Wed, 30 Jun 2021 09:40:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E8%B0%83%E8%AF%95nodejs/</guid>
      <description>1 VSCode调试Node.js 在launch.json中添加配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现</description>
    </item>
    
    <item>
      <title>单元测试之文件模块</title>
      <link>https://gsemir0418.github.io/post/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 29 Jun 2021 08:43:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>安装jest 1 yarn add -dev jest 在package.json中添加test命令 1 2 3 &amp;#34;scripts&amp;#34;:{ &amp;#34;test&amp;#34;:&amp;#34;jest&amp;#34; } 新建__tests__文件夹，单元测试文件一般命名为xx.un</description>
    </item>
    
    <item>
      <title>Array常用方法整理</title>
      <link>https://gsemir0418.github.io/post/array/</link>
      <pubDate>Mon, 28 Jun 2021 09:30:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/array/</guid>
      <description>Array.prototype.map() 1.关键词：遍历 2.是否修改原数组：false 3.返回值： newArray[]，回调函数的结果组成了新数组的每一个元素。 4.语法： 1 2 3 var</description>
    </item>
    
    <item>
      <title>React入门</title>
      <link>https://gsemir0418.github.io/post/react%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 25 Jun 2021 23:11:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/react%E5%85%A5%E9%97%A8/</guid>
      <description>1.React是什么 用于构建用户界面的JS库（操作DOM呈现页面） 是一个将数据渲染为HTML视图的开源的JavaScript库 官网：http</description>
    </item>
    
    <item>
      <title>初识Hooks</title>
      <link>https://gsemir0418.github.io/post/reacthooks/</link>
      <pubDate>Fri, 25 Jun 2021 23:07:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/reacthooks/</guid>
      <description>1 Hook简介 1.1 基本概念 Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使⽤ state 以及其他的 React 特性。 1.2 React Hooks优势 函数组件不能使⽤state</description>
    </item>
    
    <item>
      <title>Node文件模块</title>
      <link>https://gsemir0418.github.io/post/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 25 Jun 2021 14:40:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>1 待办事项命令行程序需求 功能： 可以列出所有的todo； 新增、编辑、删除todo； 修改todo状态为已完成/未完成 命令 1 2 3 t t add 任务名 t clear 2</description>
    </item>
    
    <item>
      <title>React组件生命周期</title>
      <link>https://gsemir0418.github.io/post/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Fri, 25 Jun 2021 11:09:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>1 生命周期的理解 1.1 引出生命周期 需求： 让指定的文本做显示* / 隐藏的渐变动画 从完全可见，到彻底消失，耗时2S 点击“不活了”按钮从界面中卸载组件 源</description>
    </item>
    
    <item>
      <title>React Hooks全解</title>
      <link>https://gsemir0418.github.io/post/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</link>
      <pubDate>Tue, 01 Jun 2021 17:02:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</guid>
      <description>1.useState 使用状态 1 2 3 const [n, setN] = React.useState(0) const [user, setUser] = React.useState({name:&amp;#39;F&amp;#39;}) 注意事项1：不可局部更新 1 2 3 4 5 const [user, setUser] = useState({name:&amp;#39;Jack&amp;#39;,age:18}) setState({ name:&amp;#39;Sam&amp;#39; }) 结果得到的是{name:&amp;lsquo;Sam&amp;rsqu</description>
    </item>
    
    <item>
      <title>可视化大屏技术</title>
      <link>https://gsemir0418.github.io/post/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 28 May 2021 09:30:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</guid>
      <description>1 背景和意义 数据可视化即把相对复杂、抽象的数据通过可视化的方式以人们更易理解的形式展示出来的一系列手段，旨在更形象地表达数据内在的信息和规律</description>
    </item>
    
    <item>
      <title>Umi多环境配置</title>
      <link>https://gsemir0418.github.io/post/umi%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 14 May 2021 13:33:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/umi%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>0 各环境接口 生产环境 203服务器——10.30.20.203:9725 supplant——10.30.20.203:8080 supos——1</description>
    </item>
    
    <item>
      <title>React基础</title>
      <link>https://gsemir0418.github.io/post/react%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 29 Apr 2021 23:11:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/react%E5%9F%BA%E7%A1%80/</guid>
      <description>1 React定义组件 1.1 函数式组件 函数式组件适用于简单组件的定义，其首字母需大写，且虚拟DOM元素必须有结束标签 函数组件中的this指向为wi</description>
    </item>
    
    <item>
      <title>Vite Pnpm React搭建</title>
      <link>https://gsemir0418.github.io/post/vite-pnpm-react%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 15 Apr 2021 13:33:55 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/vite-pnpm-react%E6%90%AD%E5%BB%BA/</guid>
      <description>1 pnpm 1.1 安装与配置 安装 1 2 3 4 5 6 7 8 9 10 // HomeBrew $ brew install pnpm // powershell $env:PNPM_VERSION=&amp;#39;7.0.0-beta.2&amp;#39; ; iwr https://get.pnpm.io/install.ps1 -useb | iex // npm $ npm install -g pnpm@next-7 // curl $ curl -fsSL https://get.pnpm.io/install.sh | PNPM_VERSION=7.0.0-beta.2 sh - //wget $ wget -qO- https://get.pnpm.io/install.sh | PNPM_VERSION=7.0.0-beta.2 sh - 配置淘宝源 1 $ pnpm config</description>
    </item>
    
    <item>
      <title>展示平台说明文档</title>
      <link>https://gsemir0418.github.io/post/%E5%B1%95%E7%A4%BA%E5%B9%B3%E5%8F%B0%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 08 Jan 2021 23:15:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/%E5%B1%95%E7%A4%BA%E5%B9%B3%E5%8F%B0%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</guid>
      <description>1. 模型展示页面 ​ 模型展示页面是基于There.js库、模型和材质加载器以及控制器，实现模型在web端的简单展示。具体实现逻辑已写好，用户只需</description>
    </item>
    
    <item>
      <title>3dsMax技术文档</title>
      <link>https://gsemir0418.github.io/post/3dmax%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 08 Jan 2021 16:41:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/3dmax%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</guid>
      <description>1. 3dsMax概述 ​ 3dsMax是由AutoDesk公司开发的三维模型与动画制作渲染软件，它被广泛应用于多个领域，包括游戏设计、广告设计、建</description>
    </item>
    
    <item>
      <title>Revit建模技术文档</title>
      <link>https://gsemir0418.github.io/post/revit%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sun, 03 Jan 2021 16:41:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/revit%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</guid>
      <description>1. Revit概述 2.安装软件 3.点云数据导入 3.1 直接导入 3.2 Recap 4.构件族与模型搭建 4.1 建模流程概述 4.2 轴网布局 4.3 木框架搭建 4.4 屋顶 4.4.1 歇山式屋顶 4.4.2 悬山式</description>
    </item>
    
    <item>
      <title>StartBlog</title>
      <link>https://gsemir0418.github.io/post/startblog/</link>
      <pubDate>Sun, 03 Jan 2021 16:41:51 +0800</pubDate>
      
      <guid>https://gsemir0418.github.io/post/startblog/</guid>
      <description>Step1 安装hugo 下载链接：https://github.com/gohugoio/hugo/releases 选择最新版本进行安装（建议安装hu</description>
    </item>
    
  </channel>
</rss>
