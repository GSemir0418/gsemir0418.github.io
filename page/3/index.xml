<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GSemir Blog</title>
    <link>https://gsemir0418.github.io/</link>
    <description>Recent content on GSemir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Sep 2021 13:47:24 +0800</lastBuildDate>
    
        <atom:link href="https://gsemir0418.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>NodeHTTP模块</title>
        <link>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Wed, 30 Jun 2021 09:55:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/ -&lt;h1 id=&#34;0-准备工作&#34;&gt;0 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;1-ts-node-dev&#34;&gt;1 ts-node-dev&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当文件更新时自动重启node&lt;/li&gt;
&lt;li&gt;避免每次改完代码都要重新运行的麻烦&lt;/li&gt;
&lt;li&gt;可以用TS开发Node.js程序，且会自动重启&lt;/li&gt;
&lt;li&gt;不宜在生产环境使用，但非常适合用来学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm -g i ts-node-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要用npm安装 ，用yarn安装的话使用时会报错。。无法识别“ts-node-dev”命令，不知道为什么。&lt;/p&gt;
&lt;h2 id=&#34;2-vscode配置&#34;&gt;2 VSCode配置&lt;/h2&gt;
&lt;p&gt;配置自动保存与保存后自动格式化：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl shift p&lt;/code&gt;打开&lt;code&gt;首选项：打开设置(ui)&lt;/code&gt;，&lt;code&gt;AutoSave&lt;/code&gt;修改为&lt;code&gt;onFocusChange&lt;/code&gt;，搜索format，勾选&lt;code&gt;Format On Save&lt;/code&gt;开启保存后自动格式化。&lt;/p&gt;
&lt;h2 id=&#34;3-curl&#34;&gt;3 curl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GET请求：&lt;code&gt;curl -v url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;POST请求：&lt;code&gt;curl -v -d “name=gsq&amp;quot; url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置请求头：&lt;code&gt;-H &#39;Content-Type:application/json&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置动词：&lt;code&gt;-X PUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JSON请求：&lt;code&gt;curl -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;bob&amp;quot;}&#39; -H &#39;Content-Type:application/json&#39; url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后面会用到&lt;code&gt;curl&lt;/code&gt;来构造请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-创建项目&#34;&gt;1 创建项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;初始化项目：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn init -y
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;@types/node&lt;/code&gt;声明文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yarn add --dev @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;新建&lt;code&gt;index.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 引入http模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 用http创建server
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#228b22&#34;&gt;// 监听server的request事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request, response) =&amp;gt; {
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;有人请求了&amp;#39;&lt;/span&gt;)
	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 服务器返回data，并终止服务器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;span style=&#34;color:#228b22&#34;&gt;// 开始监听8888端口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;控制台&lt;code&gt;ts-node-dev index.ts&lt;/code&gt;启动服务器&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;curl -v http://localhost:8888 &lt;/code&gt;发送请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-request对象&#34;&gt;2 request对象&lt;/h1&gt;
&lt;p&gt;http.createServer()创建的server是http.Server和net.Server类的实例，可以创建后端环境（静态服务器）。&lt;/p&gt;
&lt;p&gt;首先控制台打出&lt;code&gt;request.contructor&lt;/code&gt;，发现request对象的构造函数是&lt;code&gt;IncomingMessage&lt;/code&gt;，因此利用ts语法，在传参中直接定义&lt;code&gt;request:IncomingMessage&lt;/code&gt;，告诉TypeScript request不是任意对象，而是IncomingMessage对象。&lt;/p&gt;
&lt;p&gt;获取请求信息（请求头、路径、请求消息体等）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 引入IncomingMessage模块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response) =&amp;gt; {
    console.log(request.httpVersion)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取http版本号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    console.log(request.url)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    console.log(request.headers)&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求头
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 获取请求消息体
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = []
    &lt;span style=&#34;color:#228b22&#34;&gt;// 监听data事件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 用户每上传一个字节或一段内容就会触发data事件，由于每次上传报文的大小是固定的，所以在用户上传过程中会不停地触发data事件。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 因此需要监听每一次的data事件，把每一次上传的数据放到一个数组中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    request.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, (chunk) =&amp;gt; {
        arr.push(chunk)
    })
    &lt;span style=&#34;color:#228b22&#34;&gt;// 监听上传结束事件，end事件只有在数据被完全消费掉后再触发
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    request.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, () =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 将数据中的每一段chunk连接起来
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; body = Buffer.concat(arr).toString()
        console.log(body)
        &lt;span style=&#34;color:#228b22&#34;&gt;// 请求处理完成后响应
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;)
    })
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开启服务器后，利用&lt;code&gt;curl&lt;/code&gt;构造请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -V -d &amp;quot;name=gsq&amp;quot; http://localhost:8888/api/message
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;控制台将打印如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.1
/api/message
{
  host: &#39;localhost:8888&#39;,
  &#39;user-agent&#39;: &#39;curl/7.55.1&#39;,
  accept: &#39;*/*&#39;,
  &#39;content-length&#39;: &#39;8&#39;,
  &#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;
}
name=gsq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有headers、method、url等属性&lt;/li&gt;
&lt;li&gt;从stream.Readable类继承了data、end、error事件&lt;/li&gt;
&lt;li&gt;不能直接拿到请求的消息体：原因与TCP有关&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-response对象&#34;&gt;3 response对象&lt;/h1&gt;
&lt;p&gt;同样的方式发现response对象是ServerResponse的实例对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有getHeader、setHeader、end、write等方法，可以控制响应的每一部分&lt;/li&gt;
&lt;li&gt;拥有statusCode属性，默认为200，可读可写&lt;/li&gt;
&lt;li&gt;继承了Stream，也属于Stream类的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;gsq&amp;#39;&lt;/span&gt;)
response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;
response.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
response.write(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
response.end()
&lt;span style=&#34;color:#228b22&#34;&gt;// 响应的消息体
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&amp;lt; HTTP/&lt;span style=&#34;color:#b452cd&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt; Not Found
&amp;lt; NAME: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;gsq&lt;/span&gt;
&amp;lt; &lt;span style=&#34;color:#658b00&#34;&gt;Date&lt;/span&gt;: Wed, &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; Jun &lt;span style=&#34;color:#b452cd&#34;&gt;2021&lt;/span&gt; 05:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;56&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;08&lt;/span&gt; GMT
&amp;lt; Connection: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;keep&lt;/span&gt;-alive
&amp;lt; Keep-Alive: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;timeout&lt;/span&gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;
&amp;lt; Transfer-Encoding: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;chunked&lt;/span&gt;
&amp;lt;
&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4-根据url返回不同的文件&#34;&gt;4 根据url返回不同的文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;思路：通过request获取到用户请求的url，利用switch进行判断，根据请求不同，应用fs.readFile读取页面数据并返回给请求端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; fs &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; p &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage, ServerResponse } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#228b22&#34;&gt;// 获取当前目录下的public路径，利用resolve方法进行拼接并解析为绝对路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; publicDir = p.relative(__dirname, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;)

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ServerResponse&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 获取到请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url } = request
    &lt;span style=&#34;color:#228b22&#34;&gt;// 判断请求路径
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (url) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 读取index.html文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/main.js&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 在响应的头部声明文件类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;text/javascript; charset=utf-8&amp;#39;&lt;/span&gt;)
            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;main.js&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.css&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#228b22&#34;&gt;// 在响应的头部声明文件类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;text/css; charset=utf-8&amp;#39;&lt;/span&gt;)
            fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.css&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; error
                response.end(data.toString())
            })
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    }
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中访问&lt;code&gt;http://localhost:8888/index.html&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-处理查询参数&#34;&gt;5 处理查询参数&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;当请求的路径带有参数时（&amp;hellip;/index.html?q=1），会影响到switch对路径的判断，从而找不到对应访问的文件，因此需要&lt;code&gt;url模块&lt;/code&gt;来处理查询的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引入url模块时，模块名与request中取到的url同名，所以需要修改url为path：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;path&lt;/span&gt; } = request
&lt;span style=&#34;color:#228b22&#34;&gt;// 在request中取到url字段，重命名为path变量
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;url.parse(path)&lt;/code&gt;返回一个&lt;code&gt;URL对象&lt;/code&gt;，包含如下字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;Url {
  protocol: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, slashes: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, auth: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;, host: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
  port: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  hostname: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  hash: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  search: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;?q=2&amp;#39;&lt;/span&gt;,
  query: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;q=2&amp;#39;&lt;/span&gt;, pathname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;, path: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html?q=2&amp;#39;&lt;/span&gt;,
  href: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html?q=2&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;switch只需读取URL对象中的&lt;code&gt;pathname&lt;/code&gt;字段来进行判断即可。&lt;/p&gt;
&lt;p&gt;**注：**但是目前node版本中，url.parse已被&lt;code&gt;弃用&lt;/code&gt;，所以我们直接实例化一个URL对象。URL对象接受两个参数，分别为&lt;code&gt;请求路径&lt;/code&gt;与&lt;code&gt;根路径&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; url = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { pathname } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新的URL对象包含如下字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;URL {
  href: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888/index.html?q=1&amp;#39;&lt;/span&gt;,
  origin: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;,
  protocol: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http:&amp;#39;&lt;/span&gt;,
  username: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  password: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  host: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost:8888&amp;#39;&lt;/span&gt;,
  hostname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
  port: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;8888&amp;#39;&lt;/span&gt;,
  pathname: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;,
  search: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;?q=1&amp;#39;&lt;/span&gt;,
  searchParams: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;URLSearchParams&lt;/span&gt; { &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; },
  hash: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样拥有&lt;code&gt;pathname&lt;/code&gt;字段，之后的switch判断与之前保持一致即可。&lt;/p&gt;
&lt;h1 id=&#34;6-匹配任意文件&#34;&gt;6 匹配任意文件&lt;/h1&gt;
&lt;p&gt;目前为止我们只能访问三个路径，其他路径均视为404，如果每多一个页面就多写一个case来判断并响应的话，工作量非常大且代码冗余，重复代码很多，因此需要抽取出关键代码，使其能够自动匹配任意访问的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思路：还是从路径入手，URL对象中的pathname字段的字符串，经过一些字符处理，便可以作为fs读取文件的路径名。例如访问路径为&lt;code&gt;/aa/index.html&lt;/code&gt;，则读取路径中需要的字段是&lt;code&gt;aa/index.html&lt;/code&gt;，只需将前面的&lt;code&gt;&#39;/&#39;&lt;/code&gt;去掉即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改后代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; fs &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; http &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; p &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { IncomingMessage, ServerResponse } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; server = http.createServer()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; publicDir = p.relative(__dirname, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;)

server.on(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, (request: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;IncomingMessage&lt;/span&gt;, response: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;ServerResponse&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { url: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;path&lt;/span&gt; } = request
    &lt;span style=&#34;color:#228b22&#34;&gt;// 在URL对象中获取pathname字段
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { pathname } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(path, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;http://localhost:8888&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#228b22&#34;&gt;// 基于访问路径处理文件名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fileName = pathname.substring(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    fs.readFile(p.resolve(publicDir, fileName), (error, data) =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果读不到文件，则返回404
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) {
            response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt;
            response.end()
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果成功读取到文件，则返回读取到的数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        response.end(data.toString())
    })
})

server.listen(&lt;span style=&#34;color:#b452cd&#34;&gt;8888&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;7-处理不存在的文件&#34;&gt;7 处理不存在的文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;对访问文件时出现的错误类型进行判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-文件不存在的情况&#34;&gt;1 文件不存在的情况&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error.errno === -&lt;span style=&#34;color:#b452cd&#34;&gt;4058&lt;/span&gt;) {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;404&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//找不到文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    fs.readFile(p.resolve(publicDir, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;404.html&amp;#39;&lt;/span&gt;), (error, data) =&amp;gt; {
        response.end(data)
        &lt;span style=&#34;color:#228b22&#34;&gt;// data无需toString()，浏览器自动解析data
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	})
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-当访问路径为根路径httplocalhost8888时默认访问indexhtml&#34;&gt;2 当访问路径为根路径&lt;code&gt;http://localhost:8888&lt;/code&gt;时，默认访问index.html&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; fileName = pathname.substring(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (fileName === &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) {
    fileName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3当访问路径不是文件而是目录时&#34;&gt;3.当访问路径不是文件而是目录时&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error.errno === -&lt;span style=&#34;color:#b452cd&#34;&gt;4068&lt;/span&gt;) {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;403&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//没有权限访问
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;无权查看目录内容&amp;#39;&lt;/span&gt;)
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4其他错误一律归为服务器内部错误&#34;&gt;4.其他错误一律归为服务器内部错误&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
	response.statusCode = &lt;span style=&#34;color:#b452cd&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//服务器内部错误
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	response.end(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;服务器繁忙，请稍后再试&amp;#39;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;8-处理非get请求&#34;&gt;8 处理非GET请求&lt;/h1&gt;
&lt;p&gt;静态服务器不会接受非get请求，对Method进行过滤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { method } = request
if (method !== &#39;GET&#39;) {
	response.statusCode = 405// Method Not Allowed
	response.end();
	return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;9-添加缓存选项&#34;&gt;9 添加缓存选项&lt;/h1&gt;
&lt;p&gt;再次刷新页面时，css、js和图片等静态数据会缓存至内存中，提升网页访问性能。&lt;/p&gt;
&lt;p&gt;成功返回数据前，在响应头添加缓存字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;response.setHeader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;public max-age=3600&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;10-发布未完成&#34;&gt;10 发布(未完成)&lt;/h1&gt;
&lt;p&gt;将ts变成js，需全局安装TypeScript，使用&lt;code&gt;tsc&lt;/code&gt;命令进行转换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tsc index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把js作为package.json中的&lt;code&gt;main&lt;/code&gt;字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;index.js&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发布&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn login/npm adduser
yarn publish/npm publish
&lt;/code&gt;&lt;/pre&gt;- https://gsemir0418.github.io/posts/nodehttp%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
    
        <item>
        <title>调试Nodejs</title>
        <link>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</link>
        <pubDate>Wed, 30 Jun 2021 09:40:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/ -&lt;h1 id=&#34;1-vscode调试nodejs&#34;&gt;1 VSCode调试Node.js&lt;/h1&gt;
&lt;p&gt;在&lt;code&gt;launch.json&lt;/code&gt;中添加配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;使用&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;IntelliSense&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;了解相关属性。&lt;/span&gt; 
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;悬停以查看现有属性的描述。&lt;/span&gt;
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;欲了解更多信息，请访问:&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;https://go.microsoft.com/fwlink/?linkid=830387&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pwa-node&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;会用node来启动&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cli add task&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;skipFiles&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;node_internals&amp;gt;/**&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${workspaceFolder}\\cli.js&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;入口文件&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;task&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;参数&lt;/span&gt;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;点击启动即可在调试控制台查看运行情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./node1.png&#34; alt=&#34;node1&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-命令行结合chrome调试nodejs&#34;&gt;2 命令行结合Chrome调试Node.js&lt;/h1&gt;
&lt;p&gt;命令行中输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;node --inspect-brk cli add task2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开浏览器，F12检查页面，几秒钟后上方会出现node图标，点进去即可对node程序进行调试了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./node2.png&#34; alt=&#34;node2&#34;&gt;&lt;/p&gt;
- https://gsemir0418.github.io/posts/%E8%B0%83%E8%AF%95nodejs/ - </description>
        </item>
    
    
    
        <item>
        <title>单元测试之文件模块</title>
        <link>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Tue, 29 Jun 2021 08:43:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/ -&lt;p&gt;安装&lt;code&gt;jest&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add -dev jest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在&lt;code&gt;package.json&lt;/code&gt;中添加&lt;code&gt;test&lt;/code&gt;命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt;{
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;jest&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新建&lt;code&gt;__tests__&lt;/code&gt;文件夹，单元测试文件一般命名为&lt;code&gt;xx.unit.js&lt;/code&gt;或者&lt;code&gt;xx.spec.js&lt;/code&gt;，下面是测试示例，测试db中的read和write是否为方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; db = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;../db.js&amp;#39;&lt;/span&gt;)
describe(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;, () =&amp;gt; {
	it(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;read is a function&amp;#39;&lt;/span&gt;, () =&amp;gt; {
		expect(db.read &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Function&lt;/span&gt;).toBe(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;)
	})
	it(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;write is a function&amp;#39;&lt;/span&gt;, () =&amp;gt; {
		expect(db.write &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Function&lt;/span&gt;).toBe(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;)
	})
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般单元测试为白盒测试，知道代码是怎么编写的&lt;/p&gt;
&lt;p&gt;单元测试不应该与外界打交道，不能操作硬盘、网络等&lt;/p&gt;
&lt;p&gt;单元测试的对象是函数&lt;/p&gt;
&lt;p&gt;功能测试的对象是模块&lt;/p&gt;
&lt;p&gt;集成测试的对象是系统&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;__test__&lt;/code&gt;同级目录下创建&lt;code&gt;__mocks__&lt;/code&gt;，新建&lt;code&gt;fs.js&lt;/code&gt;，在test文件开头就要写&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jest.mock(&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;未完待续&#34;&gt;未完待续。。。&lt;/h1&gt;
- https://gsemir0418.github.io/posts/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
    
        <item>
        <title>Array常用方法整理</title>
        <link>https://gsemir0418.github.io/posts/array/</link>
        <pubDate>Mon, 28 Jun 2021 09:30:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/array/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/array/ -&lt;h1 id=&#34;arrayprototypemap&#34;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：遍历&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;newArray[]&lt;/code&gt;，回调函数的结果组成了新数组的每一个元素。&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; new_array = arr.map((currentValue, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;currentValue&lt;/code&gt;：callback数组中正在处理的当前元素；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;：可选，callback数组中正在处理的当前元素的索引；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;：可选，map方法调用的数组，几乎不用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.描述&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; 方法会给原数组中的每个元素都按顺序调用一次  &lt;code&gt;callback&lt;/code&gt; 函数。&lt;code&gt;callback&lt;/code&gt; 每次执行后的返回值（包括&lt;code&gt;undefined&lt;/code&gt;）组合起来形成一个新数组。 &lt;code&gt;callback&lt;/code&gt; 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 &lt;code&gt;delete&lt;/code&gt; 删除的索引则不会被调用。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;map&lt;/code&gt;生成一个新数组，当你不打算使用返回的新数组却使用&lt;code&gt;map&lt;/code&gt;是违背设计初衷的，请用&lt;code&gt;forEach&lt;/code&gt;或者&lt;code&gt;for-of&lt;/code&gt;替代。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; 函数会被自动传入三个参数：数组元素，元素索引，原数组本身。&lt;/p&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 求数组中每个元素的平方根
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; newArr = arr.map(&lt;span style=&#34;color:#658b00&#34;&gt;Math&lt;/span&gt;.sqrt)&lt;span style=&#34;color:#228b22&#34;&gt;// [2, 3, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 使用map重新格式化数组中的对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [
    { key:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; },
    { key:&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt; }
]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; newArr = arr.map((item) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rObj={}
    rObj[item.key] = item.value
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; rObj
})&lt;span style=&#34;color:#228b22&#34;&gt;// [{ 1:10 },{ 2:20 }]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypepop&#34;&gt;&lt;code&gt;Array.prototype.pop()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：删除&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;从数组中删除的元素(当数组为空时返回&lt;code&gt;undefined&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.pop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pop&lt;/code&gt; 方法从一个数组中删除并返回最后一个元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pop&lt;/code&gt; 方法有意具有通用性。该方法和&lt;code&gt;call()&lt;/code&gt;或&lt;code&gt;apply()&lt;/code&gt; 一起使用时，可应用在类似数组的对象上。&lt;code&gt;pop&lt;/code&gt;方法根据 &lt;code&gt;length&lt;/code&gt;属性来确定最后一个元素的位置。如果不包含&lt;code&gt;length&lt;/code&gt;属性或&lt;code&gt;length&lt;/code&gt;属性不能被转成一个数值，会将&lt;code&gt;length&lt;/code&gt;置为0，并返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你在一个空数组上调用 pop()，它返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; poped = arr.pop()
&lt;span style=&#34;color:#228b22&#34;&gt;// arr = [1, 2]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// poped = 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypefill&#34;&gt;&lt;code&gt;Array.prototype.fill()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：修改、填充&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;修改后的数组&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.fill(value, start, end)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;：用来填充数组元素的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; ：可选，起始索引，默认值为0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt; ：可选，终止索引，默认值为 &lt;code&gt;this.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fill&lt;/code&gt; 方法接受三个参数 &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; 以及 &lt;code&gt;end&lt;/code&gt;。 &lt;code&gt;start&lt;/code&gt; 和&lt;code&gt;end&lt;/code&gt; 参数是可选的, 其默认值分别为 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;this&lt;/code&gt; 对象的 &lt;code&gt;length &lt;/code&gt;属性值。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;start&lt;/code&gt; 是个负数, 则开始索引会被自动计算成为 &lt;code&gt;length+start&lt;/code&gt;, 其中 &lt;code&gt;length&lt;/code&gt; 是 &lt;code&gt;this&lt;/code&gt; 对象的 &lt;code&gt;length &lt;/code&gt;属性值。如果 &lt;code&gt;end&lt;/code&gt; 是个负数, 则结束索引会被自动计算成为 &lt;code&gt;length+end&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当一个对象被传递给 &lt;code&gt;fill&lt;/code&gt;方法的时候, 填充数组的是这个对象的引用。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);               &lt;span style=&#34;color:#228b22&#34;&gt;// [4, 4, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);            &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 4, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 4, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;);       &lt;span style=&#34;color:#228b22&#34;&gt;// [4, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;);     &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;);         &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Array&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;).fill(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);                &lt;span style=&#34;color:#228b22&#34;&gt;// [4, 4, 4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[].fill.call({ length: &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; }, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// {0: 4, 1: 4, 2: 4, length: 3}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// Objects by reference.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; arr = &lt;span style=&#34;color:#658b00&#34;&gt;Array&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;).fill({}) &lt;span style=&#34;color:#228b22&#34;&gt;// [{}, {}, {}];
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;].hi = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// [{ hi: &amp;#34;hi&amp;#34; }, { hi: &amp;#34;hi&amp;#34; }, { hi: &amp;#34;hi&amp;#34; }]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypefind&#34;&gt;&lt;code&gt;Array.prototype.find()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：查找&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;数组中第一个满足所提供测试函数的元素的值，否则返回&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.find((element, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;：当前遍历到的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;：可选，当前遍历到的索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;：可选，数组本身，基本用不到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt;方法对数组中的每一项元素执行一次 &lt;code&gt;callback&lt;/code&gt; 函数，直至有一个 callback 返回 &lt;code&gt;true&lt;/code&gt;。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回&lt;code&gt;undefined&lt;/code&gt;。注意 &lt;code&gt;callback &lt;/code&gt;函数会为数组中的每个索引调用即从 &lt;code&gt;0 &lt;/code&gt;到 &lt;code&gt;length - 1&lt;/code&gt;，而不仅仅是那些被赋值的索引，这意味着对于稀疏数组来说，该方法的效率要低于那些只遍历有值的索引的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt;方法不会改变数组。&lt;/p&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; inventory = [
    {name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;, quantity: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;},
    {name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt;, quantity: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;},
    {name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cherries&amp;#39;&lt;/span&gt;, quantity: &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;}
]

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; result = inventory.find(fruit =&amp;gt; {
    fruit.name === &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;cherries&amp;#39;&lt;/span&gt;
})

console.log(result); 
&lt;span style=&#34;color:#228b22&#34;&gt;// { name: &amp;#39;cherries&amp;#39;, quantity: 5 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypejoin&#34;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：连接&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;一个所有数组元素连接的字符串。如果 &lt;code&gt;arr.length&lt;/code&gt; 为0，则返回空字符串&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.join(分隔符)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;所有的数组元素被转换成字符串，再用一个分隔符将这些字符串连接起来。&lt;/p&gt;
&lt;p&gt;如果一个元素为 &lt;code&gt;undefined&lt;/code&gt; 或 &lt;code&gt;null&lt;/code&gt;，它会被转换为空字符串。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; a = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Wind&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Rain&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Fire&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar1 = a.join();      
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Wind,Rain,Fire&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar2 = a.join(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Wind, Rain, Fire&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar3 = a.join(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; + &amp;#39;&lt;/span&gt;); 
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;Wind + Rain + Fire&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; myVar4 = a.join(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);    
&lt;span style=&#34;color:#228b22&#34;&gt;// &amp;#34;WindRainFire&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypepush&#34;&gt;&lt;code&gt;Array.prototype.push()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：添加&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：true&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;当调用该方法时，新的&lt;code&gt;length&lt;/code&gt;属性值将被返回。&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.push(element1, ..., elementN)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;push方法将值追加到数组中。&lt;/p&gt;
&lt;p&gt;唯一的原生类数组（array-like）对象是&lt;code&gt;Strings&lt;/code&gt;，尽管如此，它们并不适用该方法，因为字符串是不可改变的。&lt;/p&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 添加元素到数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; sports = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;soccer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;baseball&amp;#34;&lt;/span&gt;];
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;soccer&amp;#34;, &amp;#34;baseball&amp;#34;, &amp;#34;football&amp;#34;, &amp;#34;swimming&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; total = sports.push(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;football&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;swimming&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// 4 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 合并两个数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; vegetables = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;parsnip&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;potato&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; moreVegs = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;celery&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;beetroot&amp;#39;&lt;/span&gt;];

&lt;span style=&#34;color:#228b22&#34;&gt;// 将第二个数组融合进第一个数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 相当于 vegetables.push(&amp;#39;celery&amp;#39;, &amp;#39;beetroot&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Array&lt;/span&gt;.prototype.push.apply(vegetables, moreVegs);

console.log(vegetables); 
&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;parsnip&amp;#39;, &amp;#39;potato&amp;#39;, &amp;#39;celery&amp;#39;, &amp;#39;beetroot&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypesome&#34;&gt;&lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：查找&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;数组中有至少一个元素通过回调函数的测试就会返回**&lt;code&gt;true&lt;/code&gt;**；所有元素都没有通过回调函数的测试返回值才会为&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.some((element, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;:数组中正在处理的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt; :可选，数组中正在处理的元素的索引值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;：可选，几乎不用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;some()&lt;/code&gt; 为数组中的每一个元素执行一次 &lt;code&gt;callback&lt;/code&gt; 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，&lt;code&gt;some()&lt;/code&gt; 将会立即返回 &lt;code&gt;true&lt;/code&gt;。否则，&lt;code&gt;some()&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt;。&lt;code&gt;callback&lt;/code&gt; 只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; 被调用时传入三个参数：元素的值，元素的索引，被遍历的数组。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;some()&lt;/code&gt; 被调用时不会改变数组。&lt;/p&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 使用箭头函数测试数组元素的值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;].some(x =&amp;gt; x &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;);  &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;].some(x =&amp;gt; x &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 判断数组元素中是否存在某个值，可以用include()代替
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; fruits = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mango&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;guava&amp;#39;&lt;/span&gt;];

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; checkAvailability(arr, val) {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; arr.some(arrVal =&amp;gt; val === arrVal);
}

checkAvailability(fruits, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;kela&amp;#39;&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;checkAvailability(fruits, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypesort&#34;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：排序&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;排序后的数组。请注意，数组已原地排序，并且不进行复制。&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.sort([compareFunction])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;compareFunction&lt;/code&gt; 可选&lt;/p&gt;
&lt;p&gt;用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;firstEl&lt;/code&gt;第一个用于比较的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;	secondEl&lt;/code&gt;第二个用于比较的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;如果没有指明 &lt;code&gt;compareFunction&lt;/code&gt; ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。例如 &amp;ldquo;Banana&amp;rdquo; 会被排列到 &amp;ldquo;cherry&amp;rdquo; 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 &lt;code&gt;compareFunction&lt;/code&gt;），比较的数字会先被转换为字符串，所以在Unicode顺序上 &amp;ldquo;80&amp;rdquo; 要比 &amp;ldquo;9&amp;rdquo; 要靠前。&lt;/p&gt;
&lt;p&gt;如果指明了 &lt;code&gt;compareFunction&lt;/code&gt; ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 小于 0 ，那么 a 会被排列到 b 之前；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 大于 0 ， b 会被排列到 a 之前。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;compareFunction(a, b)&lt;/code&gt; 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 数组升序排列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; nums = [&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]
nums.sort((a, b) =&amp;gt; a - b)
&lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3, 4, 5]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 对象按某个属性排序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; objs = [
    { name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Sam&amp;#39;&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;21&lt;/span&gt; },
    { name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Gsq&amp;#39;&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;24&lt;/span&gt; },
    { name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Zs&amp;#39;&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;23&lt;/span&gt; },
    { name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;The&amp;#39;&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt; },
    { name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Art&amp;#39;&lt;/span&gt;, value:&lt;span style=&#34;color:#b452cd&#34;&gt;22&lt;/span&gt; },
    { name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt; },
]
&lt;span style=&#34;color:#228b22&#34;&gt;// sort by value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;objs.sort((a, b) =&amp;gt; a.value - b.value)
&lt;span style=&#34;color:#228b22&#34;&gt;// sort by name
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;objs.sort((a, b) =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; nameA = a.name.toUpperCase()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; nameB = b.name.toUpperCase()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(nameA &amp;lt; nameB){ &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(nameA &amp;gt; nameB){ &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeevery&#34;&gt;&lt;code&gt;Array.prototype.every()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：测试，遍历&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：数组内全部成员都通过了测试，则返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.every((element, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;every&lt;/code&gt; 方法为数组中的每个元素执行一次 &lt;code&gt;callback&lt;/code&gt; 函数，直到它找到一个会使 &lt;code&gt;callback&lt;/code&gt; 返回&lt;code&gt;falsy&lt;/code&gt;的元素。如果发现了一个这样的元素，&lt;code&gt;every&lt;/code&gt; 方法将会立即返回 &lt;code&gt;false&lt;/code&gt;。否则，&lt;code&gt;callback&lt;/code&gt; 为每一个元素返回 &lt;code&gt;true&lt;/code&gt;，&lt;code&gt;every&lt;/code&gt; 就会返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;若传入一个空数组，则直接返回&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 检测所有数组元素是否都大于10
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;].every(x =&amp;gt; x &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;].every(x =&amp;gt; x &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeshift&#34;&gt;&lt;code&gt;Array.prototype.shift()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：删除&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：返回删除的元素，如果数组为空则返回&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.shift()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;删除数组第一个元素，即索引为0的元素，并返回被移除的元素&lt;/p&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]
arr.shift()&lt;span style=&#34;color:#228b22&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr:[&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypepop-1&#34;&gt;&lt;code&gt;Array.prototype.pop()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：删除&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：返回删除的元素，如果数组为空则返回&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.pop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;删除并返回数组最后一个元素&lt;/p&gt;
&lt;p&gt;6.示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]
arr.pop()&lt;span style=&#34;color:#228b22&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr:[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeslice&#34;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：截取&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：一个含有被提取元素的新数组&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.slice(begin, end)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;begin&lt;/code&gt;可选，默认从0开始，如果是负数，表示从原数组的倒数第几个元素开始提取。如果大于原数组的长度，返回空数组；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;可选，默认到原数组末尾。返回的数组中不包括指定位置的元素，如果是负数，表示在原数组中的倒数几个元素结束抽取，如果大于数组长度，也会一直提取到数组末尾。&lt;/p&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;slice&lt;/code&gt;不会修改原数组，只会返回一个浅复制（如果改变两个数组任意一个，则另一个不会受影响）了原数组中部分元素的一个新数组。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; fruits = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Orange&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Lemon&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Mango&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; citrus = fruits.slice(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);

&lt;span style=&#34;color:#228b22&#34;&gt;// fruits contains [&amp;#39;Banana&amp;#39;, &amp;#39;Orange&amp;#39;, &amp;#39;Lemon&amp;#39;, &amp;#39;Apple&amp;#39;, &amp;#39;Mango&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// citrus contains [&amp;#39;Orange&amp;#39;,&amp;#39;Lemon&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeconcat&#34;&gt;&lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：合并&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：合并后的新数组&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.concat(arr/value,...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;将数组或值连接成新数组。如果省略了参数，则concat会返回一个它所调用的已存在的数组的浅拷贝（只会复制对象引用）。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 连接两个数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; alpha = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; numeric = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;];
alpha.concat(numeric);&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, 1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 连接三个数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num1 = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;],
    num2 = [&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;],
    num3 = [&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; nums = num1.concat(num2, num3);&lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 将值连接到数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; alpha = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; alphaNumeric = alpha.concat(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]);&lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, 1, 2, 3]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 合并嵌套数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num1 = [[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num2 = [&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, [&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num3=[&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,[&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;]];

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; nums = num1.concat(num2);&lt;span style=&#34;color:#228b22&#34;&gt;// [[1], 2, [3]]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; nums2=num1.concat(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,num3);&lt;span style=&#34;color:#228b22&#34;&gt;// [[1], 4, 5,[6]]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 在num1数组中的数组添加新的值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;num1[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;].push(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// 也会改变合并后的数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 此时nums为 [[1, 4], 2, [3]]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 此时nums2为 [[1, 4], 4, 5,[6]]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypefilter&#34;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：测试，筛选&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：一个新的，由通过测试的元素组成的新数组，可能为空数组&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.filter((item, index, array) =&amp;gt; {
	&lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; 为数组中的每个元素调用一次 &lt;code&gt;callback&lt;/code&gt; 函数，并利用所有使得 &lt;code&gt;callback&lt;/code&gt; 返回&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;等价于 true&lt;/code&gt;（即除 &lt;code&gt;false&lt;/code&gt;、&lt;code&gt;0&lt;/code&gt;、&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 以外皆为真值） 的值的元素创建一个新数组。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 筛选大于10的元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; ,&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;180&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;].fillter(i =&amp;gt; i &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// [11, 180]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 在数组中搜索
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fruits = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;grapes&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mango&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;];

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; filterItems(query) {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; fruits.filter(i =&amp;gt;  el.toLowerCase().indexOf(query.toLowerCase()) &amp;gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
}

console.log(filterItems(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ap&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;apple&amp;#39;, &amp;#39;grapes&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;console.log(filterItems(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;an&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#39;banana&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;orange&amp;#39;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypesplice&#34;&gt;&lt;code&gt;Array.prototype.splice()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：删除，替换&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.splice(start, deleteCount, item1, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;start&lt;/code&gt;表示修改的开始位置&lt;code&gt;（index）&lt;/code&gt;，若大于数组长度，则从数组末尾开始添加内容；若为负值，则表示从数组末位开始的第几位&lt;code&gt;（从1开始）&lt;/code&gt;；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;deleteCount&lt;/code&gt;可选，表示要移除的数组元素的个数，如果 &lt;code&gt;deleteCount&lt;/code&gt; 大于 &lt;code&gt;start&lt;/code&gt; 之后的元素的总数，则从 &lt;code&gt;start&lt;/code&gt; 后面的元素都将被删除（含第 &lt;code&gt;start&lt;/code&gt; 位）；如果 &lt;code&gt;deleteCount&lt;/code&gt; 被省略了，或者它的值大于或者等于&lt;code&gt;start&lt;/code&gt;之后的所有元素的数量，那么&lt;code&gt;start&lt;/code&gt;之后数组的所有元素都会被删除；如果 &lt;code&gt;deleteCount&lt;/code&gt; 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;item1, item2, *...*&lt;/code&gt; 可选。要添加进数组的元素,从&lt;code&gt;start&lt;/code&gt; 位置开始。如果不指定，则 &lt;code&gt;splice()&lt;/code&gt; 将只删除数组元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;如果添加进数组的元素个数不等于被删除的元素个数，数组的长度会发生相应的改变。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; arr = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#228b22&#34;&gt;// 从第二位开始删除0个元素，插入”f“
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.splice(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// []
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// arr = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;f&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 从第 2 位开始删除 0 个元素，插入“g” 和 &amp;#34;h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.splice(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// []
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// arr = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;g&amp;#34;, &amp;#34;h&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 从第3位开始删除1个元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.splice(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;d&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// arr = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;e&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 从倒数第2位开始删除1个元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.splice(-&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;d&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// arr = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;e&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 从第2位开始删除所有元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.splice(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// [&amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// arr = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeforeach&#34;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：遍历&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;depends&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.forEach((currentValue, index, array) =&amp;gt;{
    &lt;span style=&#34;color:#228b22&#34;&gt;// callback
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;针对每一个元素执行提供的函数。forEach适合于你并不打算改变数据，而只是想用数据做一些事情：比如存入数据库或则打印出来。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 打印元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;].forEach(i =&amp;gt; {
    console.log(i)
})

&lt;span style=&#34;color:#228b22&#34;&gt;// 复制一个对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; copy(obj) {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; copy = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.create(&lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getPrototypeOf(obj));
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; propNames = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj);

  propNames.forEach(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt;(name) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; desc = &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(obj, name);
    &lt;span style=&#34;color:#658b00&#34;&gt;Object&lt;/span&gt;.defineProperty(copy, name, desc);
  });

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; copy;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; obj1 = { a: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, b: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; obj2 = copy(obj1); &lt;span style=&#34;color:#228b22&#34;&gt;// obj2 looks like obj1 now
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeindexof&#34;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：查找&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：索引位置或&lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.indexOf(searchElement, fromIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;searchElement&lt;/code&gt;要查找的元素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fromIndex&lt;/code&gt;可选，开始查找的位置，若是负值则从末尾开始抵消&lt;/p&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;每个元素实际上都做&lt;code&gt;===&lt;/code&gt;（strict equality）来判断&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 找出指定元素出现的所有位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; indices = [];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; array = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; element = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; idx = array.indexOf(element);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (idx != -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;) {
  indices.push(idx);
  idx = array.indexOf(element, idx + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
}
console.log(indices);
&lt;span style=&#34;color:#228b22&#34;&gt;// [0, 2, 4]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypelastindexof&#34;&gt;&lt;code&gt;Array.prototype.lastIndexOf()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：查找&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：数组中该元素最后一次出现的索引，如未找到返回-1&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.lastIndexOf(searchElement, fromIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;searchElement&lt;/code&gt;被查找的元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fromIndex&lt;/code&gt; 可选，从此位置开始逆向查找。默认为数组的长度减 1(&lt;code&gt;arr.length - 1&lt;/code&gt;)，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找&lt;/p&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;每个元素实际上都做&lt;code&gt;===&lt;/code&gt;（strict equality）来判断&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypereverse&#34;&gt;&lt;code&gt;Array.prototype.reverse()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：反转&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：颠倒后的数组&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.reverse()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt; 方法颠倒数组中元素的位置，改变了数组，并返回该数组的引用&lt;/p&gt;
&lt;p&gt;也可应用于类数组对象&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 反转数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; a = [&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;];
a.reverse(); 
console.log(a); &lt;span style=&#34;color:#228b22&#34;&gt;// [3, 2, 1]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 反转类数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; a = {&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, length:&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;}
&lt;span style=&#34;color:#658b00&#34;&gt;Array&lt;/span&gt;.prototype.reverse.call(a)
&lt;span style=&#34;color:#228b22&#34;&gt;// {0:5, 2:3, 4:1, length:3}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对象中必须包含反应对象属性长度的属性length，否则不会发生任何改变
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeunshift&#34;&gt;&lt;code&gt;Array.prototype.unshift()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：添加&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：该数组的新长度&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.unshift(element1, ..., elementN)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;unshift()&lt;/code&gt;&lt;/strong&gt; 方法将一个或多个元素添加到数组的&lt;strong&gt;开头&lt;/strong&gt;，并返回该数组的新长度(该方法修改原有数组)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unshift&lt;/code&gt; 特意被设计成具有&lt;strong&gt;通用性&lt;/strong&gt;；这个方法能够通过&lt;code&gt;call&lt;/code&gt;或者&lt;code&gt;apply&lt;/code&gt;方法作用于类数组对象上。不过对于没有 length 属性（代表从0开始的一系列连续的数字属性的最后一个）的对象，调用该方法可能没有任何意义。&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 在数组前添加元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; arr = [&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;];
arr.unshift(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);
console.log(arr); &lt;span style=&#34;color:#228b22&#34;&gt;// [1, 2, 3, 4, 5, 6]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
arr.unshift([-&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]); &lt;span style=&#34;color:#228b22&#34;&gt;// the new array length is 4
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// arr is [[-4, -3], 4, 5, 6]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypeincludes&#34;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：查找&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;code&gt;Boolean&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;arr.includes(value, fromIndex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;value&lt;/code&gt;要查找的元素值（区分大小写）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fromIndex&lt;/code&gt;可选，开始索引，若为负值，则按升序从 &lt;code&gt;array.length + fromIndex&lt;/code&gt; 的索引开始搜 （即使从末尾开始往前跳 &lt;code&gt;fromIndex&lt;/code&gt; 的绝对值个索引，然后往后搜寻）。&lt;code&gt;formIndex&lt;/code&gt;的不同情况见示例，默认为 0&lt;/p&gt;
&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。&lt;/p&gt;
&lt;p&gt;对象数组不能使用，但适用于类对象数组&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].includes(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);  &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;].includes(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;].includes(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NaN&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 如果 fromIndex 大于等于数组的长度，则会返回 false，且该数组不会被搜索。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; arr = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
arr.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);   &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 计算出的索引小于 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 0，则整个数组都会被搜索。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; arr = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#228b22&#34;&gt;// 3 - 100 = -97
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr.includes(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypereduce&#34;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：``&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;arrayprototypereduce-1&#34;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;1.关键词：&lt;/p&gt;
&lt;p&gt;2.是否修改原数组：``&lt;/p&gt;
&lt;p&gt;3.返回值：&lt;/p&gt;
&lt;p&gt;4.语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.描述：&lt;/p&gt;
&lt;p&gt;6.示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gsemir0418.github.io/posts/array/ - </description>
        </item>
    
    
    
        <item>
        <title>React入门</title>
        <link>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</link>
        <pubDate>Fri, 25 Jun 2021 23:11:51 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/ -&lt;h1 id=&#34;1react是什么&#34;&gt;1.React是什么&lt;/h1&gt;
&lt;p&gt;用于构建&lt;strong&gt;用户界面&lt;/strong&gt;的JS库（操作DOM呈现页面）&lt;/p&gt;
&lt;p&gt;是一个将数据渲染为HTML视图的开源的JavaScript库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：https://react.docschina.org/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;2谁开发的&#34;&gt;2.谁开发的&lt;/h1&gt;
&lt;p&gt;Facebook&lt;/p&gt;
&lt;h1 id=&#34;3为什么要学&#34;&gt;3.为什么要学&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原生JS操作DOM&lt;strong&gt;繁琐、效率低&lt;/strong&gt;（&lt;strong&gt;DOM-API操作UI&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用js直接操作DOM，浏览器会进行大量的&lt;strong&gt;重绘重排&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原生js没有&lt;strong&gt;组件化&lt;/strong&gt;的编码方案，代码复用率低&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模块化&lt;/strong&gt;是针对js的，可以把js拆分成独立的功能模块，方便复用。但是html结构和css样式，包括字体图片音频视频等，复用率低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4react的特点&#34;&gt;4.React的特点&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用&lt;strong&gt;组件化模式&lt;/strong&gt;、&lt;strong&gt;声明式编码&lt;/strong&gt;，提高开发效率及组件复用率&lt;/p&gt;
&lt;p&gt;之前使用的是&lt;strong&gt;命令式编码&lt;/strong&gt;，面向过程。比如我想喝一杯水，需要命令别人先站起来，再走到水杯旁，把我帮我拿过来等等的步骤；但是声明式编码只需我说嗓子干了，自动就会帮我把水拿过来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;React Native&lt;/strong&gt;中可以使用React语法进行&lt;strong&gt;移动端&lt;/strong&gt;开发。&lt;/p&gt;
&lt;p&gt;React Native可以使得前端开发人员使用最熟悉的js来编写安卓和ios应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;strong&gt;虚拟DOM&lt;/strong&gt;+优秀的&lt;strong&gt;Diffing算法&lt;/strong&gt;，尽量减少与真实DOM的交互&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;​	虚拟DOM发生改变后会对比之前的虚拟DOM，从而减少真实DOM的更新渲染过程&lt;/p&gt;
&lt;h1 id=&#34;5-react基本使用&#34;&gt;5. React基本使用&lt;/h1&gt;
&lt;h2 id=&#34;51-js库引入注意引入顺序&#34;&gt;5.1 js库引入（注意引入顺序）&lt;/h2&gt;
&lt;p&gt;1.react.development.js：react核心库&lt;/p&gt;
&lt;p&gt;2.react-dom.development.js：提供操作DOM的react扩展库&lt;/p&gt;
&lt;p&gt;3.babel.min.js：解析JSX语法代码转为js代码的库&lt;/p&gt;
&lt;h2 id=&#34;52-虚拟dom的创建&#34;&gt;5.2 虚拟DOM的创建&lt;/h2&gt;
&lt;h3 id=&#34;521-关于虚拟dom&#34;&gt;5.2.1 关于虚拟DOM&lt;/h3&gt;
&lt;p&gt;（1）本质上是object类型的&lt;strong&gt;一般对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（2）虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是react内部在用，无需真实DOM上那么多属性&lt;/p&gt;
&lt;p&gt;（3）虚拟DOM最终会被React转化为真实DOM，呈现在页面上&lt;/p&gt;
&lt;h3 id=&#34;522-创建的两种方式&#34;&gt;5.2.2 创建的两种方式&lt;/h3&gt;
&lt;p&gt;（1）纯js方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = React.createElement(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;标签名&amp;#39;&lt;/span&gt;,{标签属性},&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;标签内容&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = React.createElement(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;,{id:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;},&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;React.createElement(&amp;#39;&lt;/span&gt;span&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;,{},&amp;#39;&lt;/span&gt;HELLO REACT!&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​		可以看到，若遇标签嵌套情况，利用纯js来写非常复杂。&lt;/p&gt;
&lt;p&gt;（2）JSX方式&lt;/p&gt;
&lt;p&gt;​		是react 定义的一种类似于 XML 的 JS 扩展语法: JS + XML。本质是React.createElement(&amp;lsquo;标签名&amp;rsquo;,{标签属性},&amp;lsquo;标签内容&amp;rsquo;)方法的语法糖，极大地简化了创建虚拟DOM过程。&lt;strong&gt;在利用JSX创建之前，需要将&lt;!-- raw HTML omitted --&gt;标签的type属性由默认的text/javascript改为text/babel&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1）JSX创建虚拟DOM的写法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&amp;gt;
    	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;span&lt;/span&gt;&amp;gt;hello,react&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;span&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）&lt;strong&gt;JSX语法&lt;/strong&gt;如下：&lt;/p&gt;
&lt;p&gt;1.遇到 &amp;lt;开头的代码，以标签的语法解析：html 同名标签转换为 html 同名元素，其它标签需要特别解析：若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。&lt;/p&gt;
&lt;p&gt;2.遇到以 { 开头的代码，以 JS 语法解析: &lt;strong&gt;标签中的 js 表达式必须用{ }包含&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;只有一个根标签&lt;/strong&gt;，若想在虚拟DOM中再新增标签，外面需要统一包一个标签&lt;/p&gt;
&lt;p&gt;4.标签必须&lt;strong&gt;闭合&lt;/strong&gt;（自闭合也行）&lt;/p&gt;
&lt;p&gt;5.标签内样式的类名指定不要用class，要用&lt;strong&gt;className&lt;/strong&gt;，例如&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;6.标签中内联样式要用**style={{key:value}}**的形式去写，多个单词的要用小驼峰,例如style={{fontSize:&amp;lsquo;29px&amp;rsquo;}}&lt;/p&gt;
&lt;h2 id=&#34;53-渲染虚拟dom&#34;&gt;5.3 渲染虚拟DOM&lt;/h2&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;ReactDOM.render(VirtualDOM,containerDOM)
ReactDOM.render(VDOM,&lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;54-模块与组件的理解&#34;&gt;5.4 模块与组件的理解&lt;/h2&gt;
&lt;p&gt;模块指的是向外提供特定功能的js程序，一般就是一个js文件，模块化是为了更好地复用js，简化js的编写，提高js运行效率。模块化只针对js；而组件指的是用来实现局部功能效果的代码和资源的集合（html、css、js、image、video等），组件化是为了复用编码，简化项目编码，提高运行效率&lt;/p&gt;
&lt;p&gt;1.5 jsx练习&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;.%5Cimage-20210321123104572.png&#34; alt=&#34;image-20210321123104572&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;../js/react.development.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;../js/react-dom.development.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;../js/babel.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/babel&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        一定注意区分【js语句（代码）】与【js表达式】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;            1.表达式：一个表达式会产生一个值，可以放任何一个需要值的地方
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                下面这些都是表达式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                a
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                a+b
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                demo(1)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                arr.map()//用来处理数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                function test(){}//定义方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;            2.语句（代码）：控制代码走向，没有值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                if(){}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                for(){}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;                switch(){case}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    */&lt;/span&gt;
        &lt;span style=&#34;color:#228b22&#34;&gt;//模拟一些数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; data = [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Angular&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Vue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;React&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; data2 = [&amp;lt;li&amp;gt;Angular&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/li&amp;gt;, &amp;lt;li&amp;gt;Vue&amp;lt;/li&amp;gt;, &amp;lt;li&amp;gt;React&amp;lt;/li&amp;gt;]//React可以自动遍历数组&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; obj = {name1:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Angular&amp;#39;&lt;/span&gt;,name2:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Vue&amp;#39;&lt;/span&gt;,name3:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;React&amp;#39;&lt;/span&gt;}&lt;span style=&#34;color:#228b22&#34;&gt;//对象不能作为React的节点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//jsx创建虚拟DOM
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; VDOM = (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;前端js框架列表&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/h1&amp;gt;&lt;/span&gt;
                &amp;lt;ul&amp;gt;
                    {
                        data.map((a,index)=&amp;gt;{
                            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;li key={index}&amp;gt;{a}&amp;lt;&lt;span style=&#34;color:#1c7e71&#34;&gt;/li&amp;gt;/&lt;/span&gt;/虚拟dom必须有唯一标识key
                        })
                    }
                &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/ul&amp;gt;&lt;/span&gt;
            &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
        )
        ReactDOM.render(VDOM, &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;补充&#34;&gt;补充：&lt;/h2&gt;
&lt;p&gt;1）早期传输数据的两种格式&lt;/p&gt;
&lt;p&gt;​		最早使用XML来存储与传输数据的，XML即扩展标记语言 (Extensible Markup Language, XML) ，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。典型写法如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;student&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Tom&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/student&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​		后面改为利用JSON格式。JSON(JavaScript Object Notation)一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。主要是得益于JSON的两个重要方法：JSON.parse()和JSON.stringfy()，分别用来快速将JSON中的数据解析为数组和对象，以及快速把JS中的数组和对象转化为JSON字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#39;name&amp;#39;:&amp;#39;gsq&amp;#39;,&amp;#39;age&amp;#39;:26&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）XML和JSON的优缺点对比&lt;/p&gt;
&lt;p&gt;(1)可读性两者基本相同，一边是建议的语法，一边是规范的标签形式，XML可读性较好些；
(2)可扩展性方面差不多；
(3)编码难度方面，不借助工具的话，XML较为复杂；
(4)解码难度方面，XML的解析得考虑子节点父节点，让人头昏眼花，而JSON的解析难度几乎为0。
(5)流行度方面，XML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。到时Ajax应该变成Ajaj(Asynchronous Javascript and JSON)了；
(7)数据体积方面，JSON相对于XML来讲，数据的体积小，传递的速度更快些；
(8)数据交互方面，JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互；
(9)数据描述方面，JSON对数据的描述性比XML较差；
(10)传输速度方面， JSON的速度要远远快于XML。&lt;/p&gt;
- https://gsemir0418.github.io/posts/react%E5%85%A5%E9%97%A8/ - </description>
        </item>
    
    
    
        <item>
        <title>初识Hooks</title>
        <link>https://gsemir0418.github.io/posts/reacthooks/</link>
        <pubDate>Fri, 25 Jun 2021 23:07:51 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/reacthooks/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/reacthooks/ -&lt;h1 id=&#34;1-hook简介&#34;&gt;1 Hook简介&lt;/h1&gt;
&lt;h2 id=&#34;11-基本概念&#34;&gt;1.1 基本概念&lt;/h2&gt;
&lt;p&gt;Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使⽤ state 以及其他的 React 特性。&lt;/p&gt;
&lt;h2 id=&#34;12-react-hooks优势&#34;&gt;1.2 React Hooks优势&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数组件不能使⽤state，⼀般只⽤于⼀些简单⽆交互的组件，⽤作信息展示，即我们上⾯说的傻⽠组件使⽤，如果需要交互更改状态等复杂逻辑时就需要使⽤class组件了&lt;/p&gt;
&lt;p&gt;React Hooks让我们更好的拥抱函数式编程，让函数式组件也能使⽤state功能，因为函数式组件⽐class组件更简洁好⽤，因为React Hooks的出现，相信未来我们会更多的使⽤函数式组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;副作⽤问题&lt;/p&gt;
&lt;p&gt;我们⼀般称数据获取、订阅、定时执⾏任务、⼿动修改ReactDOM这些⾏为都可以称为副作⽤由于React Hooks的出现，我们可以使⽤useEffect来处理组件副作⽤问题，所以我们的函数式组件也能进⾏副作⽤逻辑的处理了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有状态的逻辑重⽤组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂的状态管理&lt;/p&gt;
&lt;p&gt;之前我们使⽤redux、dva、mobx第三⽅状态管理器来进⾏复杂的状态管理&lt;/p&gt;
&lt;p&gt;现在我们可以使⽤useReducer、useContext配合使⽤实现复杂状态管理，不⽤再依赖第三⽅状态管理器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发效率和质量问题&lt;/p&gt;
&lt;p&gt;函数式组件⽐class组件简洁，开发的体验更好，效率更⾼同时应⽤的性能也更好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2-usestate&#34;&gt;2 useState&lt;/h1&gt;
&lt;h2 id=&#34;21-定义&#34;&gt;2.1 定义&lt;/h2&gt;
&lt;p&gt;useState：组件状态管理钩⼦，使函数组件能够使⽤state&lt;/p&gt;
&lt;h2 id=&#34;22-基本使用&#34;&gt;2.2 基本使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [state,setState]=useState(initState)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;state是要设置的状态&lt;/li&gt;
&lt;li&gt;setState是更新state的⽅法，只是⼀个⽅法名，可以随意更改&lt;/li&gt;
&lt;li&gt;initState是初始的state，可以是随意的数据类型，也可以是回调函数，但是函数必须是有返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-实际应用&#34;&gt;2.3 实际应用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React, { useState } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; UseS() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [count, setState] = useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;你点击了{count}次&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setState(count + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;点 击&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;3-useeffect&#34;&gt;3 useEffect&lt;/h1&gt;
&lt;h2 id=&#34;31-定义&#34;&gt;3.1 定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;useEffect：副作⽤处理钩⼦&lt;/li&gt;
&lt;li&gt;数据获取、订阅、定时执⾏任务、⼿动修改ReactDOM这些⾏为都可以称为副作⽤。⽽useEffect就是为了处理这些副作⽤⽽⽣的&lt;/li&gt;
&lt;li&gt;useEffect也是componentDidMount、componentDidUpdate和componentWillUnmount这⼏个⽣命周期⽅法的统⼀&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-基本使用&#34;&gt;3.2 基本使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;useEffect(callback,array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;callback：回调函数，作⽤是处理副作⽤逻辑。可以返回⼀个函数，⽤作清理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;useEffect(() =&amp;gt;{
	&lt;span style=&#34;color:#228b22&#34;&gt;//副作⽤逻辑
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	xxxxxx
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ()=&amp;gt;{
		&lt;span style=&#34;color:#228b22&#34;&gt;//清理副作⽤需要清理的内容
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;//类似于componentWillUnmount，组件渲染和组件卸载前执⾏的代码
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	}
},[array])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;array(可选参数)：数组，⽤于控制useEffect的执⾏。分三种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空数组，则只会执⾏⼀次（即初次渲染render）,相当于componentDidMount&lt;/li&gt;
&lt;li&gt;⾮空数组，useEffect会在数组发⽣改变后执⾏，相当于componentDidUpdate&lt;/li&gt;
&lt;li&gt;不填array这个数组，useEffect每次渲染都会执⾏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33-实际应用&#34;&gt;3.3 实际应用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { useState, useEffect } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; UseE = () =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [count, setState] = useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)

    useEffect(() =&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;//更新⻚⾯标题
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.title = &lt;span style=&#34;color:#cd5555&#34;&gt;`您点击了&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;count&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;次了哦`&lt;/span&gt;
    }, [count])
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;你点击了{count}次&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; setState(count + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}&amp;gt;点 击&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    )
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; UseE;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;4-usecontext&#34;&gt;4 useContext&lt;/h1&gt;
&lt;h2 id=&#34;41-定义&#34;&gt;4.1 定义&lt;/h2&gt;
&lt;p&gt;context就是⽤来更⽅便的实现全局数据共享的，但是由于他并不是那么好⽤，所以我们⼀般会使⽤第三⽅状态管理器来实现全局数据共享&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redux&lt;/li&gt;
&lt;li&gt;dva&lt;/li&gt;
&lt;li&gt;mobx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是针对context上下⽂提出的⼀个Hooks提出的⼀个API，它接受React.createContext()的返回值作为参数，即context对象，并返回最近的context&lt;/p&gt;
&lt;p&gt;使⽤useContext是不需要再使⽤Provider和Consumer的&lt;/p&gt;
&lt;p&gt;当最近的context更新时，那么使⽤该context的hook将会重新渲染&lt;/p&gt;
&lt;h2 id=&#34;42-基本使用&#34;&gt;4.2 基本使用&lt;/h2&gt;
&lt;p&gt;store.js中创建数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Context = React.createContext({ age: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;18&amp;#39;&lt;/span&gt;, name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;jerry&amp;#39;&lt;/span&gt; })
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; Context
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;组件中使用useContext接收数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React, { useContext } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; Context from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./store&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; UseC = () =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;//使⽤useContext
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; ctx = useContext(Context)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;姓名&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h2&lt;/span&gt;&amp;gt;{ctx.name}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h2&lt;/span&gt;&amp;gt;年龄&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;{ctx.age}岁&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    )
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; UseC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gsemir0418.github.io/posts/reacthooks/ - </description>
        </item>
    
    
    
        <item>
        <title>Node文件模块</title>
        <link>https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Fri, 25 Jun 2021 14:40:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/ -&lt;h1 id=&#34;1-待办事项命令行程序需求&#34;&gt;1 待办事项命令行程序需求&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以列出所有的todo；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增、编辑、删除todo；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改todo状态为已完成/未完成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;t
t add 任务名
t clear
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-创建命令行项目&#34;&gt;2 创建命令行项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;空文件夹下，执行：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;yarn init -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-y&lt;/code&gt;表示跳过交互式对话（确定版本等信息），根据默认值生成&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建&lt;code&gt;index.js&lt;/code&gt;，引入&lt;code&gt;commanderjs&lt;/code&gt;库，添加&lt;code&gt;add&lt;/code&gt;和&lt;code&gt;clear&lt;/code&gt;子命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; program = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;commander&amp;#39;&lt;/span&gt;);

program
	.option(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-x,--xxx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;desc of x&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// x选项 即在node index命令后输入的选项
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;program
	.command(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 子命令
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.description(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;add a task&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 子命令描述
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.action((...args) =&amp;gt; { &lt;span style=&#34;color:#228b22&#34;&gt;//拿到用户输入的所有字符串参数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; words = args.slice(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;).join(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 由于最后一个参数默认是command对象，因此需要对参数进行预处理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	})
program
	.command(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;clear&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 子命令
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.description(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;clear all tasks&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;// 子命令描述
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	.action(() =&amp;gt; {
    	&lt;span style=&#34;color:#228b22&#34;&gt;// 执行clear操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	})

program.parse(process.argv);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-实现创建任务功能&#34;&gt;3 实现创建任务功能&lt;/h1&gt;
&lt;p&gt;一般命令行程序的入口文件为&lt;code&gt;cli.js&lt;/code&gt;，而&lt;code&gt;index.js&lt;/code&gt;中写主要功能实现，因此将index重命名为&lt;code&gt;cli.js&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;31-nodejs读取文件api&#34;&gt;3.1 &lt;code&gt;nodejs&lt;/code&gt;读取文件api：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210625131432414.png&#34; alt=&#34;image-20210625131432414&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;fs.readFile(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/etc/passwd&amp;#39;&lt;/span&gt;, (err, data) =&amp;gt; {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (err) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; err;
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回调会传入两个参数 &lt;code&gt;(err, data)&lt;/code&gt;，其中 &lt;code&gt;data&lt;/code&gt; 是文件的内容。&lt;/p&gt;
&lt;p&gt;如果没有指定 &lt;code&gt;encoding&lt;/code&gt;，则返回原始的 buffer。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt; 中的当&lt;code&gt;flag&lt;/code&gt; 选项采用字符串时，可用以下标志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt; - 打开文件用于追加。如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;ax&#39;&lt;/code&gt; - 与 &lt;code&gt;&#39;a&#39;&lt;/code&gt; 相似，但如果路径已存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;a+&#39;&lt;/code&gt; - 打开文件用于读取和追加。如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;ax+&#39;&lt;/code&gt; - 与 &lt;code&gt;&#39;a+&#39;&lt;/code&gt; 相似，但如果路径已存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;as&#39;&lt;/code&gt; - 以同步模式打开文件用于追加。如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;as+&#39;&lt;/code&gt; - 以同步模式打开文件用于读取和追加。如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;r&#39;&lt;/code&gt; - 打开文件用于读取。如果文件不存在，则出现异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;r+&#39;&lt;/code&gt; - 打开文件用于读取和写入。如果文件不存在，则出现异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;rs+&#39;&lt;/code&gt; - 以同步模式打开文件用于读取和写入。指示操作系统绕过本地的文件系统缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-获取home路径下的todo文件&#34;&gt;3.2 获取home路径下的.todo文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nodejs&lt;/code&gt;获取系统home目录路径：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; homedir = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;).homedir()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nodejs&lt;/code&gt;获取用户home目录路径，如果未获取到，则使用系统home路径&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; home = process.env.HOME || homedir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;处理路径格式问题，以适配任意系统：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; p = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; dbPath = p.join(home,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;.todo&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;33-nodejs写文件api&#34;&gt;3.3 &lt;code&gt;nodejs&lt;/code&gt;写文件api&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210625133113444.png&#34; alt=&#34;image-20210625133113444&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;34-创建任务功能初步实现&#34;&gt;3.4 创建任务功能初步实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; fs = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)
module.exports.add = (title) =&amp;gt; {
	fs.readFile(dbPath, {flag:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a+&amp;#39;&lt;/span&gt;}, (error,data) =&amp;gt; {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(error) { console.log(error) }
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; list
            &lt;span style=&#34;color:#228b22&#34;&gt;// 如果文件是空的，则创建一个数组来存数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
              	&lt;span style=&#34;color:#228b22&#34;&gt;// 尝试让list等于data中的数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				list = JSON.parse(data.toString())&lt;span style=&#34;color:#228b22&#34;&gt;// 字符串=&amp;gt;数组对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(error2) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 如果出错（说明data为空，解析失败），则让list成为空数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				list = []
			}
            &lt;span style=&#34;color:#228b22&#34;&gt;// 在list中添加一个任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; task = { title, done:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt; }
			list.push(task)
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; string = JSON.stringfy(list)&lt;span style=&#34;color:#228b22&#34;&gt;// 数组对象=&amp;gt;字符串
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 储存任务到文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			fs.writeFile(dbPath, string+&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;, (error3) =&amp;gt; {
				&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(error3){ console.log(error) }
			})
		}
	})
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;35-优化代码&#34;&gt;3.5 优化代码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;理清功能需求，从而&lt;strong&gt;面向接口&lt;/strong&gt;编程，最终优化结果：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; db = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;./db.js&amp;#39;&lt;/span&gt;)
module.exports.add = (title) =&amp;gt; {
  &lt;span style=&#34;color:#228b22&#34;&gt;// 读取之前的任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; list = db.read()
  &lt;span style=&#34;color:#228b22&#34;&gt;// 添加一个title任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  list.push({ title, done: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt; })
  &lt;span style=&#34;color:#228b22&#34;&gt;// 存储任务到文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  db.write(list)

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建&lt;code&gt;db&lt;/code&gt;对象，内置读写两个接口，并使用&lt;code&gt;Promise&lt;/code&gt;进行封装，db.js:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; db = {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 读文件接口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    read(path = dbPath) {&lt;span style=&#34;color:#228b22&#34;&gt;// 指定默认参数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 读取之前的任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            fs.readFile(path, { flag: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a+&amp;#39;&lt;/span&gt; }, (error, data) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; reject(error)
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; list
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                    list = JSON.parse(data.toString())

                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (error) {
                    list = []
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 这是个异步函数，list不能直接返回，因为这是存在于回调函数中的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                }
                resolve(list)&lt;span style=&#34;color:#228b22&#34;&gt;// 如果成功了，则解析并返回list给外面
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            })
        })
    },
	&lt;span style=&#34;color:#228b22&#34;&gt;// 写文件接口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    write(list, path = dbPath) {&lt;span style=&#34;color:#228b22&#34;&gt;// 指定默认参数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; string = JSON.stringify(list)
            fs.writeFile(path, string + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;, (error) =&amp;gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (error)  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; reject(error) 
                &lt;span style=&#34;color:#228b22&#34;&gt;// return表示如果到这个if里面的话就终止，不用往后面走了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                resolve()
            })
        })
    }
}
module.exports = db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4实现其他功能&#34;&gt;4.实现其他功能&lt;/h1&gt;
&lt;h2 id=&#34;41-清除全部任务&#34;&gt;4.1 清除全部任务&lt;/h2&gt;
&lt;p&gt;实际上就是写一个空数组将其覆盖即可，同样也是异步的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;module.exports.clear = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; () =&amp;gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; db.write([])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;42-交互列表及交互功能实现&#34;&gt;4.2 交互列表及交互功能实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引入制作命令行交互功能的库：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; inquirer = require(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;inquirer&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用户在执行&lt;code&gt;node cli&lt;/code&gt;命令时，进入交互界面，则需要对用户输入的命令条数进行判断
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process.argv&lt;/code&gt;能够获取到用户输入的参数数组，在&lt;code&gt;cli.js&lt;/code&gt;中对其长度进行判断：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (process.argv.length === &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;) {
	api.showAll()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;index.js&lt;/code&gt;中编写主要实现逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;module.exports.showAll = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; () =&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 读取之前的任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; list = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; db.read()
    &lt;span style=&#34;color:#228b22&#34;&gt;// 打印之前的任务，并变为可操作列表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    printTasks(list)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;交互列表首页：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; printTasks(list) {
    inquirer&lt;span style=&#34;color:#228b22&#34;&gt;// 制作控制台交互功能的库
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        .prompt({
            type: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;,
            name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;// 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            message: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;请选择你想操作的任务：&amp;#39;&lt;/span&gt;,
            choices: [
                { name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;退出&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-1&amp;#39;&lt;/span&gt; },
                ...list.map((task, index) =&amp;gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; { name: &lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;task.done ? &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;[x]&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;[_]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;index + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;task.title&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;`&lt;/span&gt;, value: index.toString() } }),
                { name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;+创建任务&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-2&amp;#39;&lt;/span&gt; }
            ]
        }).then(answer =&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; index = &lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(answer.index)&lt;span style=&#34;color:#228b22&#34;&gt;// 把选中的index转换成数字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (index &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 说明选中了一个任务，继续进入操作列表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                askForAction(list, index)
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (index === -&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 说明选择的是创建任务
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                askForCreate(list, index)
            }
        })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;选中任务时的操作列表：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; askForAction(list, index) {
    inquirer.prompt({
        type: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;,
        name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;// 用户选中后返回的value的名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        message: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;请选择操作&amp;#39;&lt;/span&gt;,
        choices: [
            { name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;退出&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;quit&amp;#39;&lt;/span&gt; },
            { name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;已完成&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;markAsDone&amp;#39;&lt;/span&gt; },
            { name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;未完成&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;markAsUnDone&amp;#39;&lt;/span&gt; },
            { name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;修改标题&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;updateTitle&amp;#39;&lt;/span&gt; },
            { name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;删除任务&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;remove&amp;#39;&lt;/span&gt; },
        ],
    }).then(answer =&amp;gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (answer.action) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;markAsDone&amp;#39;&lt;/span&gt;:
                list[index].done = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
                db.write(list)
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;markAsUnDone&amp;#39;&lt;/span&gt;:
                list[index].done = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
                db.write(list)
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;updateTitle&amp;#39;&lt;/span&gt;:
                &lt;span style=&#34;color:#228b22&#34;&gt;// 更新标题需要一个输入框
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                inquirer.prompt({
                    type: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;,
                    name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;,
                    message: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;设置新标题：&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;: list[index].title&lt;span style=&#34;color:#228b22&#34;&gt;// 默认值为原标题
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                }).then(answer1 =&amp;gt; {
                    list[index].title = answer1.title
                    db.write(list)
                })
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;remove&amp;#39;&lt;/span&gt;:
                list.splice(index, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
                db.write(list)
                console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;删除成功！&amp;#39;&lt;/span&gt;)
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;选择创建任务时的操作：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; askForCreate(list) {
    inquirer.prompt({
        type: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;,
        name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;,
        message: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;输入任务标题：&amp;#39;&lt;/span&gt;
    }).then(answer =&amp;gt; {
        list.push({ title: answer.title, done: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt; })
        db.write(list)
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;5-发布至npm&#34;&gt;5 发布至npm&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;修改&lt;code&gt;package.json&lt;/code&gt;，添加&lt;code&gt;”bin“&lt;/code&gt;，指定命令行程序最终命令是什么；添加”files“，声明哪些文件在发布时是有用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bin&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt;{
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cli.js&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;files&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt;[ &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*.js&amp;#34;&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;cli.js&lt;/code&gt;第一行加入&lt;code&gt;shebang&lt;/code&gt;，告诉命令行使用什么来运行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;#!/usr/bin/env node
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;正式发布前，需要使用yrm或nrm将淘宝源修改为原始源&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;nrm ls
nrm use npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;登录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;npm adduser / yarn login
yarn publish / npm publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;下载&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;yarn global add node-todo-gsq 
npm i -g node-todo-gsq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;卸载&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;yarn global remove node-todo-gsq
npm uninstall -g node-todo-gsq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;升级&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;yarn upgrade node-todo-gsq
npm update node-todo-gsq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;或安装时指定版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;npm i -g node-todo-gsq@0.0.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gsemir0418.github.io/posts/node%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/ - </description>
        </item>
    
    
    
        <item>
        <title>React组件生命周期</title>
        <link>https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
        <pubDate>Fri, 25 Jun 2021 11:09:51 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/ -&lt;h1 id=&#34;1-生命周期的理解&#34;&gt;1 生命周期的理解&lt;/h1&gt;
&lt;h2 id=&#34;11-引出生命周期&#34;&gt;1.1 引出生命周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让指定的文本做显示* */* 隐藏的渐变动画&lt;/li&gt;
&lt;li&gt;从完全可见，到彻底消失，耗时2S&lt;/li&gt;
&lt;li&gt;点击“不活了”按钮从界面中卸载组件&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;源码及笔记如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; Life &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; React.Component {
        &lt;span style=&#34;color:#228b22&#34;&gt;//只要页面发生更新，则说明是状态在驱动
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        state = {
            opacity: &lt;span style=&#34;color:#b452cd&#34;&gt;0.5&lt;/span&gt;
        }

        death = () =&amp;gt; {
            ReactDOM.unmountComponentAtNode(&lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//和render一样 是由React帮忙调用的 因此不用写成箭头函数的形式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//执行时机：组件挂载到页面后
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentDidMount() {
            &lt;span style=&#34;color:#228b22&#34;&gt;//起个名字 挂到实例自身 方便清除时用
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.timer = setInterval(() =&amp;gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;//获取状态值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; opacity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state.opacity
                &lt;span style=&#34;color:#228b22&#34;&gt;//每次-0.1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                opacity -= &lt;span style=&#34;color:#b452cd&#34;&gt;0.1&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (opacity &amp;lt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;) opacity = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#228b22&#34;&gt;//设置新的透明度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.setState({ opacity })
            }, &lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;)
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//执行时机：组件将要被卸载
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentWillUnmount() {
            clearInterval(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.timer)
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//执行时机：初始化渲染、状态更新后
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        render() {
            &lt;span style=&#34;color:#228b22&#34;&gt;//如果将定时器函数放到render中，那么由于定时器中更新了state值，render函数就会不断被调用
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//从而形成无限递归
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// setInterval(() =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//     //获取状态值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//     let opacity = this.state.opacity
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//     //每次-0.1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//     opacity -= 0.1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//     if (opacity &amp;lt;= 0) opacity = 1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//     //设置新的透明度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//     this.setState({ opacity })
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// }, 200)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
                &amp;lt;div&amp;gt;
                    &amp;lt;h2 style={{ opacity: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state.opacity }}&amp;gt;React学不会怎么办&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/h2&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.death}&amp;gt;不活了&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
            )
        }
    }
    ReactDOM.render(&amp;lt;Life /&amp;gt;, &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12-生命周期的理解&#34;&gt;1.2 生命周期的理解&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;合适的时间节点做合适的事&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;组件从创建到死亡它会经历一些特定的阶段。&lt;/li&gt;
&lt;li&gt;React 组件中包含一系列勾子函数(生命周期回调函数), 会在特定的时刻调用。&lt;/li&gt;
&lt;li&gt;我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2-react生命周期旧&#34;&gt;2 React生命周期（旧）&lt;/h1&gt;
&lt;h2 id=&#34;21-react生命周期图旧&#34;&gt;2.1 React生命周期图（旧）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;.%5Creact%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%97%A7).png&#34; alt=&#34;react生命周期(旧)&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; Count &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; React.Component {
        &lt;span style=&#34;color:#228b22&#34;&gt;//构造器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        constructor(props) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;(props)
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---constructor&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#228b22&#34;&gt;//初始化状态
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state = { count: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; }
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件将要挂载的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentWillMount() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---componentWillMount&amp;#39;&lt;/span&gt;);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件是否更新的钩子 相当于&amp;#34;阀门&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        shouldComponentUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---shouldComponentUpdate&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件将要更新的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentWillUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---componentWillUpdate&amp;#39;&lt;/span&gt;);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;// 加一事件的回调
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        add = () =&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { count } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.setState({ count: count + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; })
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//强制更新组件的回调
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        force = () =&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.forceUpdate()
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件更新完毕的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentDidUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---componentDidUpdate&amp;#39;&lt;/span&gt;);
        }

        render() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---render&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { count } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
                &amp;lt;div&amp;gt;
                    &amp;lt;h2&amp;gt;当前求和为&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;{count}&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/h2&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.add}&amp;gt;点我+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.death}&amp;gt;卸载组件&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.force}&amp;gt;不更新状态&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;只是强制更新一下组件&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
            )
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件挂载完毕的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentDidMount() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---componentDidMount&amp;#39;&lt;/span&gt;);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件将要卸载的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentWillUnmount() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---conponentWillUnmount&amp;#39;&lt;/span&gt;);
        }

        death = () =&amp;gt; {
            ReactDOM.unmountComponentAtNode(&lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
        }
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;//父组件A
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; A &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; React.Component {
        &lt;span style=&#34;color:#228b22&#34;&gt;//初始化状态
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        state = {
            carName: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;奔驰&amp;#39;&lt;/span&gt;
        }

        changeCar = () =&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.setState({ carName: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;奥迪&amp;#39;&lt;/span&gt; })
        }

        render() {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
                &amp;lt;div&amp;gt;
                    &amp;lt;div&amp;gt;我是A组件&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.changeCar}&amp;gt;点我切换汽车信息&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                    &amp;lt;B carName={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state.carName} /&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
            )
        }
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;//子组件B
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; B &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; React.Component {

        &lt;span style=&#34;color:#228b22&#34;&gt;//第一次打开界面 发现其未运行 点击按钮后才会运行此钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//改名为componentWillReceiveNewProps更为准确
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//组件将要接收新的props的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentWillReceiveProps() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;B---componentWillReceiveProps&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.props);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//控制组件更新的阀门
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        shouldComponentUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;B---shouldComponentUpdate&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#228b22&#34;&gt;//只要写了此钩子 必须return一个布尔值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件将要更新的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentWillUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;B---componentWillUpdate&amp;#39;&lt;/span&gt;);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件更新完毕的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentDidUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;B---componentDidUpdate&amp;#39;&lt;/span&gt;);
        }

        render() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;B---render&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
                &amp;lt;div&amp;gt;我是B组件&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;接受到的汽车是{&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.props.carName}&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
            )
        }
    }

    ReactDOM.render(&amp;lt;Count /&amp;gt;, &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-总结生命周期旧&#34;&gt;2.2 总结生命周期（旧）&lt;/h2&gt;
&lt;p&gt;生命周期的三个阶段（旧）:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化阶段: 由 ReactDOM.render()触发&amp;mdash;初次渲染&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​    	1. constructor()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 2. componentWillMount() 
   
 3. render()
   
 4. **componentDidMount**()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​        		一般在此钩子中做一些初始化的事：开启定时器，发送网络请求、订阅消息&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发&lt;/p&gt;
&lt;p&gt;​	1. shouldComponentUpdate()&lt;/p&gt;
&lt;p&gt;​    2. componentWillUpdate()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 3. **render**()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​    		4. componentDidUpdate()&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;卸载组件: 由 ReactDOM.unmountComponentAtNode()触发&lt;/p&gt;
&lt;p&gt;​    1. &lt;strong&gt;componentWillUnmount&lt;/strong&gt;()&lt;/p&gt;
&lt;p&gt;​        	一般做一些收尾的事：关闭定时器、取消订阅消息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;23-react生命周期图新&#34;&gt;2.3 React生命周期图（新）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;.%5Creact%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%96%B0).png&#34; alt=&#34;react生命周期(新)&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; Count &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; React.Component {
        &lt;span style=&#34;color:#228b22&#34;&gt;//构造器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        constructor(props) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;(props)
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---constructor&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#228b22&#34;&gt;//初始化状态
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state = { count: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; }
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//通过props获取派生状态对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; getDerivedStateFromProps(props, state) {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---getDerivedStateFromProps&amp;#39;&lt;/span&gt;, props, state);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//必须有返回值，返回值可以是null也可以是state对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//return {count:2}//会覆盖初始化的state，且影响更新过程，setState方法失效（因为横跨挂载和更新过程）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//return props //可以接收props作为参数并返回 使得state值在任何时候都取决于props
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//在更新之前获取快照
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        getSnapshotBeforeUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---getSnapshotBeforeUpdate&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;atguigu&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//返回null或者snapshot值（任何值）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件是否更新的钩子 相当于&amp;#34;阀门&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        shouldComponentUpdate() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---shouldComponentUpdate&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;// 加一事件的回调
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        add = () =&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { count } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.setState({ count: count + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; })
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//强制更新组件的回调
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        force = () =&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.forceUpdate()
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件更新完毕的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//默认接收两个参数，分别是prevProps，prevState和snapshot值（例如滚轮位置）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentDidUpdate(prevProps, prevState, snapshot) {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---componentDidUpdate&amp;#39;&lt;/span&gt;, prevProps, prevState, snapshot);
        }

        render() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---render&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { count } = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.state
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
                &amp;lt;div&amp;gt;
                    &amp;lt;h2&amp;gt;当前求和为&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;{count}&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/h2&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.add}&amp;gt;点我+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.death}&amp;gt;卸载组件&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                    &amp;lt;button onClick={&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.force}&amp;gt;不更新状态&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;只是强制更新一下组件&amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/button&amp;gt;&lt;/span&gt;
                &amp;lt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/div&amp;gt;&lt;/span&gt;
            )
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件挂载完毕的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentDidMount() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---componentDidMount&amp;#39;&lt;/span&gt;);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//组件将要卸载的钩子
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        componentWillUnmount() {
            console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Count---conponentWillUnmount&amp;#39;&lt;/span&gt;);
        }

        death = () =&amp;gt; {
            ReactDOM.unmountComponentAtNode(&lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
        }
    }

    ReactDOM.render(&amp;lt;Count count={&lt;span style=&#34;color:#b452cd&#34;&gt;199&lt;/span&gt;} /&amp;gt;, &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;24-总结生命周期新&#34;&gt;2.4 总结生命周期（新）&lt;/h2&gt;
&lt;p&gt;生命周期的三个阶段（新）&lt;/p&gt;
&lt;p&gt;1.初始化阶段: 由 ReactDOM.render()触发&amp;mdash;初次渲染&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1. constructor() 
  
 2. **getDerivedStateFromProps**() 
  
 3. render() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		4. &lt;strong&gt;componentDidMount&lt;/strong&gt;() 即将出生的那一刻&lt;/p&gt;
&lt;p&gt;2.更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发&lt;/p&gt;
&lt;p&gt;​    	1. getDerivedStateFromProps ()&lt;/p&gt;
&lt;p&gt;​    	2. shouldComponentUpdate()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 3. **render**() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    	4. &lt;strong&gt;getSnapshotBeforeUpdate&lt;/strong&gt;()&lt;/p&gt;
&lt;p&gt;​    	5. componentDidUpdate()&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;卸载组件: 由 ReactDOM.unmountComponentAtNode()触发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. **componentWillUnmount**() 即将离去的那一刻
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;25-新旧生命周期对比&#34;&gt;2.5 新旧生命周期对比&lt;/h2&gt;
&lt;p&gt;即将在18版本废除三个钩子（willmount，willupdate，willreceiveprops）&lt;/p&gt;
&lt;p&gt;新增了两个钩子（getDerivedStateFromProps，getSnapshotBeforeUpdate）&lt;/p&gt;
- https://gsemir0418.github.io/posts/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/ - </description>
        </item>
    
    
    
        <item>
        <title>React Hooks全解</title>
        <link>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</link>
        <pubDate>Tue, 01 Jun 2021 17:02:51 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/ -&lt;h1 id=&#34;1usestate&#34;&gt;1.useState&lt;/h1&gt;
&lt;h2 id=&#34;使用状态&#34;&gt;使用状态&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [n, setN] = React.useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [user, setUser] = React.useState({name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;注意事项1不可局部更新&#34;&gt;注意事项1：不可局部更新&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [user, setUser] = useState({name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;,age:&lt;span style=&#34;color:#b452cd&#34;&gt;18&lt;/span&gt;})

setState({
	name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Sam&amp;#39;&lt;/span&gt;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结果得到的是{name:&amp;lsquo;Sam&amp;rsquo;}，age属性消失了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（可以在之前加上&amp;hellip;user，表示复制user的全部属性到这个新对象中）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说明对于state不能部分setState，因为setState&lt;strong&gt;不会帮我们合并属性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实际上React中所有hooks都不能自动合并属性，需要我们自己去操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意事项2地址要变&#34;&gt;注意事项2：地址要变&lt;/h2&gt;
&lt;p&gt;setState(obj)如果obj地址不变，那么React就认为数据没有变化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [user, setUser] = useState({name:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;,age:&lt;span style=&#34;color:#b452cd&#34;&gt;18&lt;/span&gt;})

user.name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Sam&amp;#39;&lt;/span&gt;

setState(user)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;表面上我们先改变了user对象的name属性（实际上也确实改变了），再将user对象setState进去，setState之后的user对象并没有改变。&lt;/li&gt;
&lt;li&gt;对于React来说，对象还是user（地址没变），因此React不认为user改变了，依然加载的是原来的user。&lt;/li&gt;
&lt;li&gt;上一个例子，是在setState中创建了一个新对象，因此React会直接加载新的对象（这也反映了&lt;strong&gt;setState并不会直接修改state，而是生成一个新的state&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;usestate接受函数&#34;&gt;useState接受函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [state, setState] = useState(() =&amp;gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; initState
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该函数返回初始state，且只执行一次，节约反复更新渲染组件时js引擎的解析时间（首次渲染时会解析，再次更新组件时js就不会解析这个匿名函数了）&lt;/p&gt;
&lt;h2 id=&#34;setstate接受函数&#34;&gt;setState接受函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [n, setN] = useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)

setN(n + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)

setN(n + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然运行了两次setN，但运行结果为1，并不是预想中的2，原因同样是由于setN并不会改变n的值，n始终为0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;setN(i =&amp;gt; i + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;传入函数的方式并&lt;strong&gt;没有直接传入state进行计算&lt;/strong&gt;，仅仅是一个&lt;strong&gt;形式化的操作&lt;/strong&gt;而已，建议优先选用此种方式进行setState&lt;/p&gt;
&lt;h1 id=&#34;2usereducer&#34;&gt;2.useReducer&lt;/h1&gt;
&lt;h2 id=&#34;用来践行fluxredux的思想&#34;&gt;(用来践行Flux/Redux的思想)&lt;/h2&gt;
&lt;h2 id=&#34;1创建初始值initialstate&#34;&gt;1.创建初始值initialState&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; initial = { n = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2创建所有操作reducerstateaction&#34;&gt;2.创建所有操作reducer(state,action)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; reducer = (state, action) =&amp;gt;{&lt;span style=&#34;color:#228b22&#34;&gt;//旧状态，操作的类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(action.type === &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;){
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; { n: state.n+action.number}
	}&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(action.type === &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;mult&amp;#39;&lt;/span&gt;){
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; { n: state.n*&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; }
	}&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;{
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;unknown type&amp;#39;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3传给usereducer得到读和写api调用写type--操作类型-&#34;&gt;3.传给useReducer，得到读和写API，调用写（{type : &amp;lsquo;操作类型&amp;rsquo; }）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App(){
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [state, dispatch] = useReducer(reducer,initial)
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; onClick = ()=&amp;gt;{
		dispatch({type: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, number : &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;})&lt;span style=&#34;color:#228b22&#34;&gt;//参数为action对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4总的来说usereducer是usestate的复杂版&#34;&gt;4.总的来说，useReducer是useState的复杂版&lt;/h2&gt;
&lt;h1 id=&#34;3usecontext&#34;&gt;3.useContext&lt;/h1&gt;
&lt;h2 id=&#34;1上下文是局部的全局变量&#34;&gt;1.上下文是局部的全局变量&lt;/h2&gt;
&lt;h2 id=&#34;2使用方法&#34;&gt;2.使用方法&lt;/h2&gt;
&lt;p&gt;1.使用C = createContext(initial)创建上下文&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; C = createContext(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.使用&amp;lt;C.Provider/&amp;gt;圈定作用域&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [n, setN] = useState(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)

&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;C.Provider&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;={{n, setN}}&amp;gt;&lt;span style=&#34;color:#228b22&#34;&gt;//将state和setState作为对象值传入上下文C中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt;/&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;C.Provider&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.在作用域内使用useContext(C)来使用上下文&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; {n, setN} = useContext(C)

onClick = () =&amp;gt;{setN(n =&amp;gt; n + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3注意事项&#34;&gt;3.注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不是响应式&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;在一个模块中将C里面的值改变，另一个模块不会感知到这个变化&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4useeffect&#34;&gt;4.useEffect&lt;/h1&gt;
&lt;h2 id=&#34;1副作用&#34;&gt;1.副作用&lt;/h2&gt;
&lt;p&gt;实际上叫做afterRender更好，每次render后运行&lt;/p&gt;
&lt;p&gt;（对环境的改变即为副作用，如修改document.title&lt;/p&gt;
&lt;p&gt;但我们不一定非要把副作用放在useEffect里&lt;/p&gt;
&lt;h2 id=&#34;2用途&#34;&gt;2.用途&lt;/h2&gt;
&lt;p&gt;1.替代componentDidMount使用，[ ]作为第二个参数，表示除第一次渲染后执行外，之后不会再执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;useEffect(() =&amp;gt;{
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;第一次渲染后执行&amp;#39;&lt;/span&gt;)
},[])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当第二个参数为空时，表示组件的任何状态变化后都会执行，包括第一次渲染后&lt;/p&gt;
&lt;p&gt;2.替代componentDidUpdate使用，可指定依赖，当n变化是执行，包括第一次渲染后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;useEffect(() =&amp;gt;{
	console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;n变化后执行&amp;#39;&lt;/span&gt;)
},[n])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.替代componentWillUnmount使用，通过return&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;useEffect(() =&amp;gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; id = setInterval(() =&amp;gt;{
		console.log(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;)
    },&lt;span style=&#34;color:#b452cd&#34;&gt;2000&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; () =&amp;gt;{&lt;span style=&#34;color:#658b00&#34;&gt;window&lt;/span&gt;.clearInterval(id)}
  },[])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上三种用途可同时存在&lt;/p&gt;
&lt;h2 id=&#34;3特点&#34;&gt;3.特点&lt;/h2&gt;
&lt;p&gt;如果同时存在多个useEffect，会&lt;strong&gt;按照出现次序执行&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;5uselayouteffect&#34;&gt;5.useLayoutEffect&lt;/h1&gt;
&lt;h2 id=&#34;布局副作用&#34;&gt;布局副作用&lt;/h2&gt;
&lt;p&gt;会在浏览器渲染前（屏幕像素改变之前）执行&lt;/p&gt;
&lt;h2 id=&#34;特点&#34;&gt;特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;useLayoutEffect&lt;strong&gt;总是比&lt;/strong&gt;useEffect要先执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;useLayoutEffect中的任务最好确实影响了Layout&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;经验&#34;&gt;经验&lt;/h2&gt;
&lt;p&gt;为了用户体验，优先使用useEffect（先将画面渲染给用户，再进行副作用）&lt;/p&gt;
&lt;h1 id=&#34;6usememo&#34;&gt;6.useMemo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;React中默认有多余的render，导致依赖其他状态的无关组件会被再次执行渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用React.memo(Child)将无关组件进行封装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Child2 = React.memo(Child)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Bug：但如果Child的props中有接收到的是函数时，但随着父组件的执行渲染，函数表达虽然没变，但此时地址改变了，故仍被再次执行，导致Child仍再次渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用useMemo封装此函数解决这个问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; onClickChild = useMemo(() =&amp;gt;{
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; () =&amp;gt;{ ...}
},[m])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;特点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个参数是()=&amp;gt;value&lt;/p&gt;
&lt;p&gt;第二个参数是依赖[m,n]&lt;/p&gt;
&lt;p&gt;只有当依赖变化时，才会计算出新的value；如果依赖不变，那就重用之前的value&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与Vue2中的computed相似&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般先memo组件，再useMemo函数&lt;/p&gt;
&lt;h1 id=&#34;7usecallback&#34;&gt;7.useCallBack&lt;/h1&gt;
&lt;p&gt;如果value是个函数，useMemo就要写成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;useMemo( () = &amp;gt; (x) =&amp;gt;{console.log(x) } )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;写起来很复杂，因此使用useCallback解决&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; onClickChild = useCallback ( (x) = &amp;gt; { log(x) }, [m] )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;8useref&#34;&gt;8.useRef&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果需要一个值，在组件不断render时保持不变，用useRef&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; count = useRef(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;读取：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;count.current
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;也可以将ref作为属性绑定到元素上，使用此ref能够引用到组件对应的DOM对象，类似document.getElementById&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;9forwardref&#34;&gt;9.forwardRef&lt;/h1&gt;
&lt;p&gt;由于props无法传递ref属性，导致不能直接在子组件上定义ref&lt;/p&gt;
&lt;p&gt;可以使用forwarRef将组件封装成新组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Button2 = React.forwardRef((props,ref)=&amp;gt;{
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;ref&lt;/span&gt;={ref} {&lt;span style=&#34;color:#658b00&#34;&gt;...props&lt;/span&gt;}/&amp;gt;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上只是允许了子组件接受一个新参数ref&lt;/p&gt;
&lt;h1 id=&#34;10替代redux&#34;&gt;10.替代Redux&lt;/h1&gt;
&lt;p&gt;1.将数据集中在store对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; store = {
	user:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
	books:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
	movies:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.将所有操作集中在reducer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; reducer = (state, action) =&amp;gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (action.type) {
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;setUser&amp;#34;&lt;/span&gt;:
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; { ...state, user: action.user };
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;setBooks&amp;#34;&lt;/span&gt;:
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; { ...state, books: action.books };
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;setMovies&amp;#34;&lt;/span&gt;:
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; { ...state, movies: action.movies };
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Error&lt;/span&gt;();
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.创建Context&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; Context = React.createContext(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.创建对数据的读写API（只能写在函数组件中）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [state, dispatch] = useReducer(reducer, store)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.将第四步的内容放到第三步的Context（把读写API赋值给Context.Provider）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Context.Provider&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;={{state,dispatch}}&amp;gt;
	...
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Context.Provider&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6.用Context.Provider将Context提供给所有组件（包起来）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Context.Provider&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;={{state,dispatch}}&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;User&lt;/span&gt;/&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Books&lt;/span&gt;/&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Movies&lt;/span&gt;/&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Context.Provider&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;7.各个组件用useContext获取读写API&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; User() {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { state, dispatch } = useContext(Context);
	useEffect(() =&amp;gt; {
		ajax(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/user&amp;#34;&lt;/span&gt;).then(user =&amp;gt; {
		dispatch({ type: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;setUser&amp;#34;&lt;/span&gt;, user: user });
		});
	}, [ ]);
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
	&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;个人信息&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
			&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;name: {state.user ? state.user.name : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
	)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;8.模块化&lt;/p&gt;
&lt;p&gt;![priceless-jennings-gyls6 - CodeSandbox - Google Chrome 2021_6_2 14_29_21](article_img/priceless-jennings-gyls6 - CodeSandbox - Google Chrome 2021_6_2 14_29_21-1622626575090.png)&lt;/p&gt;
&lt;h1 id=&#34;11自定义hooks&#34;&gt;11.自定义hooks&lt;/h1&gt;
&lt;p&gt;index.jsx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; ReactDOM from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; useList from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;./hooks/useList&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; App() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; { list, deleteIndex, addItem } = useList();
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;className&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;App&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;List&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; {
          addItem(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;jack&amp;#34;&lt;/span&gt;);
        }}
      &amp;gt;
        添加
      &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
      {list ? (
        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ol&lt;/span&gt;&amp;gt;
          {list.map((item, index) =&amp;gt; (
            &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;key&lt;/span&gt;={item.id}&amp;gt;
              {item.name}
              &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;
                &lt;span style=&#34;color:#658b00&#34;&gt;onClick&lt;/span&gt;={() =&amp;gt; {
                  deleteIndex(index);
                }}
              &amp;gt;
                删除
              &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;li&lt;/span&gt;&amp;gt;
          ))}
        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ol&lt;/span&gt;&amp;gt;
      ) : (
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;加载中...&amp;#34;&lt;/span&gt;
      )}
    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
  );
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; rootElement = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;);
ReactDOM.render(&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;App&lt;/span&gt; /&amp;gt;, rootElement);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;hooks/useList.js:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; { useState, useEffect } from &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; useList = () =&amp;gt; {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; [list, setList] = useState(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
  useEffect(() =&amp;gt; {
    ajax(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/list&amp;#34;&lt;/span&gt;).then((list) =&amp;gt; {
      setList(list);
    });
  }, []); &lt;span style=&#34;color:#228b22&#34;&gt;// [] 确保只在第一次运行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; {
    list: list,
    addItem: (name) =&amp;gt; {
      setList([...list, { id: &lt;span style=&#34;color:#658b00&#34;&gt;Math&lt;/span&gt;.random(), name: name }]);
      &lt;span style=&#34;color:#228b22&#34;&gt;//先复制一遍之前的list，再z后面写一个新的对象即可
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    },
    deleteIndex: (index) =&amp;gt; {
      setList(list.slice(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, index).concat(list.slice(index + &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)));
      &lt;span style=&#34;color:#228b22&#34;&gt;//截取从开头到被删对象的部分数组（不包括被删对象）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#228b22&#34;&gt;//截取从被删对象下一个开始到最后的部分数组
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#228b22&#34;&gt;//通过concat将两个数组合并
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
  };
};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; useList;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; ajax() {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; {
    setTimeout(() =&amp;gt; {
      resolve([
        { id: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;, name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Frank&amp;#34;&lt;/span&gt; },
        { id: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;, name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt; },
        { id: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;, name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt; },
        { id: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;, name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt; }
      ]);
    }, &lt;span style=&#34;color:#b452cd&#34;&gt;2000&lt;/span&gt;);
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://gsemir0418.github.io/posts/%E6%96%B9%E6%96%B9%E7%9A%84hooks/ - </description>
        </item>
    
    
    
        <item>
        <title>可视化大屏技术</title>
        <link>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Fri, 28 May 2021 09:30:55 +0800</pubDate>
        
        <guid>https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/</guid>
        <description>GSemir Blog https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/ -&lt;h1 id=&#34;1-背景和意义&#34;&gt;1 背景和意义&lt;/h1&gt;
&lt;p&gt;数据可视化即把相对复杂、抽象的数据通过可视化的方式以人们更易理解的形式展示出来的一系列手段，旨在更形象地表达数据内在的信息和规律，促进数据信息的传播和应用。在当前Web前端可视化技术的支持下，数据可视化除了“可视”，还有可交流、可互动的特点。数据可视化的本质是数据空间到图形空间的映射。是抽象数据的具象表达。&lt;/p&gt;
&lt;p&gt;大屏数据可视化是以大屏为主要展示载体的数据可视化设计。基于大屏展示“大面积、炫酷动效、丰富色彩”等主要特征，通过关键信息大屏共享的方式可方便企业团队讨论与决策，因此大屏也常应用与数据分析监测领域。目前大屏数据可视化主要分为信息展示、数据分析及监控预警三大类。&lt;/p&gt;
&lt;p&gt;随着大数据的发展，可视化大屏在各个行业的应用越来越广泛，尤其是在政府、商业、金融、制造等行业的业务场景中。例如，可视化大屏作为传递信息的有效手段，在城市智能运营中心、应急指挥中心、公安监控中心、电力调度中心、金融交易大厅等部门和机构中发挥着重要作用；同时它具有日常监测、分析判断、应急指挥、展示汇报等多种功能，在提高科学管理方面也发挥着重要作用。&lt;/p&gt;
&lt;h1 id=&#34;2-技术原理&#34;&gt;2 技术原理&lt;/h1&gt;
&lt;p&gt;数据可视化展示大屏主要基于&lt;code&gt;React&lt;/code&gt;框架、&lt;code&gt;ECharts&lt;/code&gt;可视化图表库、&lt;code&gt;CSS&lt;/code&gt;布局与适配以及特效制作等Web前端可视化开发技术。&lt;/p&gt;
&lt;h2 id=&#34;21-react框架&#34;&gt;2.1 React框架&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;React&lt;/code&gt;是一个声明式，高效且灵活的用于构建用户界面的JavaScript库。使用React可以将一些简短、独立的代码片段组合成复杂的UI界面，这些代码片段被称作“组件”。数据可视化展示大屏中的每个展示模块均可封装为独立的组件，方便复用与后期维护。&lt;/p&gt;
&lt;h2 id=&#34;22-大屏适配公式&#34;&gt;2.2 大屏适配公式&lt;/h2&gt;
&lt;p&gt;可视化大屏设计稿的比例通常为16:9，为了保证其在不同分辨率及屏幕比例上的展示效果，在开发时需运用大屏适配算法对大屏尺寸信息进行换算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ksh1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;公式1.1&lt;/code&gt;为大屏尺寸适配公式，其中&lt;code&gt;Wp&lt;/code&gt;为页面有效宽度，&lt;code&gt;Hp&lt;/code&gt;为页面有效高度。&lt;/p&gt;
&lt;h2 id=&#34;23-元素适配公式&#34;&gt;2.3 元素适配公式&lt;/h2&gt;
&lt;p&gt;锁定好大屏尺寸后，需要利用到&lt;code&gt;CSS3&lt;/code&gt;中新增的rem单位结合适配公式，对大屏内部各元素的尺寸针对不同比例的屏幕进行适配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rem&lt;/code&gt;（Root em）是&lt;code&gt;CSS3&lt;/code&gt;新增的一个相对单位，使用&lt;code&gt;rem&lt;/code&gt;为元素设定相对尺寸时，相对的只是HTML根元素。通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。&lt;code&gt;公式1.2&lt;/code&gt;为内部元素尺寸适配公式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ksh2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;24-echarts可视化图表库&#34;&gt;2.4 ECharts可视化图表库&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ECharts&lt;/code&gt;是一个使用JavaScript实现的开源可视化库，涵盖各行业图表，满足各种需求。其主要特点如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;丰富的可视化类型：提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap、旭日图，多维数据可视化的平行坐标，还有用于BI的漏斗图，仪表盘，并且支持图与图之间的混搭。&lt;/li&gt;
&lt;li&gt;多种数据格式无需转换直接使用：内置的dataset属性（4.0+）支持直接传入包括二维表，key-value等多种格式的数据源，此外还支持输入TypedArray格式的数据。&lt;/li&gt;
&lt;li&gt;千万数据的前端展现：通过增量渲染技术（4.0+），配合各种细致的优化，ECharts能够展现千万级的数据量。&lt;/li&gt;
&lt;li&gt;移动端优化：针对移动端交互做了细致的优化，例如移动端小屏上适于用手指在坐标系中进行缩放、平移。PC端也可以用鼠标在图中进行缩放（用鼠标滚轮）、平移等。&lt;/li&gt;
&lt;li&gt;多渲染方案，跨平台使用：支持以Canvas、SVG（4.0+）、VML的形式渲染图表。&lt;/li&gt;
&lt;li&gt;深度的交互式数据探索：提供了图例、视觉映射、数据区域缩放、tooltip、数据刷选等开箱即用的交互组件，可以对数据进行多维度数据筛取、视图缩放、展示细节等交互操作。&lt;/li&gt;
&lt;li&gt;多维数据的支持以及丰富的视觉编码手段：对于传统的散点图等，传入的数据也可以是多个维度的。&lt;/li&gt;
&lt;li&gt;动态数据：数据的改变驱动图表展现的改变。&lt;/li&gt;
&lt;li&gt;绚丽的特效：针对线数据，点数据等地理数据的可视化提供了吸引眼球的特效。&lt;/li&gt;
&lt;li&gt;通过GL实现更多更强大绚丽的三维可视化：在VR，大屏场景里实现三维的可视化效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3-技术实现方案&#34;&gt;3 技术实现方案&lt;/h1&gt;
&lt;h2 id=&#34;31-大屏设计流程&#34;&gt;3.1 大屏设计流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据业务场景抽取关键指标&lt;/p&gt;
&lt;p&gt;关键指标是一些概括性词语，是对一组或者一系列数据的统称。一般情况下，一个指标在大屏上独占一块区域。以supAPS为例，这里的关键指标有：原料库存、计划实际对比、产品库存与库存成本等。确定关键指标后，根据业务需求拟定各个指标展示的优先级（主、次、辅）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选定可视化图表类型&lt;/p&gt;
&lt;p&gt;同一个指标的数据，从不同维度分析就有不同结果。当确定好各项指标的分析维度后，事实上图表类型也就基本确定了。如库存成本选用柱状图的形式，装置加工选用表格的形式，计划实际对比选择折线图的形式等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面布局&lt;/p&gt;
&lt;p&gt;图表类型和屏幕尺寸确立后，接下来要对设计稿进行页面布局的划分。核心业务指标安排在中间位置、占较大面积；其余的指标按优先级依次在核心指标周围展开。一般把有关联的指标让其相邻或靠近，把图表类型相近的指标放一起，这样能减少观者认知上的负担并提高信息传递的效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面开发&lt;/p&gt;
&lt;p&gt;在定义好分析指标、确定页面布局后，进行前端样式的开发工作，将数据接入到前端并呈现出来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整体细节调优与测试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面开发完成后，将真实页面投放到大屏进行的测试与优化。主要分为两部分：&lt;/p&gt;
&lt;p&gt;1）视觉方面的测试：关键视觉元素、字体字号、页面动效、图形图表等是否按预期显示、有无变形、错位等情况。&lt;/p&gt;
&lt;p&gt;2）性能与数据方面的测试：图形图表动画是否流畅、数据加载、刷新有无异常；页面长时间展示是否存在奔溃、卡死等情况；后台控制系统能否正常切换前端页面显示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;32-大屏适配&#34;&gt;3.2 大屏适配&lt;/h2&gt;
&lt;p&gt;基于大屏适配公式，计算页面尺寸。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; clientWidth = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.documentElement.clientWidth
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; clientHeight = &lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.documentElement.clientHeight
	&lt;span style=&#34;color:#658b00&#34;&gt;window&lt;/span&gt;.pageWidth =
		clientWidth / clientHeight &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt; / &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;
		 ? clientHeight * (&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt; / &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;)
 : clientWidth
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; pageHeight = pageWidth / (&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt; / &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;)
&lt;span style=&#34;color:#658b00&#34;&gt;document&lt;/span&gt;.write(&lt;span style=&#34;color:#cd5555&#34;&gt;`&amp;lt;style&amp;gt;html{font-size:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;pageWidth / &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;px&amp;lt;/style&amp;gt;`&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在通用&lt;code&gt;SCSS&lt;/code&gt;文件中定义实际尺寸&lt;code&gt;rem&lt;/code&gt;与设计稿&lt;code&gt;px&lt;/code&gt;单位之间的换算关系函数，默认选用分辨率为1920*1080。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-less&#34; data-lang=&#34;less&#34;&gt;@function px($n) {@return $n / 1920 * 100rem;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;33-css布局&#34;&gt;3.3 CSS布局&lt;/h2&gt;
&lt;p&gt;对于内部展示区块，采用&lt;code&gt;CSS3&lt;/code&gt;的&lt;code&gt;Grid&lt;/code&gt;布局方式。&lt;code&gt;Grid&lt;/code&gt; 布局是将容器划分成&amp;quot;行&amp;quot;和&amp;quot;列&amp;quot;，产生单元格，然后指定&amp;quot;项目所在&amp;quot;的单元格，可以看作是二维布局。利用&lt;code&gt;grid-template-areas&lt;/code&gt;属性定义区域，通过&lt;code&gt;fr&lt;/code&gt;关键字确定区块间的比例关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ksh3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;34-特效制作&#34;&gt;3.4 特效制作&lt;/h2&gt;
&lt;h3 id=&#34;1-边框制作&#34;&gt;1 边框制作&lt;/h3&gt;
&lt;p&gt;利用css中&lt;code&gt;box-shadow&lt;/code&gt;可以无限叠加的机制，在原来边框的基础上，四角分别叠加两层不同颜色的边框阴影，实现边框效果的制作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ksh4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;box-shadow&lt;/span&gt;: 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;20px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-18px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;133661&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-20px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-18px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;0e325f&lt;/span&gt;,
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;20px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-18px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;0e325f&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-20px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-18px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;0e325f&lt;/span&gt;, 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;10px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-8px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;164b88&lt;/span&gt;,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-10px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-8px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;0d4483&lt;/span&gt;,
 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;10px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-8px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;0d4483&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-10px&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;-8px&lt;/span&gt; #&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;0d4483&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-霓虹字体&#34;&gt;2 霓虹字体&lt;/h3&gt;
&lt;p&gt;通过&lt;code&gt;@keyframes&lt;/code&gt;编写文本阴影动画，实现标题文本的霓虹闪烁的特效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ksh5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;@&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;keyframes&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;shining&lt;/span&gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;text-shadow&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;182&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;211&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;207&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.9&lt;/span&gt;),
        &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;182&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;211&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;207&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.3&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.5&lt;/span&gt;),
        &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.9&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;34&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.8&lt;/span&gt;),
        &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;54&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.9&lt;/span&gt;);
 	 }
 	 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;to&lt;/span&gt; {
         &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;text-shadow&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;182&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;211&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;207&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;),
         &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;182&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;211&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;207&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.4&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.6&lt;/span&gt;),
         &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.8&lt;/span&gt;), &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0.9&lt;/span&gt;),
         &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;70&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
 	 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-表格滚动特效&#34;&gt;3 表格滚动特效&lt;/h3&gt;
&lt;p&gt;大屏展示中的表格数据显示范围有限，因此需要使表格自动滚动来动态展示表格数据。根据表格滚动条与顶端距离，即判断&lt;code&gt;scrollHeight&lt;/code&gt;与&lt;code&gt;scrollTop&lt;/code&gt;的大小关系，通过设置定时器的方式不断增加&lt;code&gt;scrollTop&lt;/code&gt;的值，从而实现表格数据自动滚动的效果。&lt;/p&gt;
&lt;h2 id=&#34;35-echarts图表的制作&#34;&gt;3.5 ECharts图表的制作&lt;/h2&gt;
&lt;p&gt;引入&lt;code&gt;ECharts&lt;/code&gt;库后，通过&lt;code&gt;echarts.init&lt;/code&gt;方法初始化&lt;code&gt;ECharts实例&lt;/code&gt;并通过&lt;code&gt;setOption&lt;/code&gt;方法生成图表。参考官网的option示例配置，根据需求调整坐标轴与系列图形样式的属性参数即可。&lt;/p&gt;
&lt;p&gt;将图表本身与其所处区块元素视为一个整体的组件进行开发，提高复用性，方便后期维护。组件采用React函数组件形式，结合&lt;code&gt;useRef&lt;/code&gt;、&lt;code&gt;useEffect&lt;/code&gt;等&lt;code&gt;hooks&lt;/code&gt;函数，实现图表的初始化与参数配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./khs6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;36-实时更新数据&#34;&gt;3.6 实时更新数据&lt;/h2&gt;
&lt;p&gt;实时更新数据由于没有实际后端数据，因此使用定时器与随机数的方式模拟实时数据的更新。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;setInterval(() =&amp;gt; {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; newData = [
		{ name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;甲&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#658b00&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; },
		{ name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;乙&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#658b00&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; },
		{ name: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;丙&amp;#39;&lt;/span&gt;, value: &lt;span style=&#34;color:#658b00&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; },
   	]
    renderMyChart(newData)
}, &lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
- https://gsemir0418.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E6%8A%80%E6%9C%AF/ - </description>
        </item>
    
    
  </channel>
</rss> 